GAS LISTING /tmp/ccdnCwdC.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5RISCV10popSppSpieEv
   9              	_ZN5RISCV10popSppSpieEv:
  10              	.LFB28:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../lib/hw.h"
   2:src/riscv.cpp **** #include "../lib/console.h"
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** #include "../h/syscall_c.h"
   5:src/riscv.cpp **** #include "../h/Memoryallocator.hpp"
   6:src/riscv.cpp **** #include "../h/thread.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** extern void printInteger(uint64);
   9:src/riscv.cpp **** extern void printString(char*);
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** // first time running a thread, sepc inside of wrapper
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void RISCV::popSppSpie() {
  12              		.loc 1 13 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp **** 
  15:src/riscv.cpp ****     // not inline ( ra reg )
  16:src/riscv.cpp ****     // pop sstatus spp and spie bits
  17:src/riscv.cpp **** 
  18:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 18 5
  21              		.loc 1 18 39 is_stmt 0
  22              	#APP
  23              	# 18 "src/riscv.cpp" 1
  19              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 19 5 is_stmt 1
  27              		.loc 1 19 30 is_stmt 0
  28              	# 19 "src/riscv.cpp" 1
  20              	
  21:src/riscv.cpp ****     // => pop spp and spie !
  22:src/riscv.cpp ****     // exit from supervisor mode
  23:src/riscv.cpp **** }
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 23 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
GAS LISTING /tmp/ccdnCwdC.s 			page 2


  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE28:
  42              		.align	2
  43              		.globl	_ZN5RISCV16handle_interruptEv
  45              	_ZN5RISCV16handle_interruptEv:
  46              	.LFB29:
  24:src/riscv.cpp **** 
  25:src/riscv.cpp **** void RISCV::handle_interrupt() {
  47              		.loc 1 25 32 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57              		.cfi_offset 9, -24
  58              		.cfi_offset 18, -32
  59 0034 13040105 		addi	s0,sp,80
  60              		.cfi_def_cfa 8, 0
  26:src/riscv.cpp ****     uint64 op, a1, a2, a3, a4;
  61              		.loc 1 26 5
  27:src/riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(op)); // operation code
  62              		.loc 1 27 5
  63              		.loc 1 27 45 is_stmt 0
  64              	#APP
  65              	# 27 "src/riscv.cpp" 1
  28              	    __asm__ volatile("mv %0, a1" : "=r"(a1));
  66              		mv a6, a0
  67              	# 0 "" 2
  68              	.LVL0:
  69              		.loc 1 28 5 is_stmt 1
  70              		.loc 1 28 45 is_stmt 0
  71              	# 28 "src/riscv.cpp" 1
  29              	    __asm__ volatile("mv %0, a2" : "=r"(a2));
  72              		mv a0, a1
  73              	# 0 "" 2
  74              	.LVL1:
  75              		.loc 1 29 5 is_stmt 1
  76              		.loc 1 29 45 is_stmt 0
  77              	# 29 "src/riscv.cpp" 1
  30              	    __asm__ volatile("mv %0, a3" : "=r"(a3));
  78              		mv a1, a2
  79              	# 0 "" 2
  80              	.LVL2:
  81              		.loc 1 30 5 is_stmt 1
  82              		.loc 1 30 45 is_stmt 0
  83              	# 30 "src/riscv.cpp" 1
  31              	    __asm__ volatile("mv %0, a4" : "=r"(a4));
  84              		mv a2, a3
  85              	# 0 "" 2
  86              	.LVL3:
GAS LISTING /tmp/ccdnCwdC.s 			page 3


  87              		.loc 1 31 5 is_stmt 1
  88              		.loc 1 31 45 is_stmt 0
  89              	# 31 "src/riscv.cpp" 1
  32              	
  90              		mv a3, a4
  91              	# 0 "" 2
  92              	.LVL4:
  33:src/riscv.cpp ****     uint64 scause = rd_scause();
  93              		.loc 1 33 5 is_stmt 1
  94              	#NO_APP
  95              	.LBB33:
  96              	.LBB34:
  97              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 4/7/24.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class RISCV {
  11:src/../h/riscv.hpp **** public:
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp ****     enum causes {
  14:src/../h/riscv.hpp ****         SOFTWARE = 0x800000000000001UL,
  15:src/../h/riscv.hpp ****         EXTERNAL = 0x800000000000009UL,
  16:src/../h/riscv.hpp ****         U_ECALL  = 0x000000000000008UL,
  17:src/../h/riscv.hpp ****         S_ECALL  = 0x000000000000009UL
  18:src/../h/riscv.hpp ****     };
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     static void supervisor_trap();
  21:src/../h/riscv.hpp ****     static void handle_interrupt();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     static void push_regs();
  24:src/../h/riscv.hpp ****     static void pop_regs();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     static uint64 rd_scause();
  27:src/../h/riscv.hpp ****     static void wr_scause(uint64 value);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     static uint64 rd_sepc();
  30:src/../h/riscv.hpp ****     static void wr_sepc(uint64 value);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     static uint64 rd_stvec();
  33:src/../h/riscv.hpp ****     static void wr_stvec(uint64 value);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     static uint64 rd_stval();
  36:src/../h/riscv.hpp ****     static void wr_stval(uint64 value);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     static uint64 rd_sip();
  39:src/../h/riscv.hpp ****     static void wr_sip(uint64 value);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     static uint64 rd_sstatus();
  42:src/../h/riscv.hpp ****     static void wr_sstatus(uint64 value);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     static inline void mask_sip(uint64 mask) {
GAS LISTING /tmp/ccdnCwdC.s 			page 4


  45:src/../h/riscv.hpp ****         __asm__ volatile("csrc sip, %0" : : "r"(mask));
  46:src/../h/riscv.hpp ****     }
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     static inline void mask_status(uint64 mask) {
  49:src/../h/riscv.hpp ****         __asm__ volatile("csrc sstatus, %0" : : "r"(mask));
  50:src/../h/riscv.hpp ****     };
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     static void popSppSpie();
  53:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits
  54:src/../h/riscv.hpp ****     // must be in cpp !!!
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     enum mask_sstatus {
  57:src/../h/riscv.hpp ****         SIE = (1 << 1),
  58:src/../h/riscv.hpp ****         SPIE =(1 << 5),
  59:src/../h/riscv.hpp ****         SSP = (1 << 8)
  60:src/../h/riscv.hpp ****     };
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     enum mask_sip_sie {
  63:src/../h/riscv.hpp ****         SS = (1 << 1),
  64:src/../h/riscv.hpp ****         SE = (1 << 9)
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp **** };
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp **** inline uint64 RISCV::rd_scause() {
  70:src/../h/riscv.hpp ****     uint64 volatile value;
  98              		.loc 2 70 5
  71:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, scause" : "=r"(value));
  99              		.loc 2 71 5
 100              		.loc 2 71 55 is_stmt 0
 101              	#APP
 102              	# 71 "src/../h/riscv.hpp" 1
  72              	    return value;
 103              		csrr a5, scause
 104              	# 0 "" 2
 105              	#NO_APP
 106 0050 233CF4FA 		sd	a5,-72(s0)
 107              		.loc 2 72 5 is_stmt 1
 108              		.loc 2 72 12 is_stmt 0
 109 0054 033784FB 		ld	a4,-72(s0)
 110              	.LVL5:
 111              	.LBE34:
 112              	.LBE33:
  34:src/riscv.cpp **** 
  35:src/riscv.cpp ****     if (scause == SOFTWARE) {
 113              		.loc 1 35 5 is_stmt 1
 114              	.LBB35:
 115 0058 93071000 		li	a5,1
 116 005c 9397B703 		slli	a5,a5,59
 117 0060 93871700 		addi	a5,a5,1
 118 0064 6300F706 		beq	a4,a5,.L22
 119              	.LBE35:
  36:src/riscv.cpp **** 
  37:src/riscv.cpp ****         // software interrupt - timer
  38:src/riscv.cpp ****         mask_sip(SS);
  39:src/riscv.cpp ****         TCB::time_slice_count ++;
  40:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
GAS LISTING /tmp/ccdnCwdC.s 			page 5


  41:src/riscv.cpp ****         {
  42:src/riscv.cpp ****             uint64 sepc = rd_sepc();
  43:src/riscv.cpp ****             uint64 sstatus = rd_sstatus();
  44:src/riscv.cpp **** 
  45:src/riscv.cpp ****             TCB::time_slice_count = 0; // new running thread
  46:src/riscv.cpp ****             TCB::dispatch();
  47:src/riscv.cpp **** 
  48:src/riscv.cpp ****             wr_sstatus(sstatus);
  49:src/riscv.cpp ****             wr_sepc(sepc);
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****             // first time running thread -> context not saved
  52:src/riscv.cpp ****             // next instruction: inside of wrapper function
  53:src/riscv.cpp ****         }
  54:src/riscv.cpp ****         mask_sip(mask_sip_sie::SS);
  55:src/riscv.cpp **** 
  56:src/riscv.cpp ****     } else if (scause == EXTERNAL) {
 120              		.loc 1 56 12
 121              	.LBB73:
 122              	.LBB36:
 123 0068 93071000 		li	a5,1
 124 006c 9397B703 		slli	a5,a5,59
 125 0070 93879700 		addi	a5,a5,9
 126 0074 630CF70C 		beq	a4,a5,.L23
 127              	.LBE36:
 128              	.LBE73:
  57:src/riscv.cpp ****         // external interrupt - console
  58:src/riscv.cpp ****         console_handler();
  59:src/riscv.cpp ****         // plus INVALID INTERRUPT
  60:src/riscv.cpp **** 
  61:src/riscv.cpp ****     } else if (scause == U_ECALL || scause == S_ECALL){
 129              		.loc 1 61 12
 130              	.LBB74:
 131              	.LBB51:
 132              	.LBB37:
 133              		.loc 1 61 34 is_stmt 0
 134 0078 130787FF 		addi	a4,a4,-8
 135              	.LVL6:
 136              		.loc 1 61 12
 137 007c 93071000 		li	a5,1
 138 0080 63EEE706 		bgtu	a4,a5,.L3
 139              	.LBB38:
  62:src/riscv.cpp ****         // environment call from user / supervisor mode
  63:src/riscv.cpp **** 
  64:src/riscv.cpp ****         uint64 sepc = rd_sepc() + 4;
 140              		.loc 1 64 9 is_stmt 1
 141              	.LBB39:
 142              	.LBB40:
  73:src/../h/riscv.hpp **** }
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp **** inline void RISCV::wr_scause(uint64 value) {
  76:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %0" : : "r"(value));
  77:src/../h/riscv.hpp **** }
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sepc() {
  80:src/../h/riscv.hpp ****     uint64 volatile value;
 143              		.loc 2 80 5
  81:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc" : "=r"(value));
GAS LISTING /tmp/ccdnCwdC.s 			page 6


 144              		.loc 2 81 5
 145              		.loc 2 81 53 is_stmt 0
 146              	#APP
 147              	# 81 "src/../h/riscv.hpp" 1
  82              	    return value;
 148              		csrr a5, sepc
 149              	# 0 "" 2
 150              	#NO_APP
 151 0088 233CF4FC 		sd	a5,-40(s0)
 152              		.loc 2 82 5 is_stmt 1
 153              		.loc 2 82 12 is_stmt 0
 154 008c 833484FD 		ld	s1,-40(s0)
 155              	.LBE40:
 156              	.LBE39:
 157              		.loc 1 64 35
 158 0090 93844400 		addi	s1,s1,4
 159              	.LVL7:
  65:src/riscv.cpp ****         uint64 sstatus = rd_sstatus();
 160              		.loc 1 65 9 is_stmt 1
 161              	.LBB41:
 162              	.LBB42:
  83:src/../h/riscv.hpp **** }
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp **** inline void RISCV::wr_sepc(uint64 value) {
  86:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %0" : : "r"(value));
  87:src/../h/riscv.hpp **** }
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 RISCV::rd_stvec() {
  90:src/../h/riscv.hpp ****     uint64 volatile value;
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, stvec" : "=r"(value));
  92:src/../h/riscv.hpp ****     return value;
  93:src/../h/riscv.hpp **** }
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp **** inline void RISCV::wr_stvec(uint64 value) {
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %0" : : "r"(value));
  97:src/../h/riscv.hpp **** }
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp **** inline uint64 RISCV::rd_stval() {
 100:src/../h/riscv.hpp ****     uint64 volatile value;
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, stval" : "=r"(value));
 102:src/../h/riscv.hpp ****     return value;
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline void RISCV::wr_stval(uint64 value) {
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %0" : : "r"(value));
 107:src/../h/riscv.hpp **** }
 108:src/../h/riscv.hpp **** 
 109:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sip() {
 110:src/../h/riscv.hpp ****     uint64 volatile value;
 111:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sip" : "=r"(value));
 112:src/../h/riscv.hpp ****     return value;
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline void RISCV::wr_sip(uint64 value) {
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %0" : : "r"(value));
 117:src/../h/riscv.hpp **** }
 118:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccdnCwdC.s 			page 7


 119:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sstatus() {
 120:src/../h/riscv.hpp ****     uint64 volatile value;
 163              		.loc 2 120 5
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sstatus" : "=r"(value));
 164              		.loc 2 121 5
 165              		.loc 2 121 56 is_stmt 0
 166              	#APP
 167              	# 121 "src/../h/riscv.hpp" 1
 122              	    return value;
 168              		csrr a5, sstatus
 169              	# 0 "" 2
 170              	#NO_APP
 171 0098 2338F4FC 		sd	a5,-48(s0)
 172              		.loc 2 122 5 is_stmt 1
 173              		.loc 2 122 12 is_stmt 0
 174 009c 033904FD 		ld	s2,-48(s0)
 175              	.LVL8:
 176              	.LBE42:
 177              	.LBE41:
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****         switch (op) {
 178              		.loc 1 67 9 is_stmt 1
 179 00a0 93076002 		li	a5,38
 180 00a4 63EE070B 		bgtu	a6,a5,.L8
 181 00a8 13182800 		slli	a6,a6,2
 182              	.LVL9:
 183 00ac 17070000 		lla	a4,.L10
 183      13070700 
 184              	.LVL10:
 185 00b4 3308E800 		add	a6,a6,a4
 186 00b8 83270800 		lw	a5,0(a6)
 187 00bc B387E700 		add	a5,a5,a4
 188 00c0 67800700 		jr	a5
 189              		.section	.rodata
 190              		.align	2
 191              		.align	2
 192              	.L10:
 193 0000 00000000 		.word	.L8-.L10
 194 0004 00000000 		.word	.L20-.L10
 195 0008 00000000 		.word	.L19-.L10
 196 000c 00000000 		.word	.L8-.L10
 197 0010 00000000 		.word	.L8-.L10
 198 0014 00000000 		.word	.L8-.L10
 199 0018 00000000 		.word	.L8-.L10
 200 001c 00000000 		.word	.L8-.L10
 201 0020 00000000 		.word	.L8-.L10
 202 0024 00000000 		.word	.L8-.L10
 203 0028 00000000 		.word	.L8-.L10
 204 002c 00000000 		.word	.L8-.L10
 205 0030 00000000 		.word	.L8-.L10
 206 0034 00000000 		.word	.L8-.L10
 207 0038 00000000 		.word	.L8-.L10
 208 003c 00000000 		.word	.L8-.L10
 209 0040 00000000 		.word	.L8-.L10
 210 0044 00000000 		.word	.L18-.L10
 211 0048 00000000 		.word	.L17-.L10
 212 004c 00000000 		.word	.L16-.L10
GAS LISTING /tmp/ccdnCwdC.s 			page 8


 213 0050 00000000 		.word	.L8-.L10
 214 0054 00000000 		.word	.L8-.L10
 215 0058 00000000 		.word	.L8-.L10
 216 005c 00000000 		.word	.L8-.L10
 217 0060 00000000 		.word	.L8-.L10
 218 0064 00000000 		.word	.L8-.L10
 219 0068 00000000 		.word	.L8-.L10
 220 006c 00000000 		.word	.L8-.L10
 221 0070 00000000 		.word	.L8-.L10
 222 0074 00000000 		.word	.L8-.L10
 223 0078 00000000 		.word	.L8-.L10
 224 007c 00000000 		.word	.L8-.L10
 225 0080 00000000 		.word	.L8-.L10
 226 0084 00000000 		.word	.L15-.L10
 227 0088 00000000 		.word	.L14-.L10
 228 008c 00000000 		.word	.L13-.L10
 229 0090 00000000 		.word	.L12-.L10
 230 0094 00000000 		.word	.L11-.L10
 231 0098 00000000 		.word	.L9-.L10
 232              		.text
 233              	.LVL11:
 234              	.L22:
 235              	.LBE38:
 236              	.LBE37:
 237              	.LBE51:
 238              	.LBB52:
  38:src/riscv.cpp ****         TCB::time_slice_count ++;
 239              		.loc 1 38 9
 240              	.LBB53:
 241              	.LBB54:
  45:src/../h/riscv.hpp ****     }
 242              		.loc 2 45 9
  45:src/../h/riscv.hpp ****     }
 243              		.loc 2 45 55 is_stmt 0
 244 00c4 93072000 		li	a5,2
 245              	#APP
 246              	# 45 "src/../h/riscv.hpp" 1
 247              		csrc sip, a5
 248              	# 0 "" 2
 249              	.LVL12:
 250              	#NO_APP
 251              	.LBE54:
 252              	.LBE53:
  39:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
 253              		.loc 1 39 9 is_stmt 1
  39:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
 254              		.loc 1 39 31 is_stmt 0
 255 00cc 17070000 		la	a4,_ZN3TCB16time_slice_countE
 255      03370700 
 256              	.LVL13:
 257 00d4 83370700 		ld	a5,0(a4)
 258 00d8 93871700 		addi	a5,a5,1
 259 00dc 2330F700 		sd	a5,0(a4)
  40:src/riscv.cpp ****         {
 260              		.loc 1 40 9 is_stmt 1
 261              	.LBB55:
  40:src/riscv.cpp ****         {
GAS LISTING /tmp/ccdnCwdC.s 			page 9


 262              		.loc 1 40 64 is_stmt 0
 263 00e0 17070000 		la	a4,_ZN3TCB7runningE
 263      03370700 
 264 00e8 03370700 		ld	a4,0(a4)
 265              	.LVL14:
 266              	.LBB56:
 267              	.LBB57:
 268              		.file 3 "src/../h/thread.hpp"
   1:src/../h/thread.hpp **** //
   2:src/../h/thread.hpp **** // Created by os on 4/9/24.
   3:src/../h/thread.hpp **** //
   4:src/../h/thread.hpp **** 
   5:src/../h/thread.hpp **** #ifndef PROJECT_BASE_THREAD_HPP
   6:src/../h/thread.hpp **** #define PROJECT_BASE_THREAD_HPP
   7:src/../h/thread.hpp **** 
   8:src/../h/thread.hpp **** #include "../lib/hw.h"
   9:src/../h/thread.hpp **** #include "../h/Memoryallocator.hpp"
  10:src/../h/thread.hpp **** #include "../h/riscv.hpp"
  11:src/../h/thread.hpp **** 
  12:src/../h/thread.hpp **** using routine_ptr = void(*)(void *);
  13:src/../h/thread.hpp **** 
  14:src/../h/thread.hpp **** // _thread je wrapper ove klase
  15:src/../h/thread.hpp **** class TCB final {
  16:src/../h/thread.hpp **** 
  17:src/../h/thread.hpp ****     friend class RISCV;
  18:src/../h/thread.hpp ****     friend class Sem;
  19:src/../h/thread.hpp **** 
  20:src/../h/thread.hpp **** public:
  21:src/../h/thread.hpp **** 
  22:src/../h/thread.hpp ****     static TCB* running; // current thread
  23:src/../h/thread.hpp **** 
  24:src/../h/thread.hpp ****     enum state {
  25:src/../h/thread.hpp ****         RUNNABLE,
  26:src/../h/thread.hpp ****         SLEEPING,
  27:src/../h/thread.hpp ****         JOINED,
  28:src/../h/thread.hpp ****         FINISHED,
  29:src/../h/thread.hpp ****         BLOCKED
  30:src/../h/thread.hpp ****     };
  31:src/../h/thread.hpp ****     struct Context {
  32:src/../h/thread.hpp ****         // nadogradi kasnije
  33:src/../h/thread.hpp ****         uint64 pc;
  34:src/../h/thread.hpp ****         uint64 sp;
  35:src/../h/thread.hpp ****     };
  36:src/../h/thread.hpp **** 
  37:src/../h/thread.hpp ****     void start();
  38:src/../h/thread.hpp **** 
  39:src/../h/thread.hpp ****     static int _threadCreate(TCB** handle, routine_ptr routine, void* args, void* stack_space); // 
  40:src/../h/thread.hpp **** 
  41:src/../h/thread.hpp ****     static void yield(TCB*, TCB*);
  42:src/../h/thread.hpp **** 
  43:src/../h/thread.hpp ****     static void dispatch();
  44:src/../h/thread.hpp **** 
  45:src/../h/thread.hpp ****     state getState() const {return current_state;}
  46:src/../h/thread.hpp ****     time_t getTimeSlice() const {return time_slice;}
 269              		.loc 3 46 34 is_stmt 1
 270              		.loc 3 46 41 is_stmt 0
 271 00ec 03378702 		ld	a4,40(a4)
GAS LISTING /tmp/ccdnCwdC.s 			page 10


 272              	.LVL15:
 273              	.LBE57:
 274              	.LBE56:
  40:src/riscv.cpp ****         {
 275              		.loc 1 40 9
 276 00f0 63F2E702 		bgeu	a5,a4,.L24
 277              	.LVL16:
 278              	.L5:
 279              	.LBE55:
  54:src/riscv.cpp **** 
 280              		.loc 1 54 9 is_stmt 1
 281              	.LBB67:
 282              	.LBB68:
  45:src/../h/riscv.hpp ****     }
 283              		.loc 2 45 9
  45:src/../h/riscv.hpp ****     }
 284              		.loc 2 45 55 is_stmt 0
 285 00f4 93072000 		li	a5,2
 286              	#APP
 287              	# 45 "src/../h/riscv.hpp" 1
 288              		csrc sip, a5
 289              	# 0 "" 2
 290              	.LVL17:
 291              	#NO_APP
 292              	.L3:
 293              	.LBE68:
 294              	.LBE67:
 295              	.LBE52:
 296              	.LBE74:
  68:src/riscv.cpp ****             case MEM_ALLOC:
  69:src/riscv.cpp ****                 MemoryAllocator::mem_alloc((size_t)a1);
  70:src/riscv.cpp ****                 break;
  71:src/riscv.cpp ****             case MEM_FREE:
  72:src/riscv.cpp ****                 MemoryAllocator::mem_free((void *)a1);
  73:src/riscv.cpp ****                 break;
  74:src/riscv.cpp ****             case THREAD_CREATE:
  75:src/riscv.cpp ****                 TCB::_threadCreate((TCB**)a1, (routine_ptr)a2, (void *)a3, (void *)a4);
  76:src/riscv.cpp ****                 break;
  77:src/riscv.cpp ****             case THREAD_EXIT:
  78:src/riscv.cpp ****                 TCB::_threadExit();
  79:src/riscv.cpp ****                 break;
  80:src/riscv.cpp ****             case THREAD_DISPATCH:
  81:src/riscv.cpp ****                 TCB::dispatch();
  82:src/riscv.cpp ****                 break;
  83:src/riscv.cpp ****             case SEM_OPEN:
  84:src/riscv.cpp ****                 Sem::open((sem_t*)a1, (unsigned int)a2);
  85:src/riscv.cpp ****                 break;
  86:src/riscv.cpp ****             case SEM_CLOSE:
  87:src/riscv.cpp ****                 Sem::s_close((sem_t)a1); // a1 == handle
  88:src/riscv.cpp ****                 break;
  89:src/riscv.cpp ****             case SEM_WAIT:
  90:src/riscv.cpp ****                 ((sem_t)a1)->wait(); // a1 <=> handle
  91:src/riscv.cpp ****                 break;
  92:src/riscv.cpp ****             case SEM_SIGNAL:
  93:src/riscv.cpp ****                 ((sem_t)a1)->signal(); // a1 <=> handle
  94:src/riscv.cpp ****                 break;
  95:src/riscv.cpp ****             case SEM_TIMEDWAIT:
GAS LISTING /tmp/ccdnCwdC.s 			page 11


  96:src/riscv.cpp ****                 ((sem_t)a1)->timedWait((time_t)a2);
  97:src/riscv.cpp ****                 break;
  98:src/riscv.cpp ****             case SEM_TRYWAIT:
  99:src/riscv.cpp ****                 ((sem_t)a1)->trywait();
 100:src/riscv.cpp ****                 break;
 101:src/riscv.cpp ****             case TIME_SLEEP:
 102:src/riscv.cpp ****                 // ...
 103:src/riscv.cpp ****                 break;
 104:src/riscv.cpp ****             case GETC:
 105:src/riscv.cpp ****                 // ...
 106:src/riscv.cpp ****                 break;
 107:src/riscv.cpp ****             case PUTC:
 108:src/riscv.cpp ****                 // ...
 109:src/riscv.cpp ****                 break;
 110:src/riscv.cpp ****         }
 111:src/riscv.cpp **** 
 112:src/riscv.cpp ****         wr_sepc(sepc);
 113:src/riscv.cpp ****         wr_sstatus(sstatus);
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****     } else {
 116:src/riscv.cpp ****         // INVALID INTERRUPT CODE
 117:src/riscv.cpp ****     }
 118:src/riscv.cpp **** }
 297              		.loc 1 118 1
 298 00fc 83308104 		ld	ra,72(sp)
 299              		.cfi_remember_state
 300              		.cfi_restore 1
 301 0100 03340104 		ld	s0,64(sp)
 302              		.cfi_restore 8
 303              		.cfi_def_cfa 2, 80
 304 0104 83348103 		ld	s1,56(sp)
 305              		.cfi_restore 9
 306 0108 03390103 		ld	s2,48(sp)
 307              		.cfi_restore 18
 308 010c 13010105 		addi	sp,sp,80
 309              		.cfi_def_cfa_offset 0
 310 0110 67800000 		jr	ra
 311              	.LVL18:
 312              	.L24:
 313              		.cfi_restore_state
 314              	.LBB75:
 315              	.LBB70:
 316              	.LBB69:
 317              	.LBB58:
  42:src/riscv.cpp ****             uint64 sstatus = rd_sstatus();
 318              		.loc 1 42 13 is_stmt 1
 319              	.LBB59:
 320              	.LBB60:
  80:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc" : "=r"(value));
 321              		.loc 2 80 5
  81:src/../h/riscv.hpp ****     return value;
 322              		.loc 2 81 5
  81:src/../h/riscv.hpp ****     return value;
 323              		.loc 2 81 53 is_stmt 0
 324              	#APP
 325              	# 81 "src/../h/riscv.hpp" 1
 326              		csrr a5, sepc
GAS LISTING /tmp/ccdnCwdC.s 			page 12


 327              	# 0 "" 2
 328              	#NO_APP
 329 0118 2334F4FC 		sd	a5,-56(s0)
  82:src/../h/riscv.hpp **** }
 330              		.loc 2 82 5 is_stmt 1
  82:src/../h/riscv.hpp **** }
 331              		.loc 2 82 12 is_stmt 0
 332 011c 833484FC 		ld	s1,-56(s0)
 333              	.LVL19:
 334              	.LBE60:
 335              	.LBE59:
  43:src/riscv.cpp **** 
 336              		.loc 1 43 13 is_stmt 1
 337              	.LBB61:
 338              	.LBB62:
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sstatus" : "=r"(value));
 339              		.loc 2 120 5
 121:src/../h/riscv.hpp ****     return value;
 340              		.loc 2 121 5
 121:src/../h/riscv.hpp ****     return value;
 341              		.loc 2 121 56 is_stmt 0
 342              	#APP
 343              	# 121 "src/../h/riscv.hpp" 1
 344              		csrr a5, sstatus
 345              	# 0 "" 2
 346              	#NO_APP
 347 0124 2330F4FC 		sd	a5,-64(s0)
 348              		.loc 2 122 5 is_stmt 1
 349              		.loc 2 122 12 is_stmt 0
 350 0128 033904FC 		ld	s2,-64(s0)
 351              	.LVL20:
 352              	.LBE62:
 353              	.LBE61:
  45:src/riscv.cpp ****             TCB::dispatch();
 354              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             TCB::dispatch();
 355              		.loc 1 45 35 is_stmt 0
 356 012c 97070000 		la	a5,_ZN3TCB16time_slice_countE
 356      83B70700 
 357 0134 23B00700 		sd	zero,0(a5)
  46:src/riscv.cpp **** 
 358              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp **** 
 359              		.loc 1 46 26 is_stmt 0
 360 0138 97000000 		call	_ZN3TCB8dispatchEv@plt
 360      E7800000 
 361              	.LVL21:
  48:src/riscv.cpp ****             wr_sepc(sepc);
 362              		.loc 1 48 13 is_stmt 1
 363              	.LBB63:
 364              	.LBB64:
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline void RISCV::wr_sstatus(uint64 value) {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %0" : : "r"(value));
 365              		.loc 2 126 5
 366              		.loc 2 126 57 is_stmt 0
GAS LISTING /tmp/ccdnCwdC.s 			page 13


 367              	#APP
 368              	# 126 "src/../h/riscv.hpp" 1
 127              	}
 369              		csrw sstatus, s2
 370              	# 0 "" 2
 371              	.LVL22:
 372              	#NO_APP
 373              	.LBE64:
 374              	.LBE63:
  49:src/riscv.cpp **** 
 375              		.loc 1 49 13 is_stmt 1
 376              	.LBB65:
 377              	.LBB66:
  86:src/../h/riscv.hpp **** }
 378              		.loc 2 86 5
  86:src/../h/riscv.hpp **** }
 379              		.loc 2 86 54 is_stmt 0
 380              	#APP
 381              	# 86 "src/../h/riscv.hpp" 1
  87:src/../h/riscv.hpp **** 
 382              		csrw sepc, s1
 383              	# 0 "" 2
 384              		.loc 2 87 1
 385              	#NO_APP
 386 0148 6FF0DFFA 		j	.L5
 387              	.LVL23:
 388              	.L23:
 389              	.LBE66:
 390              	.LBE65:
 391              	.LBE58:
 392              	.LBE69:
 393              	.LBE70:
 394              	.LBB71:
  58:src/riscv.cpp ****         // plus INVALID INTERRUPT
 395              		.loc 1 58 9 is_stmt 1
  58:src/riscv.cpp ****         // plus INVALID INTERRUPT
 396              		.loc 1 58 24 is_stmt 0
 397 014c 97000000 		call	console_handler@plt
 397      E7800000 
 398              	.LVL24:
 399 0154 6FF09FFA 		j	.L3
 400              	.LVL25:
 401              	.L20:
 402              	.LBB49:
 403              	.LBB47:
  68:src/riscv.cpp ****                 MemoryAllocator::mem_alloc((size_t)a1);
 404              		.loc 1 68 13 is_stmt 1
  69:src/riscv.cpp ****                 break;
 405              		.loc 1 69 17
  69:src/riscv.cpp ****                 break;
 406              		.loc 1 69 43 is_stmt 0
 407 0158 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 407      E7800000 
 408              	.LVL26:
  70:src/riscv.cpp ****             case MEM_FREE:
 409              		.loc 1 70 17 is_stmt 1
 410              	.L8:
GAS LISTING /tmp/ccdnCwdC.s 			page 14


 112:src/riscv.cpp ****         wr_sstatus(sstatus);
 411              		.loc 1 112 9
 412              	.LBB43:
 413              	.LBB44:
  86:src/../h/riscv.hpp **** }
 414              		.loc 2 86 5
  86:src/../h/riscv.hpp **** }
 415              		.loc 2 86 54 is_stmt 0
 416              	#APP
 417              	# 86 "src/../h/riscv.hpp" 1
 418              		csrw sepc, s1
 419              	# 0 "" 2
 420              	.LVL27:
 421              	#NO_APP
 422              	.LBE44:
 423              	.LBE43:
 113:src/riscv.cpp **** 
 424              		.loc 1 113 9 is_stmt 1
 425              	.LBB45:
 426              	.LBB46:
 126:src/../h/riscv.hpp **** }
 427              		.loc 2 126 5
 126:src/../h/riscv.hpp **** }
 428              		.loc 2 126 57 is_stmt 0
 429              	#APP
 430              	# 126 "src/../h/riscv.hpp" 1
 431              		csrw sstatus, s2
 432              	# 0 "" 2
 433              	.LVL28:
 434              	#NO_APP
 435              	.LBE46:
 436              	.LBE45:
 437              	.LBE47:
 438              	.LBE49:
 439              	.LBE71:
 440              	.LBE75:
 441              		.loc 1 118 1
 442 0168 6FF05FF9 		j	.L3
 443              	.LVL29:
 444              	.L19:
 445              	.LBB76:
 446              	.LBB72:
 447              	.LBB50:
 448              	.LBB48:
  71:src/riscv.cpp ****                 MemoryAllocator::mem_free((void *)a1);
 449              		.loc 1 71 13 is_stmt 1
  72:src/riscv.cpp ****                 break;
 450              		.loc 1 72 17
  72:src/riscv.cpp ****                 break;
 451              		.loc 1 72 42 is_stmt 0
 452 016c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPKv@plt
 452      E7800000 
 453              	.LVL30:
  73:src/riscv.cpp ****             case THREAD_CREATE:
 454              		.loc 1 73 17 is_stmt 1
 455 0174 6FF0DFFE 		j	.L8
 456              	.LVL31:
GAS LISTING /tmp/ccdnCwdC.s 			page 15


 457              	.L18:
  74:src/riscv.cpp ****                 TCB::_threadCreate((TCB**)a1, (routine_ptr)a2, (void *)a3, (void *)a4);
 458              		.loc 1 74 13
  75:src/riscv.cpp ****                 break;
 459              		.loc 1 75 17
  75:src/riscv.cpp ****                 break;
 460              		.loc 1 75 35 is_stmt 0
 461 0178 97000000 		call	_ZN3TCB13_threadCreateEPPS_PFvPvES2_S2_@plt
 461      E7800000 
 462              	.LVL32:
  76:src/riscv.cpp ****             case THREAD_EXIT:
 463              		.loc 1 76 17 is_stmt 1
 464 0180 6FF01FFE 		j	.L8
 465              	.LVL33:
 466              	.L17:
  77:src/riscv.cpp ****                 TCB::_threadExit();
 467              		.loc 1 77 13
  78:src/riscv.cpp ****                 break;
 468              		.loc 1 78 17
  78:src/riscv.cpp ****                 break;
 469              		.loc 1 78 33 is_stmt 0
 470 0184 97000000 		call	_ZN3TCB11_threadExitEv@plt
 470      E7800000 
 471              	.LVL34:
  79:src/riscv.cpp ****             case THREAD_DISPATCH:
 472              		.loc 1 79 17 is_stmt 1
 473 018c 6FF05FFD 		j	.L8
 474              	.LVL35:
 475              	.L16:
  80:src/riscv.cpp ****                 TCB::dispatch();
 476              		.loc 1 80 13
  81:src/riscv.cpp ****                 break;
 477              		.loc 1 81 17
  81:src/riscv.cpp ****                 break;
 478              		.loc 1 81 30 is_stmt 0
 479 0190 97000000 		call	_ZN3TCB8dispatchEv@plt
 479      E7800000 
 480              	.LVL36:
  82:src/riscv.cpp ****             case SEM_OPEN:
 481              		.loc 1 82 17 is_stmt 1
 482 0198 6FF09FFC 		j	.L8
 483              	.LVL37:
 484              	.L15:
  83:src/riscv.cpp ****                 Sem::open((sem_t*)a1, (unsigned int)a2);
 485              		.loc 1 83 13
  84:src/riscv.cpp ****                 break;
 486              		.loc 1 84 17
  84:src/riscv.cpp ****                 break;
 487              		.loc 1 84 26 is_stmt 0
 488 019c 9B850500 		sext.w	a1,a1
 489              	.LVL38:
 490 01a0 97000000 		call	_ZN3Sem4openEPPS_j@plt
 490      E7800000 
 491              	.LVL39:
  85:src/riscv.cpp ****             case SEM_CLOSE:
 492              		.loc 1 85 17 is_stmt 1
 493 01a8 6FF09FFB 		j	.L8
GAS LISTING /tmp/ccdnCwdC.s 			page 16


 494              	.LVL40:
 495              	.L14:
  86:src/riscv.cpp ****                 Sem::s_close((sem_t)a1); // a1 == handle
 496              		.loc 1 86 13
  87:src/riscv.cpp ****                 break;
 497              		.loc 1 87 17
  87:src/riscv.cpp ****                 break;
 498              		.loc 1 87 29 is_stmt 0
 499 01ac 97000000 		call	_ZN3Sem7s_closeEPS_@plt
 499      E7800000 
 500              	.LVL41:
  88:src/riscv.cpp ****             case SEM_WAIT:
 501              		.loc 1 88 17 is_stmt 1
 502 01b4 6FF0DFFA 		j	.L8
 503              	.LVL42:
 504              	.L13:
  89:src/riscv.cpp ****                 ((sem_t)a1)->wait(); // a1 <=> handle
 505              		.loc 1 89 13
  90:src/riscv.cpp ****                 break;
 506              		.loc 1 90 17
  90:src/riscv.cpp ****                 break;
 507              		.loc 1 90 34 is_stmt 0
 508 01b8 97000000 		call	_ZN3Sem4waitEv@plt
 508      E7800000 
 509              	.LVL43:
  91:src/riscv.cpp ****             case SEM_SIGNAL:
 510              		.loc 1 91 17 is_stmt 1
 511 01c0 6FF01FFA 		j	.L8
 512              	.LVL44:
 513              	.L12:
  92:src/riscv.cpp ****                 ((sem_t)a1)->signal(); // a1 <=> handle
 514              		.loc 1 92 13
  93:src/riscv.cpp ****                 break;
 515              		.loc 1 93 17
  93:src/riscv.cpp ****                 break;
 516              		.loc 1 93 36 is_stmt 0
 517 01c4 97000000 		call	_ZN3Sem6signalEv@plt
 517      E7800000 
 518              	.LVL45:
  94:src/riscv.cpp ****             case SEM_TIMEDWAIT:
 519              		.loc 1 94 17 is_stmt 1
 520 01cc 6FF05FF9 		j	.L8
 521              	.LVL46:
 522              	.L11:
  95:src/riscv.cpp ****                 ((sem_t)a1)->timedWait((time_t)a2);
 523              		.loc 1 95 13
  96:src/riscv.cpp ****                 break;
 524              		.loc 1 96 17
  96:src/riscv.cpp ****                 break;
 525              		.loc 1 96 39 is_stmt 0
 526 01d0 97000000 		call	_ZN3Sem9timedWaitEm@plt
 526      E7800000 
 527              	.LVL47:
  97:src/riscv.cpp ****             case SEM_TRYWAIT:
 528              		.loc 1 97 17 is_stmt 1
 529 01d8 6FF09FF8 		j	.L8
 530              	.LVL48:
GAS LISTING /tmp/ccdnCwdC.s 			page 17


 531              	.L9:
  98:src/riscv.cpp ****                 ((sem_t)a1)->trywait();
 532              		.loc 1 98 13
  99:src/riscv.cpp ****                 break;
 533              		.loc 1 99 17
  99:src/riscv.cpp ****                 break;
 534              		.loc 1 99 37 is_stmt 0
 535 01dc 97000000 		call	_ZN3Sem7trywaitEv@plt
 535      E7800000 
 536              	.LVL49:
 100:src/riscv.cpp ****             case TIME_SLEEP:
 537              		.loc 1 100 17 is_stmt 1
 538 01e4 6FF0DFF7 		j	.L8
 539              	.LBE48:
 540              	.LBE50:
 541              	.LBE72:
 542              	.LBE76:
 543              		.cfi_endproc
 544              	.LFE29:
 546              	.Letext0:
 547              		.file 4 "src/../lib/hw.h"
 548              		.file 5 "src/../h/../h/Memoryallocator.hpp"
 549              		.file 6 "src/../h/semaphore.hpp"
 550              		.file 7 "src/../h/syscall_c.h"
 551              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccdnCwdC.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccdnCwdC.s:9      .text:0000000000000000 _ZN5RISCV10popSppSpieEv
     /tmp/ccdnCwdC.s:13     .text:0000000000000000 .L0 
     /tmp/ccdnCwdC.s:14     .text:0000000000000000 .L0 
     /tmp/ccdnCwdC.s:15     .text:0000000000000004 .L0 
     /tmp/ccdnCwdC.s:17     .text:0000000000000008 .L0 
     /tmp/ccdnCwdC.s:19     .text:000000000000000c .L0 
     /tmp/ccdnCwdC.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:18     .text:000000000000000c .L0 
     /tmp/ccdnCwdC.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:19     .text:0000000000000010 .L0 
     /tmp/ccdnCwdC.s:33     .text:0000000000000014 .L0 
     /tmp/ccdnCwdC.s:34     .text:0000000000000018 .L0 
     /tmp/ccdnCwdC.s:35     .text:0000000000000018 .L0 
     /tmp/ccdnCwdC.s:37     .text:000000000000001c .L0 
     /tmp/ccdnCwdC.s:39     .text:0000000000000020 .L0 
     /tmp/ccdnCwdC.s:45     .text:0000000000000020 _ZN5RISCV16handle_interruptEv
     /tmp/ccdnCwdC.s:48     .text:0000000000000020 .L0 
     /tmp/ccdnCwdC.s:49     .text:0000000000000020 .L0 
     /tmp/ccdnCwdC.s:50     .text:0000000000000024 .L0 
     /tmp/ccdnCwdC.s:55     .text:0000000000000034 .L0 
     /tmp/ccdnCwdC.s:56     .text:0000000000000034 .L0 
     /tmp/ccdnCwdC.s:57     .text:0000000000000034 .L0 
     /tmp/ccdnCwdC.s:58     .text:0000000000000034 .L0 
     /tmp/ccdnCwdC.s:60     .text:0000000000000038 .L0 
     /tmp/ccdnCwdC.s:62     .text:0000000000000038 .L0 
     /tmp/ccdnCwdC.s:63     .text:0000000000000038 .L0 
       src/riscv.cpp:27     .text:0000000000000038 .L0 
     /tmp/ccdnCwdC.s:70     .text:000000000000003c .L0 
       src/riscv.cpp:28     .text:000000000000003c .L0 
     /tmp/ccdnCwdC.s:76     .text:0000000000000040 .L0 
       src/riscv.cpp:29     .text:0000000000000040 .L0 
     /tmp/ccdnCwdC.s:82     .text:0000000000000044 .L0 
       src/riscv.cpp:30     .text:0000000000000044 .L0 
     /tmp/ccdnCwdC.s:88     .text:0000000000000048 .L0 
       src/riscv.cpp:31     .text:0000000000000048 .L0 
     /tmp/ccdnCwdC.s:98     .text:000000000000004c .L0 
     /tmp/ccdnCwdC.s:99     .text:000000000000004c .L0 
     /tmp/ccdnCwdC.s:100    .text:000000000000004c .L0 
  src/../h/riscv.hpp:71     .text:000000000000004c .L0 
     /tmp/ccdnCwdC.s:108    .text:0000000000000054 .L0 
     /tmp/ccdnCwdC.s:109    .text:0000000000000054 .L0 
     /tmp/ccdnCwdC.s:115    .text:0000000000000058 .L0 
     /tmp/ccdnCwdC.s:123    .text:0000000000000068 .L0 
     /tmp/ccdnCwdC.s:133    .text:0000000000000078 .L0 
     /tmp/ccdnCwdC.s:134    .text:0000000000000078 .L0 
     /tmp/ccdnCwdC.s:137    .text:000000000000007c .L0 
     /tmp/ccdnCwdC.s:143    .text:0000000000000084 .L0 
     /tmp/ccdnCwdC.s:144    .text:0000000000000084 .L0 
     /tmp/ccdnCwdC.s:145    .text:0000000000000084 .L0 
  src/../h/riscv.hpp:81     .text:0000000000000084 .L0 
     /tmp/ccdnCwdC.s:153    .text:000000000000008c .L0 
     /tmp/ccdnCwdC.s:154    .text:000000000000008c .L0 
     /tmp/ccdnCwdC.s:158    .text:0000000000000090 .L0 
     /tmp/ccdnCwdC.s:163    .text:0000000000000094 .L0 
     /tmp/ccdnCwdC.s:164    .text:0000000000000094 .L0 
GAS LISTING /tmp/ccdnCwdC.s 			page 19


     /tmp/ccdnCwdC.s:165    .text:0000000000000094 .L0 
  src/../h/riscv.hpp:121    .text:0000000000000094 .L0 
     /tmp/ccdnCwdC.s:173    .text:000000000000009c .L0 
     /tmp/ccdnCwdC.s:174    .text:000000000000009c .L0 
     /tmp/ccdnCwdC.s:179    .text:00000000000000a0 .L0 
     /tmp/ccdnCwdC.s:242    .text:00000000000000c4 .L0 
     /tmp/ccdnCwdC.s:243    .text:00000000000000c4 .L0 
     /tmp/ccdnCwdC.s:244    .text:00000000000000c4 .L0 
     /tmp/ccdnCwdC.s:254    .text:00000000000000cc .L0 
     /tmp/ccdnCwdC.s:255    .text:00000000000000cc .L0 
     /tmp/ccdnCwdC.s:262    .text:00000000000000e0 .L0 
     /tmp/ccdnCwdC.s:263    .text:00000000000000e0 .L0 
     /tmp/ccdnCwdC.s:270    .text:00000000000000ec .L0 
     /tmp/ccdnCwdC.s:271    .text:00000000000000ec .L0 
     /tmp/ccdnCwdC.s:276    .text:00000000000000f0 .L0 
     /tmp/ccdnCwdC.s:283    .text:00000000000000f4 .L0 
     /tmp/ccdnCwdC.s:284    .text:00000000000000f4 .L0 
     /tmp/ccdnCwdC.s:285    .text:00000000000000f4 .L0 
     /tmp/ccdnCwdC.s:298    .text:00000000000000fc .L0 
     /tmp/ccdnCwdC.s:299    .text:0000000000000100 .L0 
     /tmp/ccdnCwdC.s:300    .text:0000000000000100 .L0 
     /tmp/ccdnCwdC.s:302    .text:0000000000000104 .L0 
     /tmp/ccdnCwdC.s:303    .text:0000000000000104 .L0 
     /tmp/ccdnCwdC.s:305    .text:0000000000000108 .L0 
     /tmp/ccdnCwdC.s:307    .text:000000000000010c .L0 
     /tmp/ccdnCwdC.s:309    .text:0000000000000110 .L0 
     /tmp/ccdnCwdC.s:313    .text:0000000000000114 .L0 
     /tmp/ccdnCwdC.s:321    .text:0000000000000114 .L0 
     /tmp/ccdnCwdC.s:322    .text:0000000000000114 .L0 
     /tmp/ccdnCwdC.s:323    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:81     .text:0000000000000114 .L0 
     /tmp/ccdnCwdC.s:331    .text:000000000000011c .L0 
     /tmp/ccdnCwdC.s:332    .text:000000000000011c .L0 
     /tmp/ccdnCwdC.s:339    .text:0000000000000120 .L0 
     /tmp/ccdnCwdC.s:340    .text:0000000000000120 .L0 
     /tmp/ccdnCwdC.s:341    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:121    .text:0000000000000120 .L0 
     /tmp/ccdnCwdC.s:349    .text:0000000000000128 .L0 
     /tmp/ccdnCwdC.s:350    .text:0000000000000128 .L0 
     /tmp/ccdnCwdC.s:355    .text:000000000000012c .L0 
     /tmp/ccdnCwdC.s:356    .text:000000000000012c .L0 
     /tmp/ccdnCwdC.s:359    .text:0000000000000138 .L0 
     /tmp/ccdnCwdC.s:360    .text:0000000000000138 .L0 
     /tmp/ccdnCwdC.s:365    .text:0000000000000140 .L0 
     /tmp/ccdnCwdC.s:366    .text:0000000000000140 .L0 
  src/../h/riscv.hpp:126    .text:0000000000000140 .L0 
     /tmp/ccdnCwdC.s:378    .text:0000000000000144 .L0 
     /tmp/ccdnCwdC.s:379    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:86     .text:0000000000000144 .L0 
     /tmp/ccdnCwdC.s:386    .text:0000000000000148 .L0 
     /tmp/ccdnCwdC.s:396    .text:000000000000014c .L0 
     /tmp/ccdnCwdC.s:397    .text:000000000000014c .L0 
     /tmp/ccdnCwdC.s:405    .text:0000000000000158 .L0 
     /tmp/ccdnCwdC.s:406    .text:0000000000000158 .L0 
     /tmp/ccdnCwdC.s:407    .text:0000000000000158 .L0 
     /tmp/ccdnCwdC.s:411    .text:0000000000000160 .L0 
     /tmp/ccdnCwdC.s:414    .text:0000000000000160 .L0 
GAS LISTING /tmp/ccdnCwdC.s 			page 20


     /tmp/ccdnCwdC.s:415    .text:0000000000000160 .L0 
  src/../h/riscv.hpp:86     .text:0000000000000160 .L0 
     /tmp/ccdnCwdC.s:427    .text:0000000000000164 .L0 
     /tmp/ccdnCwdC.s:428    .text:0000000000000164 .L0 
  src/../h/riscv.hpp:126    .text:0000000000000164 .L0 
     /tmp/ccdnCwdC.s:442    .text:0000000000000168 .L0 
     /tmp/ccdnCwdC.s:450    .text:000000000000016c .L0 
     /tmp/ccdnCwdC.s:451    .text:000000000000016c .L0 
     /tmp/ccdnCwdC.s:452    .text:000000000000016c .L0 
     /tmp/ccdnCwdC.s:455    .text:0000000000000174 .L0 
     /tmp/ccdnCwdC.s:459    .text:0000000000000178 .L0 
     /tmp/ccdnCwdC.s:460    .text:0000000000000178 .L0 
     /tmp/ccdnCwdC.s:461    .text:0000000000000178 .L0 
     /tmp/ccdnCwdC.s:464    .text:0000000000000180 .L0 
     /tmp/ccdnCwdC.s:468    .text:0000000000000184 .L0 
     /tmp/ccdnCwdC.s:469    .text:0000000000000184 .L0 
     /tmp/ccdnCwdC.s:470    .text:0000000000000184 .L0 
     /tmp/ccdnCwdC.s:473    .text:000000000000018c .L0 
     /tmp/ccdnCwdC.s:477    .text:0000000000000190 .L0 
     /tmp/ccdnCwdC.s:478    .text:0000000000000190 .L0 
     /tmp/ccdnCwdC.s:479    .text:0000000000000190 .L0 
     /tmp/ccdnCwdC.s:482    .text:0000000000000198 .L0 
     /tmp/ccdnCwdC.s:486    .text:000000000000019c .L0 
     /tmp/ccdnCwdC.s:487    .text:000000000000019c .L0 
     /tmp/ccdnCwdC.s:488    .text:000000000000019c .L0 
     /tmp/ccdnCwdC.s:493    .text:00000000000001a8 .L0 
     /tmp/ccdnCwdC.s:497    .text:00000000000001ac .L0 
     /tmp/ccdnCwdC.s:498    .text:00000000000001ac .L0 
     /tmp/ccdnCwdC.s:499    .text:00000000000001ac .L0 
     /tmp/ccdnCwdC.s:502    .text:00000000000001b4 .L0 
     /tmp/ccdnCwdC.s:506    .text:00000000000001b8 .L0 
     /tmp/ccdnCwdC.s:507    .text:00000000000001b8 .L0 
     /tmp/ccdnCwdC.s:508    .text:00000000000001b8 .L0 
     /tmp/ccdnCwdC.s:511    .text:00000000000001c0 .L0 
     /tmp/ccdnCwdC.s:515    .text:00000000000001c4 .L0 
     /tmp/ccdnCwdC.s:516    .text:00000000000001c4 .L0 
     /tmp/ccdnCwdC.s:517    .text:00000000000001c4 .L0 
     /tmp/ccdnCwdC.s:520    .text:00000000000001cc .L0 
     /tmp/ccdnCwdC.s:524    .text:00000000000001d0 .L0 
     /tmp/ccdnCwdC.s:525    .text:00000000000001d0 .L0 
     /tmp/ccdnCwdC.s:526    .text:00000000000001d0 .L0 
     /tmp/ccdnCwdC.s:529    .text:00000000000001d8 .L0 
     /tmp/ccdnCwdC.s:533    .text:00000000000001dc .L0 
     /tmp/ccdnCwdC.s:534    .text:00000000000001dc .L0 
     /tmp/ccdnCwdC.s:535    .text:00000000000001dc .L0 
     /tmp/ccdnCwdC.s:538    .text:00000000000001e4 .L0 
     /tmp/ccdnCwdC.s:543    .text:00000000000001e8 .L0 
     /tmp/ccdnCwdC.s:552    .text:00000000000001e8 .L0 
     /tmp/ccdnCwdC.s:192    .rodata:0000000000000000 .L10
     /tmp/ccdnCwdC.s:183    .text:00000000000000ac .L0 
     /tmp/ccdnCwdC.s:255    .text:00000000000000cc .L0 
     /tmp/ccdnCwdC.s:263    .text:00000000000000e0 .L0 
     /tmp/ccdnCwdC.s:356    .text:000000000000012c .L0 
     /tmp/ccdnCwdC.s:234    .text:00000000000000c4 .L22
     /tmp/ccdnCwdC.s:388    .text:000000000000014c .L23
     /tmp/ccdnCwdC.s:292    .text:00000000000000fc .L3
     /tmp/ccdnCwdC.s:410    .text:0000000000000160 .L8
GAS LISTING /tmp/ccdnCwdC.s 			page 21


     /tmp/ccdnCwdC.s:312    .text:0000000000000114 .L24
     /tmp/ccdnCwdC.s:278    .text:00000000000000f4 .L5
     /tmp/ccdnCwdC.s:401    .text:0000000000000158 .L20
     /tmp/ccdnCwdC.s:444    .text:000000000000016c .L19
     /tmp/ccdnCwdC.s:457    .text:0000000000000178 .L18
     /tmp/ccdnCwdC.s:466    .text:0000000000000184 .L17
     /tmp/ccdnCwdC.s:475    .text:0000000000000190 .L16
     /tmp/ccdnCwdC.s:484    .text:000000000000019c .L15
     /tmp/ccdnCwdC.s:495    .text:00000000000001ac .L14
     /tmp/ccdnCwdC.s:504    .text:00000000000001b8 .L13
     /tmp/ccdnCwdC.s:513    .text:00000000000001c4 .L12
     /tmp/ccdnCwdC.s:522    .text:00000000000001d0 .L11
     /tmp/ccdnCwdC.s:531    .text:00000000000001dc .L9
     /tmp/ccdnCwdC.s:2088   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccdnCwdC.s:3799   .debug_str:0000000000000826 .LASF176
     /tmp/ccdnCwdC.s:3849   .debug_str:0000000000000a13 .LASF177
     /tmp/ccdnCwdC.s:3611   .debug_str:0000000000000311 .LASF178
     /tmp/ccdnCwdC.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccdnCwdC.s:546    .text:00000000000001e8 .Letext0
     /tmp/ccdnCwdC.s:3497   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccdnCwdC.s:3629   .debug_str:000000000000038b .LASF0
     /tmp/ccdnCwdC.s:3651   .debug_str:0000000000000405 .LASF1
     /tmp/ccdnCwdC.s:3743   .debug_str:000000000000068e .LASF2
     /tmp/ccdnCwdC.s:3753   .debug_str:0000000000000703 .LASF4
     /tmp/ccdnCwdC.s:3637   .debug_str:00000000000003b9 .LASF3
     /tmp/ccdnCwdC.s:3507   .debug_str:0000000000000044 .LASF5
     /tmp/ccdnCwdC.s:3717   .debug_str:00000000000005c8 .LASF6
     /tmp/ccdnCwdC.s:3711   .debug_str:000000000000058a .LASF7
     /tmp/ccdnCwdC.s:3645   .debug_str:00000000000003e4 .LASF8
     /tmp/ccdnCwdC.s:3607   .debug_str:00000000000002f5 .LASF9
     /tmp/ccdnCwdC.s:3619   .debug_str:0000000000000354 .LASF10
     /tmp/ccdnCwdC.s:3547   .debug_str:000000000000014d .LASF11
     /tmp/ccdnCwdC.s:3601   .debug_str:00000000000002d8 .LASF12
     /tmp/ccdnCwdC.s:3561   .debug_str:00000000000001b6 .LASF13
     /tmp/ccdnCwdC.s:3545   .debug_str:000000000000013d .LASF14
     /tmp/ccdnCwdC.s:3777   .debug_str:000000000000079d .LASF15
     /tmp/ccdnCwdC.s:3591   .debug_str:000000000000027e .LASF16
     /tmp/ccdnCwdC.s:3769   .debug_str:000000000000075c .LASF17
     /tmp/ccdnCwdC.s:3847   .debug_str:0000000000000a0d .LASF62
     /tmp/ccdnCwdC.s:3635   .debug_str:00000000000003b2 .LASF22
     /tmp/ccdnCwdC.s:3667   .debug_str:000000000000046d .LASF18
     /tmp/ccdnCwdC.s:3681   .debug_str:00000000000004cc .LASF19
     /tmp/ccdnCwdC.s:3535   .debug_str:0000000000000109 .LASF20
     /tmp/ccdnCwdC.s:3525   .debug_str:00000000000000c4 .LASF21
     /tmp/ccdnCwdC.s:3573   .debug_str:000000000000020e .LASF23
     /tmp/ccdnCwdC.s:3575   .debug_str:000000000000021b .LASF24
     /tmp/ccdnCwdC.s:3737   .debug_str:0000000000000654 .LASF26
     /tmp/ccdnCwdC.s:3583   .debug_str:0000000000000241 .LASF25
     /tmp/ccdnCwdC.s:3745   .debug_str:000000000000069c .LASF27
     /tmp/ccdnCwdC.s:3533   .debug_str:00000000000000ff .LASF28
     /tmp/ccdnCwdC.s:3817   .debug_str:000000000000093f .LASF29
     /tmp/ccdnCwdC.s:3617   .debug_str:000000000000034b .LASF30
     /tmp/ccdnCwdC.s:3549   .debug_str:000000000000015c .LASF31
     /tmp/ccdnCwdC.s:3735   .debug_str:000000000000064a .LASF32
     /tmp/ccdnCwdC.s:3873   .debug_str:0000000000000ad7 .LASF34
     /tmp/ccdnCwdC.s:3783   .debug_str:00000000000007c6 .LASF36
     /tmp/ccdnCwdC.s:3715   .debug_str:00000000000005b2 .LASF38
GAS LISTING /tmp/ccdnCwdC.s 			page 22


     /tmp/ccdnCwdC.s:3835   .debug_str:00000000000009ca .LASF33
     /tmp/ccdnCwdC.s:3837   .debug_str:00000000000009d2 .LASF35
     /tmp/ccdnCwdC.s:3761   .debug_str:000000000000072a .LASF37
     /tmp/ccdnCwdC.s:3871   .debug_str:0000000000000ac3 .LASF39
     /tmp/ccdnCwdC.s:3541   .debug_str:000000000000012b .LASF40
     /tmp/ccdnCwdC.s:3863   .debug_str:0000000000000a74 .LASF41
     /tmp/ccdnCwdC.s:3661   .debug_str:0000000000000445 .LASF42
     /tmp/ccdnCwdC.s:3793   .debug_str:00000000000007fb .LASF43
     /tmp/ccdnCwdC.s:3727   .debug_str:000000000000061c .LASF44
     /tmp/ccdnCwdC.s:3669   .debug_str:0000000000000476 .LASF45
     /tmp/ccdnCwdC.s:3841   .debug_str:00000000000009f1 .LASF46
     /tmp/ccdnCwdC.s:3713   .debug_str:000000000000059d .LASF47
     /tmp/ccdnCwdC.s:3697   .debug_str:000000000000052b .LASF48
     /tmp/ccdnCwdC.s:3679   .debug_str:00000000000004b9 .LASF49
     /tmp/ccdnCwdC.s:3595   .debug_str:0000000000000299 .LASF50
     /tmp/ccdnCwdC.s:3773   .debug_str:0000000000000779 .LASF51
     /tmp/ccdnCwdC.s:3811   .debug_str:0000000000000921 .LASF52
     /tmp/ccdnCwdC.s:3559   .debug_str:000000000000019e .LASF53
     /tmp/ccdnCwdC.s:3845   .debug_str:0000000000000a02 .LASF54
     /tmp/ccdnCwdC.s:3819   .debug_str:0000000000000955 .LASF55
     /tmp/ccdnCwdC.s:3765   .debug_str:0000000000000738 .LASF56
     /tmp/ccdnCwdC.s:3827   .debug_str:0000000000000998 .LASF57
     /tmp/ccdnCwdC.s:3569   .debug_str:00000000000001f2 .LASF58
     /tmp/ccdnCwdC.s:3861   .debug_str:0000000000000a5b .LASF59
     /tmp/ccdnCwdC.s:3623   .debug_str:0000000000000374 .LASF60
     /tmp/ccdnCwdC.s:3589   .debug_str:0000000000000266 .LASF61
     /tmp/ccdnCwdC.s:3707   .debug_str:0000000000000555 .LASF63
     /tmp/ccdnCwdC.s:3539   .debug_str:000000000000011f .LASF89
     /tmp/ccdnCwdC.s:3509   .debug_str:000000000000004b .LASF64
     /tmp/ccdnCwdC.s:3519   .debug_str:00000000000000aa .LASF65
     /tmp/ccdnCwdC.s:3649   .debug_str:0000000000000400 .LASF66
     /tmp/ccdnCwdC.s:3517   .debug_str:0000000000000091 .LASF67
     /tmp/ccdnCwdC.s:3767   .debug_str:0000000000000741 .LASF68
     /tmp/ccdnCwdC.s:3839   .debug_str:00000000000009e6 .LASF101
     /tmp/ccdnCwdC.s:3853   .debug_str:0000000000000a27 .LASF103
     /tmp/ccdnCwdC.s:3795   .debug_str:0000000000000810 .LASF69
     /tmp/ccdnCwdC.s:3515   .debug_str:0000000000000083 .LASF70
     /tmp/ccdnCwdC.s:3633   .debug_str:00000000000003a8 .LASF71
     /tmp/ccdnCwdC.s:3749   .debug_str:00000000000006c6 .LASF72
     /tmp/ccdnCwdC.s:3821   .debug_str:000000000000096d .LASF91
     /tmp/ccdnCwdC.s:3683   .debug_str:00000000000004d5 .LASF73
     /tmp/ccdnCwdC.s:3709   .debug_str:0000000000000565 .LASF74
     /tmp/ccdnCwdC.s:3687   .debug_str:00000000000004f6 .LASF75
     /tmp/ccdnCwdC.s:3511   .debug_str:0000000000000050 .LASF76
     /tmp/ccdnCwdC.s:3787   .debug_str:00000000000007d9 .LASF77
     /tmp/ccdnCwdC.s:3719   .debug_str:00000000000005cf .LASF78
     /tmp/ccdnCwdC.s:3499   .debug_str:0000000000000000 .LASF79
     /tmp/ccdnCwdC.s:3529   .debug_str:00000000000000d9 .LASF80
     /tmp/ccdnCwdC.s:3725   .debug_str:0000000000000611 .LASF81
     /tmp/ccdnCwdC.s:3639   .debug_str:00000000000003cb .LASF82
     /tmp/ccdnCwdC.s:3587   .debug_str:0000000000000260 .LASF83
     /tmp/ccdnCwdC.s:3647   .debug_str:00000000000003f7 .LASF84
     /tmp/ccdnCwdC.s:3553   .debug_str:000000000000017a .LASF85
     /tmp/ccdnCwdC.s:3801   .debug_str:00000000000008ea .LASF86
     /tmp/ccdnCwdC.s:3531   .debug_str:00000000000000f6 .LASF87
     /tmp/ccdnCwdC.s:3673   .debug_str:0000000000000497 .LASF88
     /tmp/ccdnCwdC.s:3555   .debug_str:0000000000000183 .LASF90
GAS LISTING /tmp/ccdnCwdC.s 			page 23


     /tmp/ccdnCwdC.s:3797   .debug_str:000000000000081e .LASF92
     /tmp/ccdnCwdC.s:3857   .debug_str:0000000000000a4d .LASF93
     /tmp/ccdnCwdC.s:3833   .debug_str:00000000000009ba .LASF94
     /tmp/ccdnCwdC.s:3537   .debug_str:0000000000000111 .LASF95
     /tmp/ccdnCwdC.s:3599   .debug_str:00000000000002b0 .LASF96
     /tmp/ccdnCwdC.s:3653   .debug_str:0000000000000418 .LASF97
     /tmp/ccdnCwdC.s:3657   .debug_str:000000000000042b .LASF98
     /tmp/ccdnCwdC.s:3579   .debug_str:0000000000000233 .LASF99
     /tmp/ccdnCwdC.s:3557   .debug_str:000000000000018b .LASF100
     /tmp/ccdnCwdC.s:3759   .debug_str:0000000000000721 .LASF102
     /tmp/ccdnCwdC.s:3729   .debug_str:0000000000000625 .LASF104
     /tmp/ccdnCwdC.s:3655   .debug_str:000000000000041e .LASF105
     /tmp/ccdnCwdC.s:3823   .debug_str:0000000000000977 .LASF106
     /tmp/ccdnCwdC.s:3813   .debug_str:000000000000092c .LASF107
     /tmp/ccdnCwdC.s:3663   .debug_str:000000000000044e .LASF108
     /tmp/ccdnCwdC.s:3789   .debug_str:00000000000007e2 .LASF109
     /tmp/ccdnCwdC.s:3781   .debug_str:00000000000007b0 .LASF110
     /tmp/ccdnCwdC.s:3677   .debug_str:00000000000004b2 .LASF111
     /tmp/ccdnCwdC.s:3563   .debug_str:00000000000001c6 .LASF112
     /tmp/ccdnCwdC.s:3755   .debug_str:000000000000070a .LASF113
     /tmp/ccdnCwdC.s:3503   .debug_str:000000000000002e .LASF114
     /tmp/ccdnCwdC.s:3865   .debug_str:0000000000000a89 .LASF115
     /tmp/ccdnCwdC.s:3615   .debug_str:000000000000033f .LASF116
     /tmp/ccdnCwdC.s:3631   .debug_str:0000000000000398 .LASF117
     /tmp/ccdnCwdC.s:3701   .debug_str:0000000000000537 .LASF118
     /tmp/ccdnCwdC.s:3665   .debug_str:0000000000000464 .LASF119
     /tmp/ccdnCwdC.s:3739   .debug_str:0000000000000671 .LASF120
     /tmp/ccdnCwdC.s:3521   .debug_str:00000000000000af .LASF121
     /tmp/ccdnCwdC.s:3747   .debug_str:00000000000006ba .LASF122
     /tmp/ccdnCwdC.s:3565   .debug_str:00000000000001d7 .LASF123
     /tmp/ccdnCwdC.s:3585   .debug_str:0000000000000252 .LASF124
     /tmp/ccdnCwdC.s:3731   .debug_str:0000000000000639 .LASF125
     /tmp/ccdnCwdC.s:3577   .debug_str:000000000000022b .LASF126
     /tmp/ccdnCwdC.s:3703   .debug_str:0000000000000544 .LASF127
     /tmp/ccdnCwdC.s:3763   .debug_str:0000000000000732 .LASF128
     /tmp/ccdnCwdC.s:3815   .debug_str:0000000000000937 .LASF129
     /tmp/ccdnCwdC.s:3689   .debug_str:0000000000000500 .LASF130
     /tmp/ccdnCwdC.s:3785   .debug_str:00000000000007d0 .LASF131
     /tmp/ccdnCwdC.s:3867   .debug_str:0000000000000a96 .LASF179
     /tmp/ccdnCwdC.s:3567   .debug_str:00000000000001e4 .LASF180
     /tmp/ccdnCwdC.s:3501   .debug_str:0000000000000006 .LASF181
     /tmp/ccdnCwdC.s:3825   .debug_str:0000000000000990 .LASF182
     /tmp/ccdnCwdC.s:3513   .debug_str:0000000000000071 .LASF183
     /tmp/ccdnCwdC.s:3705   .debug_str:0000000000000549 .LASF132
     /tmp/ccdnCwdC.s:3807   .debug_str:0000000000000904 .LASF133
     /tmp/ccdnCwdC.s:3593   .debug_str:0000000000000294 .LASF134
     /tmp/ccdnCwdC.s:3851   .debug_str:0000000000000a21 .LASF135
     /tmp/ccdnCwdC.s:3581   .debug_str:000000000000023c .LASF136
     /tmp/ccdnCwdC.s:3693   .debug_str:0000000000000513 .LASF137
     /tmp/ccdnCwdC.s:3779   .debug_str:00000000000007a9 .LASF138
     /tmp/ccdnCwdC.s:3775   .debug_str:000000000000078c .LASF139
     /tmp/ccdnCwdC.s:3523   .debug_str:00000000000000ba .LASF140
     /tmp/ccdnCwdC.s:3685   .debug_str:00000000000004e2 .LASF141
     /tmp/ccdnCwdC.s:3831   .debug_str:00000000000009b2 .LASF142
     /tmp/ccdnCwdC.s:3621   .debug_str:0000000000000362 .LASF143
     /tmp/ccdnCwdC.s:3699   .debug_str:0000000000000532 .LASF144
     /tmp/ccdnCwdC.s:3675   .debug_str:000000000000049f .LASF145
GAS LISTING /tmp/ccdnCwdC.s 			page 24


     /tmp/ccdnCwdC.s:3643   .debug_str:00000000000003dc .LASF146
     /tmp/ccdnCwdC.s:3721   .debug_str:00000000000005f1 .LASF147
     /tmp/ccdnCwdC.s:3609   .debug_str:0000000000000305 .LASF148
     /tmp/ccdnCwdC.s:3527   .debug_str:00000000000000cc .LASF149
     /tmp/ccdnCwdC.s:3671   .debug_str:000000000000048b .LASF184
     /tmp/ccdnCwdC.s:3627   .debug_str:0000000000000385 .LASF150
     /tmp/ccdnCwdC.s:3597   .debug_str:00000000000002a0 .LASF151
     /tmp/ccdnCwdC.s:3859   .debug_str:0000000000000a53 .LASF152
     /tmp/ccdnCwdC.s:3757   .debug_str:000000000000070f .LASF153
     /tmp/ccdnCwdC.s:3625   .debug_str:000000000000037f .LASF154
     /tmp/ccdnCwdC.s:3543   .debug_str:0000000000000134 .LASF155
     /tmp/ccdnCwdC.s:3659   .debug_str:0000000000000440 .LASF156
     /tmp/ccdnCwdC.s:3733   .debug_str:0000000000000644 .LASF157
     /tmp/ccdnCwdC.s:3809   .debug_str:000000000000091b .LASF185
     /tmp/ccdnCwdC.s:3869   .debug_str:0000000000000ab9 .LASF158
     /tmp/ccdnCwdC.s:3605   .debug_str:00000000000002ec .LASF159
     /tmp/ccdnCwdC.s:3791   .debug_str:00000000000007ed .LASF160
     /tmp/ccdnCwdC.s:3723   .debug_str:0000000000000605 .LASF161
     /tmp/ccdnCwdC.s:3571   .debug_str:00000000000001fe .LASF162
     /tmp/ccdnCwdC.s:3551   .debug_str:0000000000000171 .LASF163
     /tmp/ccdnCwdC.s:3505   .debug_str:000000000000003a .LASF164
     /tmp/ccdnCwdC.s:3695   .debug_str:0000000000000522 .LASF165
     /tmp/ccdnCwdC.s:3751   .debug_str:00000000000006f8 .LASF166
     /tmp/ccdnCwdC.s:3805   .debug_str:00000000000008f6 .LASF167
     /tmp/ccdnCwdC.s:3741   .debug_str:0000000000000682 .LASF168
     /tmp/ccdnCwdC.s:3855   .debug_str:0000000000000a42 .LASF169
     /tmp/ccdnCwdC.s:3641   .debug_str:00000000000003d7 .LASF170
     /tmp/ccdnCwdC.s:3691   .debug_str:000000000000050e .LASF171
     /tmp/ccdnCwdC.s:46     .text:0000000000000020 .LFB29
     /tmp/ccdnCwdC.s:544    .text:00000000000001e8 .LFE29
     /tmp/ccdnCwdC.s:3111   .debug_loc:0000000000000000 .LLST0
     /tmp/ccdnCwdC.s:3130   .debug_loc:000000000000005c .LLST1
     /tmp/ccdnCwdC.s:3189   .debug_loc:0000000000000176 .LLST2
     /tmp/ccdnCwdC.s:3248   .debug_loc:0000000000000290 .LLST3
     /tmp/ccdnCwdC.s:3307   .debug_loc:00000000000003aa .LLST4
     /tmp/ccdnCwdC.s:3771   .debug_str:0000000000000772 .LASF172
     /tmp/ccdnCwdC.s:3366   .debug_loc:00000000000004c4 .LLST5
     /tmp/ccdnCwdC.s:317    .text:0000000000000114 .LBB58
     /tmp/ccdnCwdC.s:391    .text:000000000000014c .LBE58
     /tmp/ccdnCwdC.s:3803   .debug_str:00000000000008f1 .LASF173
     /tmp/ccdnCwdC.s:3387   .debug_loc:0000000000000522 .LLST12
     /tmp/ccdnCwdC.s:3843   .debug_str:00000000000009fa .LASF174
     /tmp/ccdnCwdC.s:3394   .debug_loc:0000000000000545 .LLST13
     /tmp/ccdnCwdC.s:319    .text:0000000000000114 .LBB59
     /tmp/ccdnCwdC.s:335    .text:0000000000000120 .LBE59
     /tmp/ccdnCwdC.s:337    .text:0000000000000120 .LBB61
     /tmp/ccdnCwdC.s:353    .text:000000000000012c .LBE61
     /tmp/ccdnCwdC.s:363    .text:0000000000000140 .LBB63
     /tmp/ccdnCwdC.s:374    .text:0000000000000144 .LBE63
     /tmp/ccdnCwdC.s:3401   .debug_loc:0000000000000568 .LLST14
     /tmp/ccdnCwdC.s:376    .text:0000000000000144 .LBB65
     /tmp/ccdnCwdC.s:390    .text:000000000000014c .LBE65
     /tmp/ccdnCwdC.s:3408   .debug_loc:000000000000058b .LLST15
     /tmp/ccdnCwdC.s:361    .text:0000000000000140 .LVL21
     /tmp/ccdnCwdC.s:3487   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccdnCwdC.s:3415   .debug_loc:00000000000005ae .LLST6
     /tmp/ccdnCwdC.s:3426   .debug_loc:00000000000005e4 .LLST7
GAS LISTING /tmp/ccdnCwdC.s 			page 25


     /tmp/ccdnCwdC.s:141    .text:0000000000000084 .LBB39
     /tmp/ccdnCwdC.s:156    .text:0000000000000090 .LBE39
     /tmp/ccdnCwdC.s:161    .text:0000000000000094 .LBB41
     /tmp/ccdnCwdC.s:177    .text:00000000000000a0 .LBE41
     /tmp/ccdnCwdC.s:412    .text:0000000000000160 .LBB43
     /tmp/ccdnCwdC.s:423    .text:0000000000000164 .LBE43
     /tmp/ccdnCwdC.s:3437   .debug_loc:000000000000061a .LLST8
     /tmp/ccdnCwdC.s:425    .text:0000000000000164 .LBB45
     /tmp/ccdnCwdC.s:436    .text:0000000000000168 .LBE45
     /tmp/ccdnCwdC.s:3444   .debug_loc:000000000000063d .LLST9
     /tmp/ccdnCwdC.s:408    .text:0000000000000160 .LVL26
     /tmp/ccdnCwdC.s:453    .text:0000000000000174 .LVL30
     /tmp/ccdnCwdC.s:462    .text:0000000000000180 .LVL32
     /tmp/ccdnCwdC.s:471    .text:000000000000018c .LVL34
     /tmp/ccdnCwdC.s:480    .text:0000000000000198 .LVL36
     /tmp/ccdnCwdC.s:491    .text:00000000000001a8 .LVL39
     /tmp/ccdnCwdC.s:500    .text:00000000000001b4 .LVL41
     /tmp/ccdnCwdC.s:509    .text:00000000000001c0 .LVL43
     /tmp/ccdnCwdC.s:518    .text:00000000000001cc .LVL45
     /tmp/ccdnCwdC.s:527    .text:00000000000001d8 .LVL47
     /tmp/ccdnCwdC.s:536    .text:00000000000001e4 .LVL49
     /tmp/ccdnCwdC.s:95     .text:000000000000004c .LBB33
     /tmp/ccdnCwdC.s:112    .text:0000000000000058 .LBE33
     /tmp/ccdnCwdC.s:240    .text:00000000000000c4 .LBB53
     /tmp/ccdnCwdC.s:252    .text:00000000000000cc .LBE53
     /tmp/ccdnCwdC.s:3451   .debug_loc:0000000000000660 .LLST10
     /tmp/ccdnCwdC.s:266    .text:00000000000000ec .LBB56
     /tmp/ccdnCwdC.s:274    .text:00000000000000f0 .LBE56
     /tmp/ccdnCwdC.s:3459   .debug_loc:0000000000000684 .LLST11
     /tmp/ccdnCwdC.s:281    .text:00000000000000f4 .LBB67
     /tmp/ccdnCwdC.s:294    .text:00000000000000fc .LBE67
     /tmp/ccdnCwdC.s:3466   .debug_loc:00000000000006a7 .LLST16
     /tmp/ccdnCwdC.s:398    .text:0000000000000154 .LVL24
     /tmp/ccdnCwdC.s:10     .text:0000000000000000 .LFB28
     /tmp/ccdnCwdC.s:40     .text:0000000000000020 .LFE28
     /tmp/ccdnCwdC.s:3603   .debug_str:00000000000002e7 .LASF186
     /tmp/ccdnCwdC.s:3829   .debug_str:00000000000009ad .LASF175
     /tmp/ccdnCwdC.s:3613   .debug_str:000000000000032f .LASF187
     /tmp/ccdnCwdC.s:68     .text:000000000000003c .LVL0
     /tmp/ccdnCwdC.s:182    .text:00000000000000ac .LVL9
     /tmp/ccdnCwdC.s:233    .text:00000000000000c4 .LVL11
     /tmp/ccdnCwdC.s:277    .text:00000000000000f4 .LVL16
     /tmp/ccdnCwdC.s:311    .text:0000000000000114 .LVL18
     /tmp/ccdnCwdC.s:387    .text:000000000000014c .LVL23
     /tmp/ccdnCwdC.s:74     .text:0000000000000040 .LVL1
     /tmp/ccdnCwdC.s:400    .text:0000000000000158 .LVL25
     /tmp/ccdnCwdC.s:443    .text:000000000000016c .LVL29
     /tmp/ccdnCwdC.s:456    .text:0000000000000178 .LVL31
     /tmp/ccdnCwdC.s:465    .text:0000000000000184 .LVL33
     /tmp/ccdnCwdC.s:474    .text:0000000000000190 .LVL35
     /tmp/ccdnCwdC.s:483    .text:000000000000019c .LVL37
     /tmp/ccdnCwdC.s:494    .text:00000000000001ac .LVL40
     /tmp/ccdnCwdC.s:503    .text:00000000000001b8 .LVL42
     /tmp/ccdnCwdC.s:512    .text:00000000000001c4 .LVL44
     /tmp/ccdnCwdC.s:521    .text:00000000000001d0 .LVL46
     /tmp/ccdnCwdC.s:530    .text:00000000000001dc .LVL48
     /tmp/ccdnCwdC.s:80     .text:0000000000000044 .LVL2
GAS LISTING /tmp/ccdnCwdC.s 			page 26


     /tmp/ccdnCwdC.s:489    .text:00000000000001a0 .LVL38
     /tmp/ccdnCwdC.s:86     .text:0000000000000048 .LVL3
     /tmp/ccdnCwdC.s:92     .text:000000000000004c .LVL4
     /tmp/ccdnCwdC.s:110    .text:0000000000000058 .LVL5
     /tmp/ccdnCwdC.s:135    .text:000000000000007c .LVL6
     /tmp/ccdnCwdC.s:184    .text:00000000000000b4 .LVL10
     /tmp/ccdnCwdC.s:256    .text:00000000000000d4 .LVL13
     /tmp/ccdnCwdC.s:333    .text:0000000000000120 .LVL19
     /tmp/ccdnCwdC.s:351    .text:000000000000012c .LVL20
     /tmp/ccdnCwdC.s:371    .text:0000000000000144 .LVL22
     /tmp/ccdnCwdC.s:159    .text:0000000000000094 .LVL7
     /tmp/ccdnCwdC.s:175    .text:00000000000000a0 .LVL8
     /tmp/ccdnCwdC.s:420    .text:0000000000000164 .LVL27
     /tmp/ccdnCwdC.s:433    .text:0000000000000168 .LVL28
     /tmp/ccdnCwdC.s:249    .text:00000000000000cc .LVL12
     /tmp/ccdnCwdC.s:265    .text:00000000000000ec .LVL14
     /tmp/ccdnCwdC.s:272    .text:00000000000000f0 .LVL15
     /tmp/ccdnCwdC.s:290    .text:00000000000000fc .LVL17
     /tmp/ccdnCwdC.s:553    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccdnCwdC.s:139    .text:0000000000000084 .LBB38
     /tmp/ccdnCwdC.s:235    .text:00000000000000c4 .LBE38
     /tmp/ccdnCwdC.s:403    .text:0000000000000158 .LBB47
     /tmp/ccdnCwdC.s:437    .text:0000000000000168 .LBE47
     /tmp/ccdnCwdC.s:448    .text:000000000000016c .LBB48
     /tmp/ccdnCwdC.s:539    .text:00000000000001e8 .LBE48

UNDEFINED SYMBOLS
_ZN3TCB16time_slice_countE
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
console_handler
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPKv
_ZN3TCB13_threadCreateEPPS_PFvPvES2_S2_
_ZN3TCB11_threadExitEv
_ZN3Sem4openEPPS_j
_ZN3Sem7s_closeEPS_
_ZN3Sem4waitEv
_ZN3Sem6signalEv
_ZN3Sem9timedWaitEm
_ZN3Sem7trywaitEv
