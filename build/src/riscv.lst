GAS LISTING /tmp/ccqeMSQt.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5RISCV10popSppSpieEv
   9              	_ZN5RISCV10popSppSpieEv:
  10              	.LFB34:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** #include "../lib/hw.h"
   2:src/riscv.cpp **** #include "../lib/console.h"
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** #include "../h/syscall_c.h"
   5:src/riscv.cpp **** #include "../h/Memoryallocator.hpp"
   6:src/riscv.cpp **** #include "../h/thread.hpp"
   7:src/riscv.cpp **** #include "../h/Console.hpp"
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** extern void printInteger(uint64);
  10:src/riscv.cpp **** extern void printString(char*);
  11:src/riscv.cpp **** extern void handleNewChars(void*);
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** // first time running a thread, sepc inside of wrapper
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void RISCV::popSppSpie() {
  12              		.loc 1 16 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp **** 
  18:src/riscv.cpp ****     // not inline ( ra reg )
  19:src/riscv.cpp **** 
  20:src/riscv.cpp ****     if (TCB::running->routine != handleNewChars) RISCV::mask_status(SPP);
  20              		.loc 1 20 5
  21              		.loc 1 20 23 is_stmt 0
  22 000c 97070000 		la	a5,_ZN3TCB7runningE
  22      83B70700 
  23 0014 83B70700 		ld	a5,0(a5)
  24 0018 03B70703 		ld	a4,48(a5)
  25              		.loc 1 20 5
  26 001c 97070000 		la	a5,_Z14handleNewCharsPv
  26      83B70700 
  27 0024 6306F700 		beq	a4,a5,.L2
  28              		.loc 1 20 50 is_stmt 1
  29              	.LVL0:
  30              	.LBB56:
  31              	.LBB57:
  32              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 4/7/24.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccqeMSQt.s 			page 2


   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class RISCV {
  11:src/../h/riscv.hpp **** public:
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp ****     enum causes {
  14:src/../h/riscv.hpp ****         SOFTWARE = 0x8000000000000001UL,
  15:src/../h/riscv.hpp ****         EXTERNAL = 0x8000000000000009UL,
  16:src/../h/riscv.hpp ****         U_ECALL  = 0x0000000000000008UL,
  17:src/../h/riscv.hpp ****         S_ECALL  = 0x0000000000000009UL
  18:src/../h/riscv.hpp ****     };
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     static void supervisor_trap();
  21:src/../h/riscv.hpp ****     static void handle_interrupt();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     static void push_regs();
  24:src/../h/riscv.hpp ****     static void pop_regs();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     static uint64 rd_scause();
  27:src/../h/riscv.hpp ****     static void wr_scause(uint64 value);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     static uint64 rd_sepc();
  30:src/../h/riscv.hpp ****     static void wr_sepc(uint64 value);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     static uint64 rd_stvec();
  33:src/../h/riscv.hpp ****     static void wr_stvec(uint64 value);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     static uint64 rd_stval();
  36:src/../h/riscv.hpp ****     static void wr_stval(uint64 value);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     static uint64 rd_sip();
  39:src/../h/riscv.hpp ****     static void wr_sip(uint64 value);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     static uint64 rd_sstatus();
  42:src/../h/riscv.hpp ****     static void wr_sstatus(uint64 value);
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     static inline void clear_sip(uint64 mask) {
  45:src/../h/riscv.hpp ****         __asm__ volatile("csrc sip, %0" : : "r"(mask));
  46:src/../h/riscv.hpp ****     }
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     static inline void set_sip(uint64 mask) {
  49:src/../h/riscv.hpp ****         __asm__ volatile("csrs sip, %0" : : "r"(mask));
  50:src/../h/riscv.hpp ****     }
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     static inline void mask_status(uint64 mask) {
  54:src/../h/riscv.hpp ****         __asm__ volatile("csrc sstatus, %0" : : "r"(mask));
  33              		.loc 2 54 9
  34              		.loc 2 54 59 is_stmt 0
  35 0028 93070010 		li	a5,256
  36              	#APP
  37              	# 54 "src/../h/riscv.hpp" 1
  55              	    };
  38              		csrc sstatus, a5
GAS LISTING /tmp/ccqeMSQt.s 			page 3


  39              	# 0 "" 2
  40              	.LVL1:
  41              	#NO_APP
  42              	.L2:
  43              	.LBE57:
  44              	.LBE56:
  21:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  45              		.loc 1 21 5 is_stmt 1
  46              		.loc 1 21 39 is_stmt 0
  47              	#APP
  48              	# 21 "src/riscv.cpp" 1
  22              	    __asm__ volatile ("sret");
  49              		csrw sepc, ra
  50              	# 0 "" 2
  51              		.loc 1 22 5 is_stmt 1
  52              		.loc 1 22 30 is_stmt 0
  53              	# 22 "src/riscv.cpp" 1
  23              	
  24:src/riscv.cpp ****     // => pop spp and spie !
  25:src/riscv.cpp ****     // exit from supervisor mode
  26:src/riscv.cpp **** }
  54              		sret
  55              	# 0 "" 2
  56              		.loc 1 26 1
  57              	#NO_APP
  58 0038 03348100 		ld	s0,8(sp)
  59              		.cfi_restore 8
  60              		.cfi_def_cfa 2, 16
  61 003c 13010101 		addi	sp,sp,16
  62              		.cfi_def_cfa_offset 0
  63 0040 67800000 		jr	ra
  64              		.cfi_endproc
  65              	.LFE34:
  67              		.section	.text._ZN4ListI3TCBE6removeEPS0_,"axG",@progbits,_ZN4ListI3TCBE6removeEPS0_,comdat
  68              		.align	2
  69              		.weak	_ZN4ListI3TCBE6removeEPS0_
  71              	_ZN4ListI3TCBE6removeEPS0_:
  72              	.LFB39:
  73              		.file 3 "src/../h/List.hpp"
   1:src/../h/List.hpp **** //
   2:src/../h/List.hpp **** // Created by os on 5/13/24.
   3:src/../h/List.hpp **** //
   4:src/../h/List.hpp **** 
   5:src/../h/List.hpp **** #ifndef PROJECT_BASE_LIST_HPP
   6:src/../h/List.hpp **** #define PROJECT_BASE_LIST_HPP
   7:src/../h/List.hpp **** #include "thread.hpp"
   8:src/../h/List.hpp **** 
   9:src/../h/List.hpp **** extern void printInteger(uint64);
  10:src/../h/List.hpp **** 
  11:src/../h/List.hpp **** template <typename T>
  12:src/../h/List.hpp **** class List {
  13:src/../h/List.hpp **** 
  14:src/../h/List.hpp **** public:
  15:src/../h/List.hpp **** 
  16:src/../h/List.hpp ****     friend class RISCV;
  17:src/../h/List.hpp **** 
  18:src/../h/List.hpp ****     List() : head(nullptr), tail(nullptr) {};
GAS LISTING /tmp/ccqeMSQt.s 			page 4


  19:src/../h/List.hpp **** 
  20:src/../h/List.hpp ****     void add(T*);
  21:src/../h/List.hpp ****     T* get();
  22:src/../h/List.hpp ****     T* peek();
  23:src/../h/List.hpp **** 
  24:src/../h/List.hpp ****     inline int size() {return count;}
  25:src/../h/List.hpp **** 
  26:src/../h/List.hpp **** private:
  27:src/../h/List.hpp **** 
  28:src/../h/List.hpp ****     struct Elem {
  29:src/../h/List.hpp ****         T* data;
  30:src/../h/List.hpp ****         Elem* next;
  31:src/../h/List.hpp **** 
  32:src/../h/List.hpp ****         explicit Elem(T* data) : data(data), next(nullptr) {}
  33:src/../h/List.hpp ****     };
  34:src/../h/List.hpp **** 
  35:src/../h/List.hpp ****     Elem *head, *tail;
  36:src/../h/List.hpp ****     int count = 0;
  37:src/../h/List.hpp **** 
  38:src/../h/List.hpp ****     void remove(T *t);
  39:src/../h/List.hpp **** };
  40:src/../h/List.hpp **** 
  41:src/../h/List.hpp **** typedef List<TCB> ListTCB;
  42:src/../h/List.hpp **** using ListSEM = List<Sem>;
  43:src/../h/List.hpp **** 
  44:src/../h/List.hpp **** template <typename T>
  45:src/../h/List.hpp **** void List<T>::add(T *t) {
  46:src/../h/List.hpp **** 
  47:src/../h/List.hpp ****     Elem* toAdd = new Elem(t);
  48:src/../h/List.hpp **** 
  49:src/../h/List.hpp ****     if (!head) head = tail = toAdd;
  50:src/../h/List.hpp ****     else tail = tail -> next = toAdd;
  51:src/../h/List.hpp **** 
  52:src/../h/List.hpp ****     count++;
  53:src/../h/List.hpp **** }
  54:src/../h/List.hpp **** 
  55:src/../h/List.hpp **** template <typename T>
  56:src/../h/List.hpp **** T* List<T>::get() {
  57:src/../h/List.hpp **** 
  58:src/../h/List.hpp ****     if (!head) return nullptr;
  59:src/../h/List.hpp **** 
  60:src/../h/List.hpp ****     T* t = head -> data;
  61:src/../h/List.hpp ****     Elem* oldHead = head;
  62:src/../h/List.hpp ****     head = head -> next;
  63:src/../h/List.hpp **** 
  64:src/../h/List.hpp ****     if (!head) tail = nullptr;
  65:src/../h/List.hpp **** 
  66:src/../h/List.hpp ****     delete oldHead;
  67:src/../h/List.hpp ****     count--;
  68:src/../h/List.hpp ****     return t;
  69:src/../h/List.hpp **** }
  70:src/../h/List.hpp **** 
  71:src/../h/List.hpp **** template <typename T>
  72:src/../h/List.hpp **** T* List<T>::peek() {
  73:src/../h/List.hpp ****     if (head) return head->data;
  74:src/../h/List.hpp ****     else return nullptr;
  75:src/../h/List.hpp **** }
GAS LISTING /tmp/ccqeMSQt.s 			page 5


  76:src/../h/List.hpp **** 
  77:src/../h/List.hpp **** template <typename T>
  78:src/../h/List.hpp **** void List<T>::remove(T* t) {
  74              		.loc 3 78 6 is_stmt 1
  75              		.cfi_startproc
  76              	.LVL2:
  77 0000 93060500 		mv	a3,a0
  78              	.LVL3:
  79:src/../h/List.hpp ****     Elem* prev = nullptr, *elem = head;
  79              		.loc 3 79 28 is_stmt 0
  80 0004 03350500 		ld	a0,0(a0)
  81              	.LVL4:
  82              		.loc 3 79 11
  83 0008 13070000 		li	a4,0
  84              	.LVL5:
  85              	.L10:
  80:src/../h/List.hpp ****     while (elem) {
  86              		.loc 3 80 5 is_stmt 1
  87 000c 630C0506 		beqz	a0,.L12
  81:src/../h/List.hpp ****         if (elem->data == t) {
  88              		.loc 3 81 19 is_stmt 0
  89 0010 83370500 		ld	a5,0(a0)
  90              		.loc 3 81 9
  91 0014 6388B700 		beq	a5,a1,.L15
  92              	.LVL6:
  82:src/../h/List.hpp **** 
  83:src/../h/List.hpp ****             // found
  84:src/../h/List.hpp ****             if (prev) {
  85:src/../h/List.hpp ****                 prev->next = elem->next;
  86:src/../h/List.hpp ****                 if (tail == elem) tail = prev;
  87:src/../h/List.hpp ****             }
  88:src/../h/List.hpp ****             else head = elem -> next;
  89:src/../h/List.hpp ****             if (!head) tail = nullptr;
  90:src/../h/List.hpp **** 
  91:src/../h/List.hpp ****             delete elem;
  92:src/../h/List.hpp ****             return;
  93:src/../h/List.hpp **** 
  94:src/../h/List.hpp ****         }
  95:src/../h/List.hpp ****         prev = elem;
  93              		.loc 3 95 9
  94 0018 13070500 		mv	a4,a0
  96:src/../h/List.hpp ****         elem = elem -> next;
  95              		.loc 3 96 9
  96 001c 03358500 		ld	a0,8(a0)
  97              	.LVL7:
  80:src/../h/List.hpp ****         if (elem->data == t) {
  98              		.loc 3 80 5
  99 0020 6FF0DFFE 		j	.L10
 100              	.L15:
  78:src/../h/List.hpp ****     Elem* prev = nullptr, *elem = head;
 101              		.loc 3 78 6
 102 0024 130101FF 		addi	sp,sp,-16
 103              		.cfi_def_cfa_offset 16
 104 0028 23341100 		sd	ra,8(sp)
 105 002c 23308100 		sd	s0,0(sp)
 106              		.cfi_offset 1, -8
 107              		.cfi_offset 8, -16
GAS LISTING /tmp/ccqeMSQt.s 			page 6


 108 0030 13040101 		addi	s0,sp,16
 109              		.cfi_def_cfa 8, 0
  84:src/../h/List.hpp ****                 prev->next = elem->next;
 110              		.loc 3 84 13
 111 0034 630E0702 		beqz	a4,.L7
  85:src/../h/List.hpp ****                 if (tail == elem) tail = prev;
 112              		.loc 3 85 36
 113 0038 83378500 		ld	a5,8(a0)
  85:src/../h/List.hpp ****                 if (tail == elem) tail = prev;
 114              		.loc 3 85 17
 115 003c 2334F700 		sd	a5,8(a4)
  86:src/../h/List.hpp ****             }
 116              		.loc 3 86 21
 117 0040 83B78600 		ld	a5,8(a3)
  86:src/../h/List.hpp ****             }
 118              		.loc 3 86 17
 119 0044 6382A702 		beq	a5,a0,.L16
 120              	.L8:
  89:src/../h/List.hpp **** 
 121              		.loc 3 89 18
 122 0048 83B70600 		ld	a5,0(a3)
  89:src/../h/List.hpp **** 
 123              		.loc 3 89 13
 124 004c 63880702 		beqz	a5,.L17
 125              	.L9:
  91:src/../h/List.hpp ****             return;
 126              		.loc 3 91 13
 127 0050 97000000 		call	_ZdlPv@plt
 127      E7800000 
 128              	.LVL8:
  97:src/../h/List.hpp ****     }
  98:src/../h/List.hpp **** }
 129              		.loc 3 98 1
 130 0058 83308100 		ld	ra,8(sp)
 131              		.cfi_remember_state
 132              		.cfi_restore 1
 133 005c 03340100 		ld	s0,0(sp)
 134              		.cfi_restore 8
 135              		.cfi_def_cfa 2, 16
 136 0060 13010101 		addi	sp,sp,16
 137              		.cfi_def_cfa_offset 0
 138 0064 67800000 		jr	ra
 139              	.LVL9:
 140              	.L16:
 141              		.cfi_restore_state
  86:src/../h/List.hpp ****             }
 142              		.loc 3 86 35 discriminator 1
 143 0068 23B4E600 		sd	a4,8(a3)
 144 006c 6FF0DFFD 		j	.L8
 145              	.L7:
  88:src/../h/List.hpp ****             if (!head) tail = nullptr;
 146              		.loc 3 88 33
 147 0070 83378500 		ld	a5,8(a0)
  88:src/../h/List.hpp ****             if (!head) tail = nullptr;
 148              		.loc 3 88 18
 149 0074 23B0F600 		sd	a5,0(a3)
 150 0078 6FF01FFD 		j	.L8
GAS LISTING /tmp/ccqeMSQt.s 			page 7


 151              	.L17:
  89:src/../h/List.hpp **** 
 152              		.loc 3 89 24 discriminator 1
 153 007c 23B40600 		sd	zero,8(a3)
 154 0080 6FF01FFD 		j	.L9
 155              	.L12:
 156              		.cfi_def_cfa_register 2
 157              		.cfi_restore 1
 158              		.cfi_restore 8
 159 0084 67800000 		ret
 160              		.cfi_endproc
 161              	.LFE39:
 163              		.text
 164              		.align	2
 165              		.globl	_ZN5RISCV16handle_interruptEv
 167              	_ZN5RISCV16handle_interruptEv:
 168              	.LFB35:
  27:src/riscv.cpp **** 
  28:src/riscv.cpp **** void RISCV::handle_interrupt() {
 169              		.loc 1 28 32 is_stmt 1
 170              		.cfi_startproc
 171 0044 130101F9 		addi	sp,sp,-112
 172              		.cfi_def_cfa_offset 112
 173 0048 23341106 		sd	ra,104(sp)
 174 004c 23308106 		sd	s0,96(sp)
 175 0050 233C9104 		sd	s1,88(sp)
 176 0054 23382105 		sd	s2,80(sp)
 177 0058 23343105 		sd	s3,72(sp)
 178 005c 23304105 		sd	s4,64(sp)
 179              		.cfi_offset 1, -8
 180              		.cfi_offset 8, -16
 181              		.cfi_offset 9, -24
 182              		.cfi_offset 18, -32
 183              		.cfi_offset 19, -40
 184              		.cfi_offset 20, -48
 185 0060 13040107 		addi	s0,sp,112
 186              		.cfi_def_cfa 8, 0
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****     uint64 op, a1, a2, a3, a4;
 187              		.loc 1 30 5
  31:src/riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(op)); // operation code
 188              		.loc 1 31 5
 189              		.loc 1 31 45 is_stmt 0
 190              	#APP
 191              	# 31 "src/riscv.cpp" 1
  32              	    __asm__ volatile("mv %0, a1" : "=r"(a1));
 192              		mv a6, a0
 193              	# 0 "" 2
 194              	.LVL10:
 195              		.loc 1 32 5 is_stmt 1
 196              		.loc 1 32 45 is_stmt 0
 197              	# 32 "src/riscv.cpp" 1
  33              	    __asm__ volatile("mv %0, a2" : "=r"(a2));
 198              		mv a0, a1
 199              	# 0 "" 2
 200              	.LVL11:
 201              		.loc 1 33 5 is_stmt 1
GAS LISTING /tmp/ccqeMSQt.s 			page 8


 202              		.loc 1 33 45 is_stmt 0
 203              	# 33 "src/riscv.cpp" 1
  34              	    __asm__ volatile("mv %0, a3" : "=r"(a3));
 204              		mv a1, a2
 205              	# 0 "" 2
 206              	.LVL12:
 207              		.loc 1 34 5 is_stmt 1
 208              		.loc 1 34 45 is_stmt 0
 209              	# 34 "src/riscv.cpp" 1
  35              	    __asm__ volatile("mv %0, a4" : "=r"(a4));
 210              		mv a2, a3
 211              	# 0 "" 2
 212              	.LVL13:
 213              		.loc 1 35 5 is_stmt 1
 214              		.loc 1 35 45 is_stmt 0
 215              	# 35 "src/riscv.cpp" 1
  36              	
 216              		mv a3, a4
 217              	# 0 "" 2
 218              	.LVL14:
  37:src/riscv.cpp ****     uint64 scause = rd_scause();
 219              		.loc 1 37 5 is_stmt 1
 220              	#NO_APP
 221              	.LBB58:
 222              	.LBB59:
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     static inline void set_status(uint64 mask) {
  58:src/../h/riscv.hpp ****         __asm__ volatile("csrs sstatus, %0" : : "r"(mask));
  59:src/../h/riscv.hpp ****     }
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     static void popSppSpie();
  62:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits
  63:src/../h/riscv.hpp ****     // must be in cpp !!!
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     enum mask_sstatus {
  66:src/../h/riscv.hpp ****         SIE = (1 << 1),
  67:src/../h/riscv.hpp ****         SPIE =(1 << 5),
  68:src/../h/riscv.hpp ****         SPP = (1 << 8)
  69:src/../h/riscv.hpp ****     };
  70:src/../h/riscv.hpp **** 
  71:src/../h/riscv.hpp ****     enum mask_sip_sie {
  72:src/../h/riscv.hpp ****         SS = (1 << 1),
  73:src/../h/riscv.hpp ****         SE = (1 << 9)
  74:src/../h/riscv.hpp ****     };
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp **** };
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp **** inline uint64 RISCV::rd_scause() {
  79:src/../h/riscv.hpp ****     uint64 volatile value;
 223              		.loc 2 79 5
  80:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, scause" : "=r"(value));
 224              		.loc 2 80 5
 225              		.loc 2 80 55 is_stmt 0
 226              	#APP
 227              	# 80 "src/../h/riscv.hpp" 1
  81              	    return value;
 228              		csrr a5, scause
GAS LISTING /tmp/ccqeMSQt.s 			page 9


 229              	# 0 "" 2
 230              	#NO_APP
 231 007c 233CF4F8 		sd	a5,-104(s0)
 232              		.loc 2 81 5 is_stmt 1
 233              		.loc 2 81 12 is_stmt 0
 234 0080 033784F9 		ld	a4,-104(s0)
 235              	.LVL15:
 236              	.LBE59:
 237              	.LBE58:
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****     if (scause == SOFTWARE) {
 238              		.loc 1 39 5 is_stmt 1
 239              	.LBB60:
 240 0084 9307F0FF 		li	a5,-1
 241 0088 9397F703 		slli	a5,a5,63
 242 008c 93871700 		addi	a5,a5,1
 243 0090 6300F706 		beq	a4,a5,.L52
 244              	.LBE60:
  40:src/riscv.cpp ****         // software interrupt - timer
  41:src/riscv.cpp **** 
  42:src/riscv.cpp ****         // update running time passed for running
  43:src/riscv.cpp ****         // if time >= running time slice, dispatch()
  44:src/riscv.cpp ****         // reset static time passed
  45:src/riscv.cpp ****         // update sleeping threads or timed wait
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****         clear_sip(mask_sip_sie::SS);
  48:src/riscv.cpp **** 
  49:src/riscv.cpp ****         // UPDATE SLEEPING THREADS IF SLEEPING_TIME > 0
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****         if (Scheduler::hasSleeping()) {
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****             Scheduler::first_sleepy -> sleeping_time --;
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             TCB* tcb = Scheduler::first_sleepy;
  56:src/riscv.cpp ****             while (tcb) {
  57:src/riscv.cpp ****                 // remember first sleepy
  58:src/riscv.cpp ****                 if (tcb -> sleeping_time > 0) break;
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****                 tcb->current_state = TCB::RUNNABLE;
  61:src/riscv.cpp ****                 Scheduler::put(tcb);
  62:src/riscv.cpp ****                 TCB* next = tcb -> next_sleepy;
  63:src/riscv.cpp ****                 tcb -> next_sleepy = nullptr;
  64:src/riscv.cpp ****                 tcb = next;
  65:src/riscv.cpp ****             }
  66:src/riscv.cpp **** 
  67:src/riscv.cpp ****             Scheduler::first_sleepy = tcb;
  68:src/riscv.cpp **** 
  69:src/riscv.cpp ****         }
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****         // UPDATE TIMED WAITING ON SEMAPHORES
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****         for (Sem* s = Sem::first; s; s = s->next) {
  74:src/riscv.cpp ****             int count = s->timedBlock;
  75:src/riscv.cpp ****             for (List<TCB>::Elem* e = s->blocked.head ; e && count > 0; e = e->next) {
  76:src/riscv.cpp ****                 TCB* t = e->data;
  77:src/riscv.cpp ****                 if (t->time_on_sem > 0) {       // if timed waiting
  78:src/riscv.cpp ****                     count--;
GAS LISTING /tmp/ccqeMSQt.s 			page 10


  79:src/riscv.cpp ****                     t->time_on_sem--;
  80:src/riscv.cpp ****                     if ( !t->time_on_sem && t != Scheduler::peek() ) {
  81:src/riscv.cpp ****                         // scheduler -> fifo, peek is next running
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****                         s->blocked.remove(t);  // time expired
  84:src/riscv.cpp ****                         t->current_state = TCB::RUNNABLE;
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****                         // timed block count updated in timed_wait
  87:src/riscv.cpp **** 
  88:src/riscv.cpp ****                         Scheduler::put(t);
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****                     }
  91:src/riscv.cpp ****                 }
  92:src/riscv.cpp ****             }
  93:src/riscv.cpp ****         }
  94:src/riscv.cpp **** 
  95:src/riscv.cpp ****         // CHECK IF RUNNING THREAD TIME SLICE EXPIRED
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****         TCB::time_slice_count ++;
  98:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
  99:src/riscv.cpp ****         {
 100:src/riscv.cpp ****             uint64 sepc = rd_sepc();
 101:src/riscv.cpp ****             uint64 sstatus = rd_sstatus();
 102:src/riscv.cpp **** 
 103:src/riscv.cpp ****             TCB::time_slice_count = 0; // new running thread
 104:src/riscv.cpp ****             TCB::dispatch();
 105:src/riscv.cpp **** 
 106:src/riscv.cpp ****             wr_sepc(sepc);
 107:src/riscv.cpp ****             wr_sstatus(sstatus);
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****             // first time running thread -> context not saved
 110:src/riscv.cpp ****             // next instruction: inside of wrapper function
 111:src/riscv.cpp ****         }
 112:src/riscv.cpp **** 
 113:src/riscv.cpp ****     } else if (scause == EXTERNAL) {
 245              		.loc 1 113 12
 246              	.LBB121:
 247              	.LBB61:
 248 0094 9307F0FF 		li	a5,-1
 249 0098 9397F703 		slli	a5,a5,63
 250 009c 93879700 		addi	a5,a5,9
 251 00a0 6304F718 		beq	a4,a5,.L53
 252              	.LBE61:
 253              	.LBE121:
 114:src/riscv.cpp ****         // external interrupt - console
 115:src/riscv.cpp ****         //console_handler();
 116:src/riscv.cpp **** 
 117:src/riscv.cpp ****         uint64 sepc = rd_sepc();
 118:src/riscv.cpp ****         uint64 sstatus = rd_sstatus();
 119:src/riscv.cpp **** 
 120:src/riscv.cpp ****         int irq = plic_claim();
 121:src/riscv.cpp ****         if (irq == CONSOLE_IRQ) {
 122:src/riscv.cpp **** 
 123:src/riscv.cpp ****             while (*(char *) CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT && !myConsole::inputBuffer->ful
 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****                 char c = *(char *) CONSOLE_RX_DATA;
 126:src/riscv.cpp ****                 myConsole::input_putc(c);
GAS LISTING /tmp/ccqeMSQt.s 			page 11


 127:src/riscv.cpp ****                 // put new char to input buffer.
 128:src/riscv.cpp ****             }
 129:src/riscv.cpp **** 
 130:src/riscv.cpp ****             plic_complete(irq);
 131:src/riscv.cpp ****         }
 132:src/riscv.cpp **** 
 133:src/riscv.cpp ****         wr_sepc(sepc);
 134:src/riscv.cpp ****         wr_sstatus(sstatus);
 135:src/riscv.cpp ****         clear_sip(SE);
 136:src/riscv.cpp **** 
 137:src/riscv.cpp ****     }
 138:src/riscv.cpp **** 
 139:src/riscv.cpp ****      else if (scause == U_ECALL || scause == S_ECALL){
 254              		.loc 1 139 11
 255              	.LBB122:
 256              	.LBB91:
 257              	.LBB62:
 258              		.loc 1 139 33 is_stmt 0
 259 00a4 130787FF 		addi	a4,a4,-8
 260              	.LVL16:
 261              		.loc 1 139 11
 262 00a8 93071000 		li	a5,1
 263 00ac 63E4E730 		bgtu	a4,a5,.L34
 264              	.LBB63:
 140:src/riscv.cpp ****         // environment call from user / supervisor mode
 141:src/riscv.cpp **** 
 142:src/riscv.cpp ****         uint64 sepc = rd_sepc() + 4;
 265              		.loc 1 142 9 is_stmt 1
 266              	.LBB64:
 267              	.LBB65:
  82:src/../h/riscv.hpp **** }
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** inline void RISCV::wr_scause(uint64 value) {
  85:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %0" : : "r"(value));
  86:src/../h/riscv.hpp **** }
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sepc() {
  89:src/../h/riscv.hpp ****     uint64 volatile value;
 268              		.loc 2 89 5
  90:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc" : "=r"(value));
 269              		.loc 2 90 5
 270              		.loc 2 90 53 is_stmt 0
 271              	#APP
 272              	# 90 "src/../h/riscv.hpp" 1
  91              	    return value;
 273              		csrr a5, sepc
 274              	# 0 "" 2
 275              	#NO_APP
 276 00b4 2334F4FC 		sd	a5,-56(s0)
 277              		.loc 2 91 5 is_stmt 1
 278              		.loc 2 91 12 is_stmt 0
 279 00b8 833484FC 		ld	s1,-56(s0)
 280              	.LBE65:
 281              	.LBE64:
 282              		.loc 1 142 35
 283 00bc 93844400 		addi	s1,s1,4
 284              	.LVL17:
GAS LISTING /tmp/ccqeMSQt.s 			page 12


 143:src/riscv.cpp ****         uint64 sstatus = rd_sstatus();
 285              		.loc 1 143 9 is_stmt 1
 286              	.LBB66:
 287              	.LBB67:
  92:src/../h/riscv.hpp **** }
  93:src/../h/riscv.hpp **** 
  94:src/../h/riscv.hpp **** inline void RISCV::wr_sepc(uint64 value) {
  95:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %0" : : "r"(value));
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline uint64 RISCV::rd_stvec() {
  99:src/../h/riscv.hpp ****     uint64 volatile value;
 100:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, stvec" : "=r"(value));
 101:src/../h/riscv.hpp ****     return value;
 102:src/../h/riscv.hpp **** }
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline void RISCV::wr_stvec(uint64 value) {
 105:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %0" : : "r"(value));
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline uint64 RISCV::rd_stval() {
 109:src/../h/riscv.hpp ****     uint64 volatile value;
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, stval" : "=r"(value));
 111:src/../h/riscv.hpp ****     return value;
 112:src/../h/riscv.hpp **** }
 113:src/../h/riscv.hpp **** 
 114:src/../h/riscv.hpp **** inline void RISCV::wr_stval(uint64 value) {
 115:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %0" : : "r"(value));
 116:src/../h/riscv.hpp **** }
 117:src/../h/riscv.hpp **** 
 118:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sip() {
 119:src/../h/riscv.hpp ****     uint64 volatile value;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sip" : "=r"(value));
 121:src/../h/riscv.hpp ****     return value;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void RISCV::wr_sip(uint64 value) {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %0" : : "r"(value));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 RISCV::rd_sstatus() {
 129:src/../h/riscv.hpp ****     uint64 volatile value;
 288              		.loc 2 129 5
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sstatus" : "=r"(value));
 289              		.loc 2 130 5
 290              		.loc 2 130 56 is_stmt 0
 291              	#APP
 292              	# 130 "src/../h/riscv.hpp" 1
 131              	    return value;
 293              		csrr a5, sstatus
 294              	# 0 "" 2
 295              	#NO_APP
 296 00c4 2330F4FC 		sd	a5,-64(s0)
 297              		.loc 2 131 5 is_stmt 1
 298              		.loc 2 131 12 is_stmt 0
 299 00c8 033904FC 		ld	s2,-64(s0)
 300              	.LVL18:
GAS LISTING /tmp/ccqeMSQt.s 			page 13


 301              	.LBE67:
 302              	.LBE66:
 144:src/riscv.cpp **** 
 145:src/riscv.cpp ****         switch (op) {
 303              		.loc 1 145 9 is_stmt 1
 304 00cc 93072004 		li	a5,66
 305 00d0 63EE071F 		bgtu	a6,a5,.L35
 306 00d4 93172800 		slli	a5,a6,2
 307 00d8 17070000 		lla	a4,.L37
 307      13070700 
 308              	.LVL19:
 309 00e0 B387E700 		add	a5,a5,a4
 310 00e4 83A70700 		lw	a5,0(a5)
 311 00e8 B387E700 		add	a5,a5,a4
 312 00ec 67800700 		jr	a5
 313              		.section	.rodata
 314              		.align	2
 315              		.align	2
 316              	.L37:
 317 0000 00000000 		.word	.L35-.L37
 318 0004 00000000 		.word	.L50-.L37
 319 0008 00000000 		.word	.L49-.L37
 320 000c 00000000 		.word	.L35-.L37
 321 0010 00000000 		.word	.L35-.L37
 322 0014 00000000 		.word	.L35-.L37
 323 0018 00000000 		.word	.L35-.L37
 324 001c 00000000 		.word	.L35-.L37
 325 0020 00000000 		.word	.L35-.L37
 326 0024 00000000 		.word	.L35-.L37
 327 0028 00000000 		.word	.L35-.L37
 328 002c 00000000 		.word	.L35-.L37
 329 0030 00000000 		.word	.L35-.L37
 330 0034 00000000 		.word	.L35-.L37
 331 0038 00000000 		.word	.L35-.L37
 332 003c 00000000 		.word	.L35-.L37
 333 0040 00000000 		.word	.L35-.L37
 334 0044 00000000 		.word	.L48-.L37
 335 0048 00000000 		.word	.L47-.L37
 336 004c 00000000 		.word	.L46-.L37
 337 0050 00000000 		.word	.L35-.L37
 338 0054 00000000 		.word	.L35-.L37
 339 0058 00000000 		.word	.L35-.L37
 340 005c 00000000 		.word	.L35-.L37
 341 0060 00000000 		.word	.L35-.L37
 342 0064 00000000 		.word	.L35-.L37
 343 0068 00000000 		.word	.L35-.L37
 344 006c 00000000 		.word	.L35-.L37
 345 0070 00000000 		.word	.L35-.L37
 346 0074 00000000 		.word	.L35-.L37
 347 0078 00000000 		.word	.L35-.L37
 348 007c 00000000 		.word	.L35-.L37
 349 0080 00000000 		.word	.L35-.L37
 350 0084 00000000 		.word	.L45-.L37
 351 0088 00000000 		.word	.L44-.L37
 352 008c 00000000 		.word	.L43-.L37
 353 0090 00000000 		.word	.L42-.L37
 354 0094 00000000 		.word	.L41-.L37
GAS LISTING /tmp/ccqeMSQt.s 			page 14


 355 0098 00000000 		.word	.L40-.L37
 356 009c 00000000 		.word	.L35-.L37
 357 00a0 00000000 		.word	.L35-.L37
 358 00a4 00000000 		.word	.L35-.L37
 359 00a8 00000000 		.word	.L35-.L37
 360 00ac 00000000 		.word	.L35-.L37
 361 00b0 00000000 		.word	.L35-.L37
 362 00b4 00000000 		.word	.L35-.L37
 363 00b8 00000000 		.word	.L35-.L37
 364 00bc 00000000 		.word	.L35-.L37
 365 00c0 00000000 		.word	.L35-.L37
 366 00c4 00000000 		.word	.L39-.L37
 367 00c8 00000000 		.word	.L35-.L37
 368 00cc 00000000 		.word	.L35-.L37
 369 00d0 00000000 		.word	.L35-.L37
 370 00d4 00000000 		.word	.L35-.L37
 371 00d8 00000000 		.word	.L35-.L37
 372 00dc 00000000 		.word	.L35-.L37
 373 00e0 00000000 		.word	.L35-.L37
 374 00e4 00000000 		.word	.L35-.L37
 375 00e8 00000000 		.word	.L35-.L37
 376 00ec 00000000 		.word	.L35-.L37
 377 00f0 00000000 		.word	.L35-.L37
 378 00f4 00000000 		.word	.L35-.L37
 379 00f8 00000000 		.word	.L35-.L37
 380 00fc 00000000 		.word	.L35-.L37
 381 0100 00000000 		.word	.L35-.L37
 382 0104 00000000 		.word	.L38-.L37
 383 0108 00000000 		.word	.L36-.L37
 384              		.text
 385              	.LVL20:
 386              	.L52:
 387              	.LBE63:
 388              	.LBE62:
 389              	.LBE91:
 390              	.LBB92:
  47:src/riscv.cpp **** 
 391              		.loc 1 47 9
 392              	.LBB93:
 393              	.LBB94:
  45:src/../h/riscv.hpp ****     }
 394              		.loc 2 45 9
  45:src/../h/riscv.hpp ****     }
 395              		.loc 2 45 55 is_stmt 0
 396 00f0 93072000 		li	a5,2
 397              	#APP
 398              	# 45 "src/../h/riscv.hpp" 1
 399              		csrc sip, a5
 400              	# 0 "" 2
 401              	.LVL21:
 402              	#NO_APP
 403              	.LBE94:
 404              	.LBE93:
  51:src/riscv.cpp **** 
 405              		.loc 1 51 9 is_stmt 1
 406              	.LBB95:
 407              	.LBB96:
GAS LISTING /tmp/ccqeMSQt.s 			page 15


 408              	.LBB97:
 409              		.file 4 "src/../h/Scheduler.hpp"
   1:src/../h/Scheduler.hpp **** 
   2:src/../h/Scheduler.hpp **** #ifndef PROJECT_BASE_SCHEDULER_HPP
   3:src/../h/Scheduler.hpp **** #define PROJECT_BASE_SCHEDULER_HPP
   4:src/../h/Scheduler.hpp **** 
   5:src/../h/Scheduler.hpp **** #include "thread.hpp"
   6:src/../h/Scheduler.hpp **** 
   7:src/../h/Scheduler.hpp **** class Scheduler {
   8:src/../h/Scheduler.hpp **** 
   9:src/../h/Scheduler.hpp ****     friend class RISCV;
  10:src/../h/Scheduler.hpp **** 
  11:src/../h/Scheduler.hpp **** public:
  12:src/../h/Scheduler.hpp ****     static void init_scheduler();
  13:src/../h/Scheduler.hpp **** 
  14:src/../h/Scheduler.hpp ****     static TCB* get();
  15:src/../h/Scheduler.hpp ****     static void put(TCB*);
  16:src/../h/Scheduler.hpp ****     static TCB* peek();
  17:src/../h/Scheduler.hpp ****     static bool empty();
  18:src/../h/Scheduler.hpp **** 
  19:src/../h/Scheduler.hpp ****     static int put_to_sleep(TCB*, time_t );
  20:src/../h/Scheduler.hpp **** 
  21:src/../h/Scheduler.hpp ****     void* operator new(size_t);
  22:src/../h/Scheduler.hpp ****     void operator delete(void *);
  23:src/../h/Scheduler.hpp **** 
  24:src/../h/Scheduler.hpp ****     Scheduler(const Scheduler&) = delete;
  25:src/../h/Scheduler.hpp **** 
  26:src/../h/Scheduler.hpp **** private:
  27:src/../h/Scheduler.hpp **** 
  28:src/../h/Scheduler.hpp ****     static bool hasSleeping() {return  first_sleepy != nullptr;}
 410              		.loc 4 28 32
 411              		.loc 4 28 53 is_stmt 0
 412 00f8 97070000 		la	a5,_ZN9Scheduler12first_sleepyE
 412      83B70700 
 413 0100 83B40700 		ld	s1,0(a5)
 414              	.LBE97:
 415              	.LBE96:
  51:src/riscv.cpp **** 
 416              		.loc 1 51 9
 417 0104 63840404 		beqz	s1,.L20
 418              	.LBB98:
  53:src/riscv.cpp **** 
 419              		.loc 1 53 13 is_stmt 1
  53:src/riscv.cpp **** 
 420              		.loc 1 53 40 is_stmt 0
 421 0108 83B70402 		ld	a5,32(s1)
  53:src/riscv.cpp **** 
 422              		.loc 1 53 54
 423 010c 9387F7FF 		addi	a5,a5,-1
 424 0110 23B0F402 		sd	a5,32(s1)
  55:src/riscv.cpp ****             while (tcb) {
 425              		.loc 1 55 13 is_stmt 1
 426              	.LVL22:
 427              	.L22:
  56:src/riscv.cpp ****                 // remember first sleepy
 428              		.loc 1 56 13
  56:src/riscv.cpp ****                 // remember first sleepy
GAS LISTING /tmp/ccqeMSQt.s 			page 16


 429              		.loc 1 56 20
 430 0114 63860402 		beqz	s1,.L21
 431              	.LBB99:
  58:src/riscv.cpp **** 
 432              		.loc 1 58 17
  58:src/riscv.cpp **** 
 433              		.loc 1 58 28 is_stmt 0
 434 0118 83B70402 		ld	a5,32(s1)
  58:src/riscv.cpp **** 
 435              		.loc 1 58 17
 436 011c 63920702 		bnez	a5,.L21
  60:src/riscv.cpp ****                 Scheduler::put(tcb);
 437              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 Scheduler::put(tcb);
 438              		.loc 1 60 36 is_stmt 0
 439 0120 23A40406 		sw	zero,104(s1)
  61:src/riscv.cpp ****                 TCB* next = tcb -> next_sleepy;
 440              		.loc 1 61 17 is_stmt 1
  61:src/riscv.cpp ****                 TCB* next = tcb -> next_sleepy;
 441              		.loc 1 61 31 is_stmt 0
 442 0124 13850400 		mv	a0,s1
 443 0128 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 443      E7800000 
 444              	.LVL23:
  62:src/riscv.cpp ****                 tcb -> next_sleepy = nullptr;
 445              		.loc 1 62 17 is_stmt 1
  62:src/riscv.cpp ****                 tcb -> next_sleepy = nullptr;
 446              		.loc 1 62 22 is_stmt 0
 447 0130 83B70401 		ld	a5,16(s1)
 448              	.LVL24:
  63:src/riscv.cpp ****                 tcb = next;
 449              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 tcb = next;
 450              		.loc 1 63 36 is_stmt 0
 451 0134 23B80400 		sd	zero,16(s1)
  64:src/riscv.cpp ****             }
 452              		.loc 1 64 17 is_stmt 1
 453              	.LVL25:
  64:src/riscv.cpp ****             }
 454              		.loc 1 64 21 is_stmt 0
 455 0138 93840700 		mv	s1,a5
 456              	.LBE99:
  56:src/riscv.cpp ****                 // remember first sleepy
 457              		.loc 1 56 13
 458 013c 6FF09FFD 		j	.L22
 459              	.LVL26:
 460              	.L21:
  67:src/riscv.cpp **** 
 461              		.loc 1 67 13 is_stmt 1
  67:src/riscv.cpp **** 
 462              		.loc 1 67 37 is_stmt 0
 463 0140 97070000 		la	a5,_ZN9Scheduler12first_sleepyE
 463      83B70700 
 464 0148 23B09700 		sd	s1,0(a5)
 465              	.LVL27:
 466              	.L20:
 467              	.LBE98:
GAS LISTING /tmp/ccqeMSQt.s 			page 17


 468              	.LBE95:
  73:src/riscv.cpp ****             int count = s->timedBlock;
 469              		.loc 1 73 9 is_stmt 1
 470              	.LBB100:
  73:src/riscv.cpp ****             int count = s->timedBlock;
 471              		.loc 1 73 19 is_stmt 0
 472 014c 97070000 		la	a5,_ZN3Sem5firstE
 472      83B70700 
 473 0154 03BA0700 		ld	s4,0(a5)
 474              	.LVL28:
 475 0158 6F000006 		j	.L27
 476              	.LVL29:
 477              	.L54:
 478              	.LBB101:
 479              	.LBB102:
 480              	.LBB103:
  83:src/riscv.cpp ****                         t->current_state = TCB::RUNNABLE;
 481              		.loc 1 83 25 is_stmt 1
  83:src/riscv.cpp ****                         t->current_state = TCB::RUNNABLE;
 482              		.loc 1 83 42 is_stmt 0
 483 015c 93050900 		mv	a1,s2
 484 0160 13050A01 		addi	a0,s4,16
 485 0164 97000000 		call	_ZN4ListI3TCBE6removeEPS0_
 485      E7800000 
 486              	.LVL30:
  84:src/riscv.cpp **** 
 487              		.loc 1 84 25 is_stmt 1
  84:src/riscv.cpp **** 
 488              		.loc 1 84 42 is_stmt 0
 489 016c 23240906 		sw	zero,104(s2)
  88:src/riscv.cpp **** 
 490              		.loc 1 88 25 is_stmt 1
  88:src/riscv.cpp **** 
 491              		.loc 1 88 39 is_stmt 0
 492 0170 13050900 		mv	a0,s2
 493 0174 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 493      E7800000 
 494              	.LVL31:
 495              	.L25:
 496              	.LBE103:
  75:src/riscv.cpp ****                 TCB* t = e->data;
 497              		.loc 1 75 13 is_stmt 1 discriminator 3
  75:src/riscv.cpp ****                 TCB* t = e->data;
 498              		.loc 1 75 75 is_stmt 0 discriminator 3
 499 017c 83B48400 		ld	s1,8(s1)
 500              	.LVL32:
 501              	.L26:
  75:src/riscv.cpp ****                 TCB* t = e->data;
 502              		.loc 1 75 59 is_stmt 1 discriminator 1
 503 0180 638A0402 		beqz	s1,.L24
  75:src/riscv.cpp ****                 TCB* t = e->data;
 504              		.loc 1 75 59 is_stmt 0 discriminator 2
 505 0184 63583003 		blez	s3,.L24
 506              	.LBB104:
  76:src/riscv.cpp ****                 if (t->time_on_sem > 0) {       // if timed waiting
 507              		.loc 1 76 17 is_stmt 1
  76:src/riscv.cpp ****                 if (t->time_on_sem > 0) {       // if timed waiting
GAS LISTING /tmp/ccqeMSQt.s 			page 18


 508              		.loc 1 76 22 is_stmt 0
 509 0188 03B90400 		ld	s2,0(s1)
 510              	.LVL33:
  77:src/riscv.cpp ****                     count--;
 511              		.loc 1 77 17 is_stmt 1
  77:src/riscv.cpp ****                     count--;
 512              		.loc 1 77 24 is_stmt 0
 513 018c 83378901 		ld	a5,24(s2)
  77:src/riscv.cpp ****                     count--;
 514              		.loc 1 77 17
 515 0190 E38607FE 		beqz	a5,.L25
  78:src/riscv.cpp ****                     t->time_on_sem--;
 516              		.loc 1 78 21 is_stmt 1
  78:src/riscv.cpp ****                     t->time_on_sem--;
 517              		.loc 1 78 26 is_stmt 0
 518 0194 9B89F9FF 		addiw	s3,s3,-1
 519              	.LVL34:
  79:src/riscv.cpp ****                     if ( !t->time_on_sem && t != Scheduler::peek() ) {
 520              		.loc 1 79 21 is_stmt 1
  79:src/riscv.cpp ****                     if ( !t->time_on_sem && t != Scheduler::peek() ) {
 521              		.loc 1 79 35 is_stmt 0
 522 0198 9387F7FF 		addi	a5,a5,-1
 523 019c 233CF900 		sd	a5,24(s2)
  80:src/riscv.cpp ****                         // scheduler -> fifo, peek is next running
 524              		.loc 1 80 21 is_stmt 1
  80:src/riscv.cpp ****                         // scheduler -> fifo, peek is next running
 525              		.loc 1 80 42 is_stmt 0
 526 01a0 E39E07FC 		bnez	a5,.L25
  80:src/riscv.cpp ****                         // scheduler -> fifo, peek is next running
 527              		.loc 1 80 65 discriminator 1
 528 01a4 97000000 		call	_ZN9Scheduler4peekEv@plt
 528      E7800000 
 529              	.LVL35:
  80:src/riscv.cpp ****                         // scheduler -> fifo, peek is next running
 530              		.loc 1 80 42 discriminator 1
 531 01ac E318A9FA 		bne	s2,a0,.L54
 532 01b0 6FF0DFFC 		j	.L25
 533              	.LVL36:
 534              	.L24:
 535              	.LBE104:
 536              	.LBE102:
 537              	.LBE101:
  73:src/riscv.cpp ****             int count = s->timedBlock;
 538              		.loc 1 73 9 is_stmt 1 discriminator 2
  73:src/riscv.cpp ****             int count = s->timedBlock;
 539              		.loc 1 73 40 is_stmt 0 discriminator 2
 540 01b4 033A8A00 		ld	s4,8(s4)
 541              	.LVL37:
 542              	.L27:
  73:src/riscv.cpp ****             int count = s->timedBlock;
 543              		.loc 1 73 35 is_stmt 1 discriminator 1
 544 01b8 63080A00 		beqz	s4,.L23
 545              	.LBB106:
  74:src/riscv.cpp ****             for (List<TCB>::Elem* e = s->blocked.head ; e && count > 0; e = e->next) {
 546              		.loc 1 74 13
  74:src/riscv.cpp ****             for (List<TCB>::Elem* e = s->blocked.head ; e && count > 0; e = e->next) {
 547              		.loc 1 74 17 is_stmt 0
GAS LISTING /tmp/ccqeMSQt.s 			page 19


 548 01bc 83298A02 		lw	s3,40(s4)
 549              	.LVL38:
  75:src/riscv.cpp ****                 TCB* t = e->data;
 550              		.loc 1 75 13 is_stmt 1
 551              	.LBB105:
  75:src/riscv.cpp ****                 TCB* t = e->data;
 552              		.loc 1 75 35 is_stmt 0
 553 01c0 83340A01 		ld	s1,16(s4)
 554              	.LVL39:
 555 01c4 6FF0DFFB 		j	.L26
 556              	.LVL40:
 557              	.L23:
 558              	.LBE105:
 559              	.LBE106:
 560              	.LBE100:
  97:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
 561              		.loc 1 97 9 is_stmt 1
  97:src/riscv.cpp ****         if (TCB::time_slice_count >= TCB::running->getTimeSlice())
 562              		.loc 1 97 31 is_stmt 0
 563 01c8 17070000 		la	a4,_ZN3TCB16time_slice_countE
 563      03370700 
 564 01d0 83370700 		ld	a5,0(a4)
 565 01d4 93871700 		addi	a5,a5,1
 566 01d8 2330F700 		sd	a5,0(a4)
  98:src/riscv.cpp ****         {
 567              		.loc 1 98 9 is_stmt 1
 568              	.LBB107:
  98:src/riscv.cpp ****         {
 569              		.loc 1 98 64 is_stmt 0
 570 01dc 17070000 		la	a4,_ZN3TCB7runningE
 570      03370700 
 571 01e4 03370700 		ld	a4,0(a4)
 572              	.LVL41:
 573              	.LBB108:
 574              	.LBB109:
 575              		.file 5 "src/../h/thread.hpp"
   1:src/../h/thread.hpp **** //
   2:src/../h/thread.hpp **** // Created by os on 4/9/24.
   3:src/../h/thread.hpp **** //
   4:src/../h/thread.hpp **** 
   5:src/../h/thread.hpp **** #ifndef PROJECT_BASE_THREAD_HPP
   6:src/../h/thread.hpp **** #define PROJECT_BASE_THREAD_HPP
   7:src/../h/thread.hpp **** 
   8:src/../h/thread.hpp **** #include "../lib/hw.h"
   9:src/../h/thread.hpp **** #include "../h/Memoryallocator.hpp"
  10:src/../h/thread.hpp **** #include "../h/riscv.hpp"
  11:src/../h/thread.hpp **** #include "../h/syscall_c.h"
  12:src/../h/thread.hpp **** 
  13:src/../h/thread.hpp **** //extern void thread_dispatch();
  14:src/../h/thread.hpp **** 
  15:src/../h/thread.hpp **** using routine_ptr = void(*)(void *);
  16:src/../h/thread.hpp **** 
  17:src/../h/thread.hpp **** // _thread je wrapper ove klase
  18:src/../h/thread.hpp **** class TCB final {
  19:src/../h/thread.hpp **** 
  20:src/../h/thread.hpp ****     friend class RISCV;
  21:src/../h/thread.hpp ****     friend class Sem;
GAS LISTING /tmp/ccqeMSQt.s 			page 20


  22:src/../h/thread.hpp ****     friend class Scheduler;
  23:src/../h/thread.hpp **** 
  24:src/../h/thread.hpp **** public:
  25:src/../h/thread.hpp **** 
  26:src/../h/thread.hpp ****     static TCB* running; // current thread
  27:src/../h/thread.hpp **** 
  28:src/../h/thread.hpp ****     enum state {
  29:src/../h/thread.hpp ****         RUNNABLE,
  30:src/../h/thread.hpp ****         SLEEPING,
  31:src/../h/thread.hpp ****         CREATED,
  32:src/../h/thread.hpp ****         FINISHED,
  33:src/../h/thread.hpp ****         BLOCKED
  34:src/../h/thread.hpp ****     };
  35:src/../h/thread.hpp ****     struct Context {
  36:src/../h/thread.hpp ****         // nadogradi kasnije
  37:src/../h/thread.hpp ****         uint64 pc;
  38:src/../h/thread.hpp ****         uint64 sp;
  39:src/../h/thread.hpp ****         uint64 sstatus;
  40:src/../h/thread.hpp ****         uint64 sepc;
  41:src/../h/thread.hpp ****     };
  42:src/../h/thread.hpp **** 
  43:src/../h/thread.hpp ****     static int _threadCreate(TCB** handle, routine_ptr routine, void* args, void* stack_space); // 
  44:src/../h/thread.hpp **** 
  45:src/../h/thread.hpp ****     static void yield(TCB*, TCB*);
  46:src/../h/thread.hpp **** 
  47:src/../h/thread.hpp ****     static void dispatch();
  48:src/../h/thread.hpp **** 
  49:src/../h/thread.hpp ****     state getState() const {return current_state;}
  50:src/../h/thread.hpp ****     time_t getTimeSlice() const {return time_slice;}
 576              		.loc 5 50 34 is_stmt 1
 577              		.loc 5 50 41 is_stmt 0
 578 01e8 03378702 		ld	a4,40(a4)
 579              	.LVL42:
 580              	.LBE109:
 581              	.LBE108:
  98:src/riscv.cpp ****         {
 582              		.loc 1 98 9
 583 01ec 63E4E70E 		bltu	a5,a4,.L18
 584              	.LBB110:
 100:src/riscv.cpp ****             uint64 sstatus = rd_sstatus();
 585              		.loc 1 100 13 is_stmt 1
 586              	.LBB111:
 587              	.LBB112:
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc" : "=r"(value));
 588              		.loc 2 89 5
  90:src/../h/riscv.hpp ****     return value;
 589              		.loc 2 90 5
  90:src/../h/riscv.hpp ****     return value;
 590              		.loc 2 90 53 is_stmt 0
 591              	#APP
 592              	# 90 "src/../h/riscv.hpp" 1
 593              		csrr a5, sepc
 594              	# 0 "" 2
 595              	#NO_APP
 596 01f4 2334F4FA 		sd	a5,-88(s0)
  91:src/../h/riscv.hpp **** }
 597              		.loc 2 91 5 is_stmt 1
GAS LISTING /tmp/ccqeMSQt.s 			page 21


  91:src/../h/riscv.hpp **** }
 598              		.loc 2 91 12 is_stmt 0
 599 01f8 033984FA 		ld	s2,-88(s0)
 600              	.LVL43:
 601              	.LBE112:
 602              	.LBE111:
 101:src/riscv.cpp **** 
 603              		.loc 1 101 13 is_stmt 1
 604              	.LBB113:
 605              	.LBB114:
 129:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sstatus" : "=r"(value));
 606              		.loc 2 129 5
 130:src/../h/riscv.hpp ****     return value;
 607              		.loc 2 130 5
 130:src/../h/riscv.hpp ****     return value;
 608              		.loc 2 130 56 is_stmt 0
 609              	#APP
 610              	# 130 "src/../h/riscv.hpp" 1
 611              		csrr a5, sstatus
 612              	# 0 "" 2
 613              	#NO_APP
 614 0200 2330F4FA 		sd	a5,-96(s0)
 615              		.loc 2 131 5 is_stmt 1
 616              		.loc 2 131 12 is_stmt 0
 617 0204 833404FA 		ld	s1,-96(s0)
 618              	.LVL44:
 619              	.LBE114:
 620              	.LBE113:
 103:src/riscv.cpp ****             TCB::dispatch();
 621              		.loc 1 103 13 is_stmt 1
 103:src/riscv.cpp ****             TCB::dispatch();
 622              		.loc 1 103 35 is_stmt 0
 623 0208 97070000 		la	a5,_ZN3TCB16time_slice_countE
 623      83B70700 
 624 0210 23B00700 		sd	zero,0(a5)
 104:src/riscv.cpp **** 
 625              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp **** 
 626              		.loc 1 104 26 is_stmt 0
 627 0214 97000000 		call	_ZN3TCB8dispatchEv@plt
 627      E7800000 
 628              	.LVL45:
 106:src/riscv.cpp ****             wr_sstatus(sstatus);
 629              		.loc 1 106 13 is_stmt 1
 630              	.LBB115:
 631              	.LBB116:
  95:src/../h/riscv.hpp **** }
 632              		.loc 2 95 5
  95:src/../h/riscv.hpp **** }
 633              		.loc 2 95 54 is_stmt 0
 634              	#APP
 635              	# 95 "src/../h/riscv.hpp" 1
 636              		csrw sepc, s2
 637              	# 0 "" 2
 638              	.LVL46:
 639              	#NO_APP
 640              	.LBE116:
GAS LISTING /tmp/ccqeMSQt.s 			page 22


 641              	.LBE115:
 107:src/riscv.cpp **** 
 642              		.loc 1 107 13 is_stmt 1
 643              	.LBB117:
 644              	.LBB118:
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void RISCV::wr_sstatus(uint64 value) {
 135:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %0" : : "r"(value));
 645              		.loc 2 135 5
 646              		.loc 2 135 57 is_stmt 0
 647              	#APP
 648              	# 135 "src/../h/riscv.hpp" 1
 136              	}
 649              		csrw sstatus, s1
 650              	# 0 "" 2
 651              		.loc 2 136 1
 652              	#NO_APP
 653 0224 6F00000B 		j	.L18
 654              	.LVL47:
 655              	.L53:
 656              	.LBE118:
 657              	.LBE117:
 658              	.LBE110:
 659              	.LBE107:
 660              	.LBE92:
 661              	.LBB119:
 662              	.LBB74:
 117:src/riscv.cpp ****         uint64 sstatus = rd_sstatus();
 663              		.loc 1 117 9 is_stmt 1
 664              	.LBB75:
 665              	.LBB76:
  89:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc" : "=r"(value));
 666              		.loc 2 89 5
  90:src/../h/riscv.hpp ****     return value;
 667              		.loc 2 90 5
  90:src/../h/riscv.hpp ****     return value;
 668              		.loc 2 90 53 is_stmt 0
 669              	#APP
 670              	# 90 "src/../h/riscv.hpp" 1
 671              		csrr a5, sepc
 672              	# 0 "" 2
 673              	#NO_APP
 674 022c 233CF4FA 		sd	a5,-72(s0)
  91:src/../h/riscv.hpp **** }
 675              		.loc 2 91 5 is_stmt 1
  91:src/../h/riscv.hpp **** }
 676              		.loc 2 91 12 is_stmt 0
 677 0230 833984FB 		ld	s3,-72(s0)
 678              	.LVL48:
 679              	.LBE76:
 680              	.LBE75:
 118:src/riscv.cpp **** 
 681              		.loc 1 118 9 is_stmt 1
 682              	.LBB77:
 683              	.LBB78:
 129:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sstatus" : "=r"(value));
GAS LISTING /tmp/ccqeMSQt.s 			page 23


 684              		.loc 2 129 5
 130:src/../h/riscv.hpp ****     return value;
 685              		.loc 2 130 5
 130:src/../h/riscv.hpp ****     return value;
 686              		.loc 2 130 56 is_stmt 0
 687              	#APP
 688              	# 130 "src/../h/riscv.hpp" 1
 689              		csrr a5, sstatus
 690              	# 0 "" 2
 691              	#NO_APP
 692 0238 2338F4FA 		sd	a5,-80(s0)
 131:src/../h/riscv.hpp **** }
 693              		.loc 2 131 5 is_stmt 1
 131:src/../h/riscv.hpp **** }
 694              		.loc 2 131 12 is_stmt 0
 695 023c 033904FB 		ld	s2,-80(s0)
 696              	.LVL49:
 697              	.LBE78:
 698              	.LBE77:
 120:src/riscv.cpp ****         if (irq == CONSOLE_IRQ) {
 699              		.loc 1 120 9 is_stmt 1
 120:src/riscv.cpp ****         if (irq == CONSOLE_IRQ) {
 700              		.loc 1 120 29 is_stmt 0
 701 0240 97000000 		call	plic_claim@plt
 701      E7800000 
 702              	.LVL50:
 703 0248 93040500 		mv	s1,a0
 704              	.LVL51:
 121:src/riscv.cpp **** 
 705              		.loc 1 121 9 is_stmt 1
 706              	.LBB79:
 707 024c 9307A000 		li	a5,10
 708 0250 630CF500 		beq	a0,a5,.L33
 709              	.LVL52:
 710              	.L30:
 711              	.LBE79:
 133:src/riscv.cpp ****         wr_sstatus(sstatus);
 712              		.loc 1 133 9
 713              	.LBB82:
 714              	.LBB83:
  95:src/../h/riscv.hpp **** }
 715              		.loc 2 95 5
  95:src/../h/riscv.hpp **** }
 716              		.loc 2 95 54 is_stmt 0
 717              	#APP
 718              	# 95 "src/../h/riscv.hpp" 1
 719              		csrw sepc, s3
 720              	# 0 "" 2
 721              	.LVL53:
 722              	#NO_APP
 723              	.LBE83:
 724              	.LBE82:
 134:src/riscv.cpp ****         clear_sip(SE);
 725              		.loc 1 134 9 is_stmt 1
 726              	.LBB84:
 727              	.LBB85:
 135:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccqeMSQt.s 			page 24


 728              		.loc 2 135 5
 135:src/../h/riscv.hpp **** }
 729              		.loc 2 135 57 is_stmt 0
 730              	#APP
 731              	# 135 "src/../h/riscv.hpp" 1
 732              		csrw sstatus, s2
 733              	# 0 "" 2
 734              	.LVL54:
 735              	#NO_APP
 736              	.LBE85:
 737              	.LBE84:
 135:src/riscv.cpp **** 
 738              		.loc 1 135 9 is_stmt 1
 739              	.LBB86:
 740              	.LBB87:
  45:src/../h/riscv.hpp ****     }
 741              		.loc 2 45 9
  45:src/../h/riscv.hpp ****     }
 742              		.loc 2 45 55 is_stmt 0
 743 025c 93070020 		li	a5,512
 744              	#APP
 745              	# 45 "src/../h/riscv.hpp" 1
  46:src/../h/riscv.hpp **** 
 746              		csrc sip, a5
 747              	# 0 "" 2
 748              		.loc 2 46 5
 749              	#NO_APP
 750 0264 6F000007 		j	.L18
 751              	.LVL55:
 752              	.L33:
 753              	.LBE87:
 754              	.LBE86:
 755              	.LBB88:
 756              	.LBB80:
 123:src/riscv.cpp **** 
 757              		.loc 1 123 13 is_stmt 1
 123:src/riscv.cpp **** 
 758              		.loc 1 123 69
 123:src/riscv.cpp **** 
 759              		.loc 1 123 20 is_stmt 0
 760 0268 97070000 		la	a5,CONSOLE_STATUS
 760      83B70700 
 761 0270 83B70700 		ld	a5,0(a5)
 762 0274 83C70700 		lbu	a5,0(a5)
 123:src/riscv.cpp **** 
 763              		.loc 1 123 69
 764 0278 93F71700 		andi	a5,a5,1
 765 027c 638C0702 		beqz	a5,.L31
 123:src/riscv.cpp **** 
 766              		.loc 1 123 101 discriminator 1
 767 0280 97070000 		la	a5,_ZN9myConsole11inputBufferE
 767      83B70700 
 768 0288 03B50700 		ld	a0,0(a5)
 769 028c 97000000 		call	_ZNK13BoundedBuffer4fullEv@plt
 769      E7800000 
 770              	.LVL56:
 123:src/riscv.cpp **** 
GAS LISTING /tmp/ccqeMSQt.s 			page 25


 771              		.loc 1 123 69 discriminator 1
 772 0294 63100502 		bnez	a0,.L31
 773              	.LBB81:
 125:src/riscv.cpp ****                 myConsole::input_putc(c);
 774              		.loc 1 125 17 is_stmt 1
 125:src/riscv.cpp ****                 myConsole::input_putc(c);
 775              		.loc 1 125 26 is_stmt 0
 776 0298 97070000 		la	a5,CONSOLE_RX_DATA
 776      83B70700 
 777 02a0 83B70700 		ld	a5,0(a5)
 778              	.LVL57:
 126:src/riscv.cpp ****                 // put new char to input buffer.
 779              		.loc 1 126 17 is_stmt 1
 126:src/riscv.cpp ****                 // put new char to input buffer.
 780              		.loc 1 126 38 is_stmt 0
 781 02a4 03C50700 		lbu	a0,0(a5)
 782 02a8 97000000 		call	_ZN9myConsole10input_putcEc@plt
 782      E7800000 
 783              	.LVL58:
 784              	.LBE81:
 123:src/riscv.cpp **** 
 785              		.loc 1 123 13
 786 02b0 6FF09FFB 		j	.L33
 787              	.L31:
 130:src/riscv.cpp ****         }
 788              		.loc 1 130 13 is_stmt 1 discriminator 4
 130:src/riscv.cpp ****         }
 789              		.loc 1 130 26 is_stmt 0 discriminator 4
 790 02b4 13850400 		mv	a0,s1
 791 02b8 97000000 		call	plic_complete@plt
 791      E7800000 
 792              	.LVL59:
 793              	.LBE80:
 794 02c0 6FF05FF9 		j	.L30
 795              	.LVL60:
 796              	.L50:
 797              	.LBE88:
 798              	.LBE74:
 799              	.LBB89:
 800              	.LBB72:
 146:src/riscv.cpp ****             case MEM_ALLOC:
 801              		.loc 1 146 13 is_stmt 1
 147:src/riscv.cpp ****                 MemoryAllocator::mem_alloc((size_t)a1);
 802              		.loc 1 147 17
 803              		.loc 1 147 43 is_stmt 0
 804 02c4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 804      E7800000 
 805              	.LVL61:
 148:src/riscv.cpp ****                 break;
 806              		.loc 1 148 17 is_stmt 1
 807              	.L35:
 149:src/riscv.cpp ****             case MEM_FREE:
 150:src/riscv.cpp ****                 MemoryAllocator::mem_free((void *)a1);
 151:src/riscv.cpp ****                 break;
 152:src/riscv.cpp ****             case THREAD_CREATE:
 153:src/riscv.cpp ****                 TCB::_threadCreate((TCB**)a1, (routine_ptr)a2, (void *)a3, (void *)a4);
 154:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccqeMSQt.s 			page 26


 155:src/riscv.cpp ****             case THREAD_EXIT:
 156:src/riscv.cpp ****                 TCB::_threadExit();
 157:src/riscv.cpp ****                 break;
 158:src/riscv.cpp ****             case THREAD_DISPATCH:
 159:src/riscv.cpp ****                 TCB::time_slice_count = 0;
 160:src/riscv.cpp ****                 TCB::dispatch();
 161:src/riscv.cpp ****                 break;
 162:src/riscv.cpp ****             case SEM_OPEN:
 163:src/riscv.cpp ****                 Sem::open((sem_t*)a1, (unsigned int)a2);
 164:src/riscv.cpp ****                 break;
 165:src/riscv.cpp ****             case SEM_CLOSE:
 166:src/riscv.cpp ****                 Sem::s_close((sem_t)a1); // a1 == handle
 167:src/riscv.cpp ****                 break;
 168:src/riscv.cpp ****             case SEM_WAIT:
 169:src/riscv.cpp ****                 Sem::wait(((sem_t)a1)); // a1 <=> handle
 170:src/riscv.cpp ****                 break;
 171:src/riscv.cpp ****             case SEM_SIGNAL:
 172:src/riscv.cpp ****                 Sem::signal((sem_t)a1); // a1 <=> handle
 173:src/riscv.cpp ****                 break;
 174:src/riscv.cpp ****             case SEM_TIMEDWAIT:
 175:src/riscv.cpp ****                 Sem::timedWait((sem_t)a1,(time_t)a2);
 176:src/riscv.cpp ****                 break;
 177:src/riscv.cpp ****             case SEM_TRYWAIT:
 178:src/riscv.cpp ****                 Sem::trywait((sem_t)a1);
 179:src/riscv.cpp ****                 break;
 180:src/riscv.cpp ****             case TIME_SLEEP:
 181:src/riscv.cpp ****                 Scheduler::put_to_sleep((thread_t)TCB::running, (time_t)a1);
 182:src/riscv.cpp ****                 break;
 183:src/riscv.cpp ****             case GETC:
 184:src/riscv.cpp ****                 myConsole::input_getc();
 185:src/riscv.cpp ****                 break;
 186:src/riscv.cpp ****             case PUTC:
 187:src/riscv.cpp ****                 myConsole::output_putc((char) a1);
 188:src/riscv.cpp ****                 break;
 189:src/riscv.cpp ****         }
 190:src/riscv.cpp **** 
 191:src/riscv.cpp ****         wr_sepc(sepc);
 808              		.loc 1 191 9
 809              	.LBB68:
 810              	.LBB69:
  95:src/../h/riscv.hpp **** }
 811              		.loc 2 95 5
  95:src/../h/riscv.hpp **** }
 812              		.loc 2 95 54 is_stmt 0
 813              	#APP
 814              	# 95 "src/../h/riscv.hpp" 1
 815              		csrw sepc, s1
 816              	# 0 "" 2
 817              	.LVL62:
 818              	#NO_APP
 819              	.LBE69:
 820              	.LBE68:
 192:src/riscv.cpp ****         wr_sstatus(sstatus);
 821              		.loc 1 192 9 is_stmt 1
 822              	.LBB70:
 823              	.LBB71:
 135:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccqeMSQt.s 			page 27


 824              		.loc 2 135 5
 135:src/../h/riscv.hpp **** }
 825              		.loc 2 135 57 is_stmt 0
 826              	#APP
 827              	# 135 "src/../h/riscv.hpp" 1
 828              		csrw sstatus, s2
 829              	# 0 "" 2
 830              	.LVL63:
 831              	#NO_APP
 832              	.L18:
 833              	.LBE71:
 834              	.LBE70:
 835              	.LBE72:
 836              	.LBE89:
 837              	.LBE119:
 838              	.LBE122:
 193:src/riscv.cpp **** 
 194:src/riscv.cpp ****     } else {
 195:src/riscv.cpp ****         // INVALID INTERRUPT CODE
 196:src/riscv.cpp ****         printInteger(123456789);
 197:src/riscv.cpp ****     }
 198:src/riscv.cpp **** }
 839              		.loc 1 198 1
 840 02d4 83308106 		ld	ra,104(sp)
 841              		.cfi_remember_state
 842              		.cfi_restore 1
 843 02d8 03340106 		ld	s0,96(sp)
 844              		.cfi_restore 8
 845              		.cfi_def_cfa 2, 112
 846 02dc 83348105 		ld	s1,88(sp)
 847              		.cfi_restore 9
 848 02e0 03390105 		ld	s2,80(sp)
 849              		.cfi_restore 18
 850 02e4 83398104 		ld	s3,72(sp)
 851              		.cfi_restore 19
 852 02e8 033A0104 		ld	s4,64(sp)
 853              		.cfi_restore 20
 854 02ec 13010107 		addi	sp,sp,112
 855              		.cfi_def_cfa_offset 0
 856 02f0 67800000 		jr	ra
 857              	.LVL64:
 858              	.L49:
 859              		.cfi_restore_state
 860              	.LBB123:
 861              	.LBB120:
 862              	.LBB90:
 863              	.LBB73:
 149:src/riscv.cpp ****                 MemoryAllocator::mem_free((void *)a1);
 864              		.loc 1 149 13 is_stmt 1
 150:src/riscv.cpp ****                 break;
 865              		.loc 1 150 17
 150:src/riscv.cpp ****                 break;
 866              		.loc 1 150 42 is_stmt 0
 867 02f4 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 867      E7800000 
 868              	.LVL65:
 151:src/riscv.cpp ****             case THREAD_CREATE:
GAS LISTING /tmp/ccqeMSQt.s 			page 28


 869              		.loc 1 151 17 is_stmt 1
 870 02fc 6FF01FFD 		j	.L35
 871              	.LVL66:
 872              	.L48:
 152:src/riscv.cpp ****                 TCB::_threadCreate((TCB**)a1, (routine_ptr)a2, (void *)a3, (void *)a4);
 873              		.loc 1 152 13
 153:src/riscv.cpp ****                 break;
 874              		.loc 1 153 17
 153:src/riscv.cpp ****                 break;
 875              		.loc 1 153 35 is_stmt 0
 876 0300 97000000 		call	_ZN3TCB13_threadCreateEPPS_PFvPvES2_S2_@plt
 876      E7800000 
 877              	.LVL67:
 154:src/riscv.cpp ****             case THREAD_EXIT:
 878              		.loc 1 154 17 is_stmt 1
 879 0308 6FF05FFC 		j	.L35
 880              	.LVL68:
 881              	.L47:
 155:src/riscv.cpp ****                 TCB::_threadExit();
 882              		.loc 1 155 13
 156:src/riscv.cpp ****                 break;
 883              		.loc 1 156 17
 156:src/riscv.cpp ****                 break;
 884              		.loc 1 156 33 is_stmt 0
 885 030c 97000000 		call	_ZN3TCB11_threadExitEv@plt
 885      E7800000 
 886              	.LVL69:
 157:src/riscv.cpp ****             case THREAD_DISPATCH:
 887              		.loc 1 157 17 is_stmt 1
 888 0314 6FF09FFB 		j	.L35
 889              	.LVL70:
 890              	.L46:
 158:src/riscv.cpp ****                 TCB::time_slice_count = 0;
 891              		.loc 1 158 13
 159:src/riscv.cpp ****                 TCB::dispatch();
 892              		.loc 1 159 17
 159:src/riscv.cpp ****                 TCB::dispatch();
 893              		.loc 1 159 39 is_stmt 0
 894 0318 97070000 		la	a5,_ZN3TCB16time_slice_countE
 894      83B70700 
 895 0320 23B00700 		sd	zero,0(a5)
 160:src/riscv.cpp ****                 break;
 896              		.loc 1 160 17 is_stmt 1
 160:src/riscv.cpp ****                 break;
 897              		.loc 1 160 30 is_stmt 0
 898 0324 97000000 		call	_ZN3TCB8dispatchEv@plt
 898      E7800000 
 899              	.LVL71:
 161:src/riscv.cpp ****             case SEM_OPEN:
 900              		.loc 1 161 17 is_stmt 1
 901 032c 6FF01FFA 		j	.L35
 902              	.LVL72:
 903              	.L45:
 162:src/riscv.cpp ****                 Sem::open((sem_t*)a1, (unsigned int)a2);
 904              		.loc 1 162 13
 163:src/riscv.cpp ****                 break;
 905              		.loc 1 163 17
GAS LISTING /tmp/ccqeMSQt.s 			page 29


 163:src/riscv.cpp ****                 break;
 906              		.loc 1 163 26 is_stmt 0
 907 0330 9B850500 		sext.w	a1,a1
 908              	.LVL73:
 909 0334 97000000 		call	_ZN3Sem4openEPPS_j@plt
 909      E7800000 
 910              	.LVL74:
 164:src/riscv.cpp ****             case SEM_CLOSE:
 911              		.loc 1 164 17 is_stmt 1
 912 033c 6FF01FF9 		j	.L35
 913              	.LVL75:
 914              	.L44:
 165:src/riscv.cpp ****                 Sem::s_close((sem_t)a1); // a1 == handle
 915              		.loc 1 165 13
 166:src/riscv.cpp ****                 break;
 916              		.loc 1 166 17
 166:src/riscv.cpp ****                 break;
 917              		.loc 1 166 29 is_stmt 0
 918 0340 97000000 		call	_ZN3Sem7s_closeEPS_@plt
 918      E7800000 
 919              	.LVL76:
 167:src/riscv.cpp ****             case SEM_WAIT:
 920              		.loc 1 167 17 is_stmt 1
 921 0348 6FF05FF8 		j	.L35
 922              	.LVL77:
 923              	.L43:
 168:src/riscv.cpp ****                 Sem::wait(((sem_t)a1)); // a1 <=> handle
 924              		.loc 1 168 13
 169:src/riscv.cpp ****                 break;
 925              		.loc 1 169 17
 169:src/riscv.cpp ****                 break;
 926              		.loc 1 169 26 is_stmt 0
 927 034c 97000000 		call	_ZN3Sem4waitEPS_@plt
 927      E7800000 
 928              	.LVL78:
 170:src/riscv.cpp ****             case SEM_SIGNAL:
 929              		.loc 1 170 17 is_stmt 1
 930 0354 6FF09FF7 		j	.L35
 931              	.LVL79:
 932              	.L42:
 171:src/riscv.cpp ****                 Sem::signal((sem_t)a1); // a1 <=> handle
 933              		.loc 1 171 13
 172:src/riscv.cpp ****                 break;
 934              		.loc 1 172 17
 172:src/riscv.cpp ****                 break;
 935              		.loc 1 172 28 is_stmt 0
 936 0358 97000000 		call	_ZN3Sem6signalEPS_@plt
 936      E7800000 
 937              	.LVL80:
 173:src/riscv.cpp ****             case SEM_TIMEDWAIT:
 938              		.loc 1 173 17 is_stmt 1
 939 0360 6FF0DFF6 		j	.L35
 940              	.LVL81:
 941              	.L41:
 174:src/riscv.cpp ****                 Sem::timedWait((sem_t)a1,(time_t)a2);
 942              		.loc 1 174 13
 175:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccqeMSQt.s 			page 30


 943              		.loc 1 175 17
 175:src/riscv.cpp ****                 break;
 944              		.loc 1 175 31 is_stmt 0
 945 0364 97000000 		call	_ZN3Sem9timedWaitEPS_m@plt
 945      E7800000 
 946              	.LVL82:
 176:src/riscv.cpp ****             case SEM_TRYWAIT:
 947              		.loc 1 176 17 is_stmt 1
 948 036c 6FF01FF6 		j	.L35
 949              	.LVL83:
 950              	.L40:
 177:src/riscv.cpp ****                 Sem::trywait((sem_t)a1);
 951              		.loc 1 177 13
 178:src/riscv.cpp ****                 break;
 952              		.loc 1 178 17
 178:src/riscv.cpp ****                 break;
 953              		.loc 1 178 29 is_stmt 0
 954 0370 97000000 		call	_ZN3Sem7trywaitEPS_@plt
 954      E7800000 
 955              	.LVL84:
 179:src/riscv.cpp ****             case TIME_SLEEP:
 956              		.loc 1 179 17 is_stmt 1
 957 0378 6FF05FF5 		j	.L35
 958              	.LVL85:
 959              	.L39:
 180:src/riscv.cpp ****                 Scheduler::put_to_sleep((thread_t)TCB::running, (time_t)a1);
 960              		.loc 1 180 13
 181:src/riscv.cpp ****                 break;
 961              		.loc 1 181 17
 181:src/riscv.cpp ****                 break;
 962              		.loc 1 181 40 is_stmt 0
 963 037c 93050500 		mv	a1,a0
 964              	.LVL86:
 965 0380 97070000 		la	a5,_ZN3TCB7runningE
 965      83B70700 
 966 0388 03B50700 		ld	a0,0(a5)
 967              	.LVL87:
 968 038c 97000000 		call	_ZN9Scheduler12put_to_sleepEP3TCBm@plt
 968      E7800000 
 969              	.LVL88:
 182:src/riscv.cpp ****             case GETC:
 970              		.loc 1 182 17 is_stmt 1
 971 0394 6FF09FF3 		j	.L35
 972              	.LVL89:
 973              	.L38:
 183:src/riscv.cpp ****                 myConsole::input_getc();
 974              		.loc 1 183 13
 184:src/riscv.cpp ****                 break;
 975              		.loc 1 184 17
 184:src/riscv.cpp ****                 break;
 976              		.loc 1 184 38 is_stmt 0
 977 0398 97000000 		call	_ZN9myConsole10input_getcEv@plt
 977      E7800000 
 978              	.LVL90:
 185:src/riscv.cpp ****             case PUTC:
 979              		.loc 1 185 17 is_stmt 1
 980 03a0 6FF0DFF2 		j	.L35
GAS LISTING /tmp/ccqeMSQt.s 			page 31


 981              	.LVL91:
 982              	.L36:
 186:src/riscv.cpp ****                 myConsole::output_putc((char) a1);
 983              		.loc 1 186 13
 187:src/riscv.cpp ****                 break;
 984              		.loc 1 187 17
 187:src/riscv.cpp ****                 break;
 985              		.loc 1 187 39 is_stmt 0
 986 03a4 1375F50F 		andi	a0,a0,0xff
 987              	.LVL92:
 988 03a8 97000000 		call	_ZN9myConsole11output_putcEc@plt
 988      E7800000 
 989              	.LVL93:
 188:src/riscv.cpp ****         }
 990              		.loc 1 188 17 is_stmt 1
 991 03b0 6FF0DFF1 		j	.L35
 992              	.LVL94:
 993              	.L34:
 994              	.LBE73:
 196:src/riscv.cpp ****     }
 995              		.loc 1 196 9
 196:src/riscv.cpp ****     }
 996              		.loc 1 196 21 is_stmt 0
 997 03b4 37D55B07 		li	a0,123457536
 998              	.LVL95:
 999 03b8 130555D1 		addi	a0,a0,-747
 1000 03bc 97000000 		call	_Z12printIntegerm@plt
 1000      E7800000 
 1001              	.LVL96:
 1002              	.LBE90:
 1003              	.LBE120:
 1004              	.LBE123:
 1005              		.loc 1 198 1
 1006 03c4 6FF01FF1 		j	.L18
 1007              		.cfi_endproc
 1008              	.LFE35:
 1010              	.Letext0:
 1011              		.file 6 "src/../lib/hw.h"
 1012              		.file 7 "src/../h/syscall_c.h"
 1013              		.file 8 "src/../h/semaphore.hpp"
 1014              		.file 9 "src/../h/Memoryallocator.hpp"
 1015              		.file 10 "src/../h/BoundedBuffer.hpp"
 1016              		.file 11 "src/../h/Console.hpp"
GAS LISTING /tmp/ccqeMSQt.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccqeMSQt.s:9      .text:0000000000000000 _ZN5RISCV10popSppSpieEv
     /tmp/ccqeMSQt.s:13     .text:0000000000000000 .L0 
     /tmp/ccqeMSQt.s:14     .text:0000000000000000 .L0 
     /tmp/ccqeMSQt.s:15     .text:0000000000000004 .L0 
     /tmp/ccqeMSQt.s:17     .text:0000000000000008 .L0 
     /tmp/ccqeMSQt.s:19     .text:000000000000000c .L0 
     /tmp/ccqeMSQt.s:21     .text:000000000000000c .L0 
     /tmp/ccqeMSQt.s:22     .text:000000000000000c .L0 
     /tmp/ccqeMSQt.s:26     .text:000000000000001c .L0 
     /tmp/ccqeMSQt.s:33     .text:0000000000000028 .L0 
     /tmp/ccqeMSQt.s:34     .text:0000000000000028 .L0 
     /tmp/ccqeMSQt.s:35     .text:0000000000000028 .L0 
     /tmp/ccqeMSQt.s:46     .text:0000000000000030 .L0 
       src/riscv.cpp:21     .text:0000000000000030 .L0 
     /tmp/ccqeMSQt.s:52     .text:0000000000000034 .L0 
       src/riscv.cpp:22     .text:0000000000000034 .L0 
     /tmp/ccqeMSQt.s:58     .text:0000000000000038 .L0 
     /tmp/ccqeMSQt.s:59     .text:000000000000003c .L0 
     /tmp/ccqeMSQt.s:60     .text:000000000000003c .L0 
     /tmp/ccqeMSQt.s:62     .text:0000000000000040 .L0 
     /tmp/ccqeMSQt.s:64     .text:0000000000000044 .L0 
     /tmp/ccqeMSQt.s:71     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000000 _ZN4ListI3TCBE6removeEPS0_
     /tmp/ccqeMSQt.s:75     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000000 .L0 
     /tmp/ccqeMSQt.s:77     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000000 .L0 
     /tmp/ccqeMSQt.s:80     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000004 .L0 
     /tmp/ccqeMSQt.s:83     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000008 .L0 
     /tmp/ccqeMSQt.s:87     .text._ZN4ListI3TCBE6removeEPS0_:000000000000000c .L0 
     /tmp/ccqeMSQt.s:89     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000010 .L0 
     /tmp/ccqeMSQt.s:91     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000014 .L0 
     /tmp/ccqeMSQt.s:94     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000018 .L0 
     /tmp/ccqeMSQt.s:96     .text._ZN4ListI3TCBE6removeEPS0_:000000000000001c .L0 
     /tmp/ccqeMSQt.s:99     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000020 .L0 
     /tmp/ccqeMSQt.s:102    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000024 .L0 
     /tmp/ccqeMSQt.s:103    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000028 .L0 
     /tmp/ccqeMSQt.s:106    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000030 .L0 
     /tmp/ccqeMSQt.s:107    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000030 .L0 
     /tmp/ccqeMSQt.s:109    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000034 .L0 
     /tmp/ccqeMSQt.s:111    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000034 .L0 
     /tmp/ccqeMSQt.s:113    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000038 .L0 
     /tmp/ccqeMSQt.s:115    .text._ZN4ListI3TCBE6removeEPS0_:000000000000003c .L0 
     /tmp/ccqeMSQt.s:117    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000040 .L0 
     /tmp/ccqeMSQt.s:119    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000044 .L0 
     /tmp/ccqeMSQt.s:122    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000048 .L0 
     /tmp/ccqeMSQt.s:124    .text._ZN4ListI3TCBE6removeEPS0_:000000000000004c .L0 
     /tmp/ccqeMSQt.s:127    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000050 .L0 
     /tmp/ccqeMSQt.s:130    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000058 .L0 
     /tmp/ccqeMSQt.s:131    .text._ZN4ListI3TCBE6removeEPS0_:000000000000005c .L0 
     /tmp/ccqeMSQt.s:132    .text._ZN4ListI3TCBE6removeEPS0_:000000000000005c .L0 
     /tmp/ccqeMSQt.s:134    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:135    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:137    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000064 .L0 
     /tmp/ccqeMSQt.s:141    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000068 .L0 
     /tmp/ccqeMSQt.s:143    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000068 .L0 
     /tmp/ccqeMSQt.s:147    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000070 .L0 
     /tmp/ccqeMSQt.s:149    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000074 .L0 
GAS LISTING /tmp/ccqeMSQt.s 			page 33


     /tmp/ccqeMSQt.s:153    .text._ZN4ListI3TCBE6removeEPS0_:000000000000007c .L0 
     /tmp/ccqeMSQt.s:156    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000084 .L0 
     /tmp/ccqeMSQt.s:157    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000084 .L0 
     /tmp/ccqeMSQt.s:158    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000084 .L0 
     /tmp/ccqeMSQt.s:160    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000088 .L0 
     /tmp/ccqeMSQt.s:167    .text:0000000000000044 _ZN5RISCV16handle_interruptEv
     /tmp/ccqeMSQt.s:170    .text:0000000000000044 .L0 
     /tmp/ccqeMSQt.s:171    .text:0000000000000044 .L0 
     /tmp/ccqeMSQt.s:172    .text:0000000000000048 .L0 
     /tmp/ccqeMSQt.s:179    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:180    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:181    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:182    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:183    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:184    .text:0000000000000060 .L0 
     /tmp/ccqeMSQt.s:186    .text:0000000000000064 .L0 
     /tmp/ccqeMSQt.s:188    .text:0000000000000064 .L0 
     /tmp/ccqeMSQt.s:189    .text:0000000000000064 .L0 
       src/riscv.cpp:31     .text:0000000000000064 .L0 
     /tmp/ccqeMSQt.s:196    .text:0000000000000068 .L0 
       src/riscv.cpp:32     .text:0000000000000068 .L0 
     /tmp/ccqeMSQt.s:202    .text:000000000000006c .L0 
       src/riscv.cpp:33     .text:000000000000006c .L0 
     /tmp/ccqeMSQt.s:208    .text:0000000000000070 .L0 
       src/riscv.cpp:34     .text:0000000000000070 .L0 
     /tmp/ccqeMSQt.s:214    .text:0000000000000074 .L0 
       src/riscv.cpp:35     .text:0000000000000074 .L0 
     /tmp/ccqeMSQt.s:223    .text:0000000000000078 .L0 
     /tmp/ccqeMSQt.s:224    .text:0000000000000078 .L0 
     /tmp/ccqeMSQt.s:225    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:80     .text:0000000000000078 .L0 
     /tmp/ccqeMSQt.s:233    .text:0000000000000080 .L0 
     /tmp/ccqeMSQt.s:234    .text:0000000000000080 .L0 
     /tmp/ccqeMSQt.s:240    .text:0000000000000084 .L0 
     /tmp/ccqeMSQt.s:248    .text:0000000000000094 .L0 
     /tmp/ccqeMSQt.s:258    .text:00000000000000a4 .L0 
     /tmp/ccqeMSQt.s:259    .text:00000000000000a4 .L0 
     /tmp/ccqeMSQt.s:262    .text:00000000000000a8 .L0 
     /tmp/ccqeMSQt.s:268    .text:00000000000000b0 .L0 
     /tmp/ccqeMSQt.s:269    .text:00000000000000b0 .L0 
     /tmp/ccqeMSQt.s:270    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:90     .text:00000000000000b0 .L0 
     /tmp/ccqeMSQt.s:278    .text:00000000000000b8 .L0 
     /tmp/ccqeMSQt.s:279    .text:00000000000000b8 .L0 
     /tmp/ccqeMSQt.s:283    .text:00000000000000bc .L0 
     /tmp/ccqeMSQt.s:288    .text:00000000000000c0 .L0 
     /tmp/ccqeMSQt.s:289    .text:00000000000000c0 .L0 
     /tmp/ccqeMSQt.s:290    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:130    .text:00000000000000c0 .L0 
     /tmp/ccqeMSQt.s:298    .text:00000000000000c8 .L0 
     /tmp/ccqeMSQt.s:299    .text:00000000000000c8 .L0 
     /tmp/ccqeMSQt.s:304    .text:00000000000000cc .L0 
     /tmp/ccqeMSQt.s:394    .text:00000000000000f0 .L0 
     /tmp/ccqeMSQt.s:395    .text:00000000000000f0 .L0 
     /tmp/ccqeMSQt.s:396    .text:00000000000000f0 .L0 
     /tmp/ccqeMSQt.s:410    .text:00000000000000f8 .L0 
     /tmp/ccqeMSQt.s:411    .text:00000000000000f8 .L0 
GAS LISTING /tmp/ccqeMSQt.s 			page 34


     /tmp/ccqeMSQt.s:412    .text:00000000000000f8 .L0 
     /tmp/ccqeMSQt.s:417    .text:0000000000000104 .L0 
     /tmp/ccqeMSQt.s:420    .text:0000000000000108 .L0 
     /tmp/ccqeMSQt.s:421    .text:0000000000000108 .L0 
     /tmp/ccqeMSQt.s:423    .text:000000000000010c .L0 
     /tmp/ccqeMSQt.s:428    .text:0000000000000114 .L0 
     /tmp/ccqeMSQt.s:429    .text:0000000000000114 .L0 
     /tmp/ccqeMSQt.s:430    .text:0000000000000114 .L0 
     /tmp/ccqeMSQt.s:433    .text:0000000000000118 .L0 
     /tmp/ccqeMSQt.s:434    .text:0000000000000118 .L0 
     /tmp/ccqeMSQt.s:436    .text:000000000000011c .L0 
     /tmp/ccqeMSQt.s:438    .text:0000000000000120 .L0 
     /tmp/ccqeMSQt.s:439    .text:0000000000000120 .L0 
     /tmp/ccqeMSQt.s:441    .text:0000000000000124 .L0 
     /tmp/ccqeMSQt.s:442    .text:0000000000000124 .L0 
     /tmp/ccqeMSQt.s:446    .text:0000000000000130 .L0 
     /tmp/ccqeMSQt.s:447    .text:0000000000000130 .L0 
     /tmp/ccqeMSQt.s:450    .text:0000000000000134 .L0 
     /tmp/ccqeMSQt.s:451    .text:0000000000000134 .L0 
     /tmp/ccqeMSQt.s:454    .text:0000000000000138 .L0 
     /tmp/ccqeMSQt.s:455    .text:0000000000000138 .L0 
     /tmp/ccqeMSQt.s:458    .text:000000000000013c .L0 
     /tmp/ccqeMSQt.s:462    .text:0000000000000140 .L0 
     /tmp/ccqeMSQt.s:463    .text:0000000000000140 .L0 
     /tmp/ccqeMSQt.s:471    .text:000000000000014c .L0 
     /tmp/ccqeMSQt.s:472    .text:000000000000014c .L0 
     /tmp/ccqeMSQt.s:482    .text:000000000000015c .L0 
     /tmp/ccqeMSQt.s:483    .text:000000000000015c .L0 
     /tmp/ccqeMSQt.s:488    .text:000000000000016c .L0 
     /tmp/ccqeMSQt.s:489    .text:000000000000016c .L0 
     /tmp/ccqeMSQt.s:491    .text:0000000000000170 .L0 
     /tmp/ccqeMSQt.s:492    .text:0000000000000170 .L0 
     /tmp/ccqeMSQt.s:498    .text:000000000000017c .L0 
     /tmp/ccqeMSQt.s:499    .text:000000000000017c .L0 
     /tmp/ccqeMSQt.s:503    .text:0000000000000180 .L0 
     /tmp/ccqeMSQt.s:505    .text:0000000000000184 .L0 
     /tmp/ccqeMSQt.s:508    .text:0000000000000188 .L0 
     /tmp/ccqeMSQt.s:509    .text:0000000000000188 .L0 
     /tmp/ccqeMSQt.s:512    .text:000000000000018c .L0 
     /tmp/ccqeMSQt.s:513    .text:000000000000018c .L0 
     /tmp/ccqeMSQt.s:515    .text:0000000000000190 .L0 
     /tmp/ccqeMSQt.s:517    .text:0000000000000194 .L0 
     /tmp/ccqeMSQt.s:518    .text:0000000000000194 .L0 
     /tmp/ccqeMSQt.s:521    .text:0000000000000198 .L0 
     /tmp/ccqeMSQt.s:522    .text:0000000000000198 .L0 
     /tmp/ccqeMSQt.s:525    .text:00000000000001a0 .L0 
     /tmp/ccqeMSQt.s:526    .text:00000000000001a0 .L0 
     /tmp/ccqeMSQt.s:528    .text:00000000000001a4 .L0 
     /tmp/ccqeMSQt.s:531    .text:00000000000001ac .L0 
     /tmp/ccqeMSQt.s:539    .text:00000000000001b4 .L0 
     /tmp/ccqeMSQt.s:540    .text:00000000000001b4 .L0 
     /tmp/ccqeMSQt.s:544    .text:00000000000001b8 .L0 
     /tmp/ccqeMSQt.s:547    .text:00000000000001bc .L0 
     /tmp/ccqeMSQt.s:548    .text:00000000000001bc .L0 
     /tmp/ccqeMSQt.s:552    .text:00000000000001c0 .L0 
     /tmp/ccqeMSQt.s:553    .text:00000000000001c0 .L0 
     /tmp/ccqeMSQt.s:562    .text:00000000000001c8 .L0 
GAS LISTING /tmp/ccqeMSQt.s 			page 35


     /tmp/ccqeMSQt.s:563    .text:00000000000001c8 .L0 
     /tmp/ccqeMSQt.s:569    .text:00000000000001dc .L0 
     /tmp/ccqeMSQt.s:570    .text:00000000000001dc .L0 
     /tmp/ccqeMSQt.s:577    .text:00000000000001e8 .L0 
     /tmp/ccqeMSQt.s:578    .text:00000000000001e8 .L0 
     /tmp/ccqeMSQt.s:583    .text:00000000000001ec .L0 
     /tmp/ccqeMSQt.s:588    .text:00000000000001f0 .L0 
     /tmp/ccqeMSQt.s:589    .text:00000000000001f0 .L0 
     /tmp/ccqeMSQt.s:590    .text:00000000000001f0 .L0 
  src/../h/riscv.hpp:90     .text:00000000000001f0 .L0 
     /tmp/ccqeMSQt.s:598    .text:00000000000001f8 .L0 
     /tmp/ccqeMSQt.s:599    .text:00000000000001f8 .L0 
     /tmp/ccqeMSQt.s:606    .text:00000000000001fc .L0 
     /tmp/ccqeMSQt.s:607    .text:00000000000001fc .L0 
     /tmp/ccqeMSQt.s:608    .text:00000000000001fc .L0 
  src/../h/riscv.hpp:130    .text:00000000000001fc .L0 
     /tmp/ccqeMSQt.s:616    .text:0000000000000204 .L0 
     /tmp/ccqeMSQt.s:617    .text:0000000000000204 .L0 
     /tmp/ccqeMSQt.s:622    .text:0000000000000208 .L0 
     /tmp/ccqeMSQt.s:623    .text:0000000000000208 .L0 
     /tmp/ccqeMSQt.s:626    .text:0000000000000214 .L0 
     /tmp/ccqeMSQt.s:627    .text:0000000000000214 .L0 
     /tmp/ccqeMSQt.s:632    .text:000000000000021c .L0 
     /tmp/ccqeMSQt.s:633    .text:000000000000021c .L0 
  src/../h/riscv.hpp:95     .text:000000000000021c .L0 
     /tmp/ccqeMSQt.s:645    .text:0000000000000220 .L0 
     /tmp/ccqeMSQt.s:646    .text:0000000000000220 .L0 
  src/../h/riscv.hpp:135    .text:0000000000000220 .L0 
     /tmp/ccqeMSQt.s:653    .text:0000000000000224 .L0 
     /tmp/ccqeMSQt.s:666    .text:0000000000000228 .L0 
     /tmp/ccqeMSQt.s:667    .text:0000000000000228 .L0 
     /tmp/ccqeMSQt.s:668    .text:0000000000000228 .L0 
  src/../h/riscv.hpp:90     .text:0000000000000228 .L0 
     /tmp/ccqeMSQt.s:676    .text:0000000000000230 .L0 
     /tmp/ccqeMSQt.s:677    .text:0000000000000230 .L0 
     /tmp/ccqeMSQt.s:684    .text:0000000000000234 .L0 
     /tmp/ccqeMSQt.s:685    .text:0000000000000234 .L0 
     /tmp/ccqeMSQt.s:686    .text:0000000000000234 .L0 
  src/../h/riscv.hpp:130    .text:0000000000000234 .L0 
     /tmp/ccqeMSQt.s:694    .text:000000000000023c .L0 
     /tmp/ccqeMSQt.s:695    .text:000000000000023c .L0 
     /tmp/ccqeMSQt.s:700    .text:0000000000000240 .L0 
     /tmp/ccqeMSQt.s:701    .text:0000000000000240 .L0 
     /tmp/ccqeMSQt.s:707    .text:000000000000024c .L0 
     /tmp/ccqeMSQt.s:715    .text:0000000000000254 .L0 
     /tmp/ccqeMSQt.s:716    .text:0000000000000254 .L0 
  src/../h/riscv.hpp:95     .text:0000000000000254 .L0 
     /tmp/ccqeMSQt.s:728    .text:0000000000000258 .L0 
     /tmp/ccqeMSQt.s:729    .text:0000000000000258 .L0 
  src/../h/riscv.hpp:135    .text:0000000000000258 .L0 
     /tmp/ccqeMSQt.s:741    .text:000000000000025c .L0 
     /tmp/ccqeMSQt.s:742    .text:000000000000025c .L0 
     /tmp/ccqeMSQt.s:743    .text:000000000000025c .L0 
     /tmp/ccqeMSQt.s:750    .text:0000000000000264 .L0 
     /tmp/ccqeMSQt.s:758    .text:0000000000000268 .L0 
     /tmp/ccqeMSQt.s:759    .text:0000000000000268 .L0 
     /tmp/ccqeMSQt.s:760    .text:0000000000000268 .L0 
GAS LISTING /tmp/ccqeMSQt.s 			page 36


     /tmp/ccqeMSQt.s:764    .text:0000000000000278 .L0 
     /tmp/ccqeMSQt.s:767    .text:0000000000000280 .L0 
     /tmp/ccqeMSQt.s:772    .text:0000000000000294 .L0 
     /tmp/ccqeMSQt.s:775    .text:0000000000000298 .L0 
     /tmp/ccqeMSQt.s:776    .text:0000000000000298 .L0 
     /tmp/ccqeMSQt.s:780    .text:00000000000002a4 .L0 
     /tmp/ccqeMSQt.s:781    .text:00000000000002a4 .L0 
     /tmp/ccqeMSQt.s:786    .text:00000000000002b0 .L0 
     /tmp/ccqeMSQt.s:789    .text:00000000000002b4 .L0 
     /tmp/ccqeMSQt.s:790    .text:00000000000002b4 .L0 
     /tmp/ccqeMSQt.s:802    .text:00000000000002c4 .L0 
     /tmp/ccqeMSQt.s:803    .text:00000000000002c4 .L0 
     /tmp/ccqeMSQt.s:804    .text:00000000000002c4 .L0 
     /tmp/ccqeMSQt.s:808    .text:00000000000002cc .L0 
     /tmp/ccqeMSQt.s:811    .text:00000000000002cc .L0 
     /tmp/ccqeMSQt.s:812    .text:00000000000002cc .L0 
  src/../h/riscv.hpp:95     .text:00000000000002cc .L0 
     /tmp/ccqeMSQt.s:824    .text:00000000000002d0 .L0 
     /tmp/ccqeMSQt.s:825    .text:00000000000002d0 .L0 
  src/../h/riscv.hpp:135    .text:00000000000002d0 .L0 
     /tmp/ccqeMSQt.s:840    .text:00000000000002d4 .L0 
     /tmp/ccqeMSQt.s:841    .text:00000000000002d8 .L0 
     /tmp/ccqeMSQt.s:842    .text:00000000000002d8 .L0 
     /tmp/ccqeMSQt.s:844    .text:00000000000002dc .L0 
     /tmp/ccqeMSQt.s:845    .text:00000000000002dc .L0 
     /tmp/ccqeMSQt.s:847    .text:00000000000002e0 .L0 
     /tmp/ccqeMSQt.s:849    .text:00000000000002e4 .L0 
     /tmp/ccqeMSQt.s:851    .text:00000000000002e8 .L0 
     /tmp/ccqeMSQt.s:853    .text:00000000000002ec .L0 
     /tmp/ccqeMSQt.s:855    .text:00000000000002f0 .L0 
     /tmp/ccqeMSQt.s:859    .text:00000000000002f4 .L0 
     /tmp/ccqeMSQt.s:865    .text:00000000000002f4 .L0 
     /tmp/ccqeMSQt.s:866    .text:00000000000002f4 .L0 
     /tmp/ccqeMSQt.s:867    .text:00000000000002f4 .L0 
     /tmp/ccqeMSQt.s:870    .text:00000000000002fc .L0 
     /tmp/ccqeMSQt.s:874    .text:0000000000000300 .L0 
     /tmp/ccqeMSQt.s:875    .text:0000000000000300 .L0 
     /tmp/ccqeMSQt.s:876    .text:0000000000000300 .L0 
     /tmp/ccqeMSQt.s:879    .text:0000000000000308 .L0 
     /tmp/ccqeMSQt.s:883    .text:000000000000030c .L0 
     /tmp/ccqeMSQt.s:884    .text:000000000000030c .L0 
     /tmp/ccqeMSQt.s:885    .text:000000000000030c .L0 
     /tmp/ccqeMSQt.s:888    .text:0000000000000314 .L0 
     /tmp/ccqeMSQt.s:892    .text:0000000000000318 .L0 
     /tmp/ccqeMSQt.s:893    .text:0000000000000318 .L0 
     /tmp/ccqeMSQt.s:894    .text:0000000000000318 .L0 
     /tmp/ccqeMSQt.s:897    .text:0000000000000324 .L0 
     /tmp/ccqeMSQt.s:898    .text:0000000000000324 .L0 
     /tmp/ccqeMSQt.s:901    .text:000000000000032c .L0 
     /tmp/ccqeMSQt.s:905    .text:0000000000000330 .L0 
     /tmp/ccqeMSQt.s:906    .text:0000000000000330 .L0 
     /tmp/ccqeMSQt.s:907    .text:0000000000000330 .L0 
     /tmp/ccqeMSQt.s:912    .text:000000000000033c .L0 
     /tmp/ccqeMSQt.s:916    .text:0000000000000340 .L0 
     /tmp/ccqeMSQt.s:917    .text:0000000000000340 .L0 
     /tmp/ccqeMSQt.s:918    .text:0000000000000340 .L0 
     /tmp/ccqeMSQt.s:921    .text:0000000000000348 .L0 
GAS LISTING /tmp/ccqeMSQt.s 			page 37


     /tmp/ccqeMSQt.s:925    .text:000000000000034c .L0 
     /tmp/ccqeMSQt.s:926    .text:000000000000034c .L0 
     /tmp/ccqeMSQt.s:927    .text:000000000000034c .L0 
     /tmp/ccqeMSQt.s:930    .text:0000000000000354 .L0 
     /tmp/ccqeMSQt.s:934    .text:0000000000000358 .L0 
     /tmp/ccqeMSQt.s:935    .text:0000000000000358 .L0 
     /tmp/ccqeMSQt.s:936    .text:0000000000000358 .L0 
     /tmp/ccqeMSQt.s:939    .text:0000000000000360 .L0 
     /tmp/ccqeMSQt.s:943    .text:0000000000000364 .L0 
     /tmp/ccqeMSQt.s:944    .text:0000000000000364 .L0 
     /tmp/ccqeMSQt.s:945    .text:0000000000000364 .L0 
     /tmp/ccqeMSQt.s:948    .text:000000000000036c .L0 
     /tmp/ccqeMSQt.s:952    .text:0000000000000370 .L0 
     /tmp/ccqeMSQt.s:953    .text:0000000000000370 .L0 
     /tmp/ccqeMSQt.s:954    .text:0000000000000370 .L0 
     /tmp/ccqeMSQt.s:957    .text:0000000000000378 .L0 
     /tmp/ccqeMSQt.s:961    .text:000000000000037c .L0 
     /tmp/ccqeMSQt.s:962    .text:000000000000037c .L0 
     /tmp/ccqeMSQt.s:963    .text:000000000000037c .L0 
     /tmp/ccqeMSQt.s:971    .text:0000000000000394 .L0 
     /tmp/ccqeMSQt.s:975    .text:0000000000000398 .L0 
     /tmp/ccqeMSQt.s:976    .text:0000000000000398 .L0 
     /tmp/ccqeMSQt.s:977    .text:0000000000000398 .L0 
     /tmp/ccqeMSQt.s:980    .text:00000000000003a0 .L0 
     /tmp/ccqeMSQt.s:984    .text:00000000000003a4 .L0 
     /tmp/ccqeMSQt.s:985    .text:00000000000003a4 .L0 
     /tmp/ccqeMSQt.s:986    .text:00000000000003a4 .L0 
     /tmp/ccqeMSQt.s:991    .text:00000000000003b0 .L0 
     /tmp/ccqeMSQt.s:996    .text:00000000000003b4 .L0 
     /tmp/ccqeMSQt.s:997    .text:00000000000003b4 .L0 
     /tmp/ccqeMSQt.s:1006   .text:00000000000003c4 .L0 
     /tmp/ccqeMSQt.s:1007   .text:00000000000003c8 .L0 
     /tmp/ccqeMSQt.s:1017   .text:00000000000003c8 .L0 
     /tmp/ccqeMSQt.s:163    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000088 .L0 
     /tmp/ccqeMSQt.s:22     .text:000000000000000c .L0 
     /tmp/ccqeMSQt.s:26     .text:000000000000001c .L0 
     /tmp/ccqeMSQt.s:316    .rodata:0000000000000000 .L37
     /tmp/ccqeMSQt.s:307    .text:00000000000000d8 .L0 
     /tmp/ccqeMSQt.s:412    .text:00000000000000f8 .L0 
     /tmp/ccqeMSQt.s:463    .text:0000000000000140 .L0 
     /tmp/ccqeMSQt.s:472    .text:000000000000014c .L0 
     /tmp/ccqeMSQt.s:563    .text:00000000000001c8 .L0 
     /tmp/ccqeMSQt.s:570    .text:00000000000001dc .L0 
     /tmp/ccqeMSQt.s:623    .text:0000000000000208 .L0 
     /tmp/ccqeMSQt.s:760    .text:0000000000000268 .L0 
     /tmp/ccqeMSQt.s:767    .text:0000000000000280 .L0 
     /tmp/ccqeMSQt.s:776    .text:0000000000000298 .L0 
     /tmp/ccqeMSQt.s:894    .text:0000000000000318 .L0 
     /tmp/ccqeMSQt.s:965    .text:0000000000000380 .L0 
     /tmp/ccqeMSQt.s:42     .text:0000000000000030 .L2
     /tmp/ccqeMSQt.s:386    .text:00000000000000f0 .L52
     /tmp/ccqeMSQt.s:655    .text:0000000000000228 .L53
     /tmp/ccqeMSQt.s:993    .text:00000000000003b4 .L34
     /tmp/ccqeMSQt.s:807    .text:00000000000002cc .L35
     /tmp/ccqeMSQt.s:466    .text:000000000000014c .L20
     /tmp/ccqeMSQt.s:460    .text:0000000000000140 .L21
     /tmp/ccqeMSQt.s:427    .text:0000000000000114 .L22
GAS LISTING /tmp/ccqeMSQt.s 			page 38


     /tmp/ccqeMSQt.s:542    .text:00000000000001b8 .L27
     /tmp/ccqeMSQt.s:534    .text:00000000000001b4 .L24
     /tmp/ccqeMSQt.s:495    .text:000000000000017c .L25
     /tmp/ccqeMSQt.s:477    .text:000000000000015c .L54
     /tmp/ccqeMSQt.s:557    .text:00000000000001c8 .L23
     /tmp/ccqeMSQt.s:501    .text:0000000000000180 .L26
     /tmp/ccqeMSQt.s:832    .text:00000000000002d4 .L18
     /tmp/ccqeMSQt.s:752    .text:0000000000000268 .L33
     /tmp/ccqeMSQt.s:787    .text:00000000000002b4 .L31
     /tmp/ccqeMSQt.s:710    .text:0000000000000254 .L30
     /tmp/ccqeMSQt.s:155    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000084 .L12
     /tmp/ccqeMSQt.s:100    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000024 .L15
     /tmp/ccqeMSQt.s:85     .text._ZN4ListI3TCBE6removeEPS0_:000000000000000c .L10
     /tmp/ccqeMSQt.s:145    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000070 .L7
     /tmp/ccqeMSQt.s:140    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000068 .L16
     /tmp/ccqeMSQt.s:151    .text._ZN4ListI3TCBE6removeEPS0_:000000000000007c .L17
     /tmp/ccqeMSQt.s:120    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000048 .L8
     /tmp/ccqeMSQt.s:125    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000050 .L9
     /tmp/ccqeMSQt.s:796    .text:00000000000002c4 .L50
     /tmp/ccqeMSQt.s:858    .text:00000000000002f4 .L49
     /tmp/ccqeMSQt.s:872    .text:0000000000000300 .L48
     /tmp/ccqeMSQt.s:881    .text:000000000000030c .L47
     /tmp/ccqeMSQt.s:890    .text:0000000000000318 .L46
     /tmp/ccqeMSQt.s:903    .text:0000000000000330 .L45
     /tmp/ccqeMSQt.s:914    .text:0000000000000340 .L44
     /tmp/ccqeMSQt.s:923    .text:000000000000034c .L43
     /tmp/ccqeMSQt.s:932    .text:0000000000000358 .L42
     /tmp/ccqeMSQt.s:941    .text:0000000000000364 .L41
     /tmp/ccqeMSQt.s:950    .text:0000000000000370 .L40
     /tmp/ccqeMSQt.s:959    .text:000000000000037c .L39
     /tmp/ccqeMSQt.s:973    .text:0000000000000398 .L38
     /tmp/ccqeMSQt.s:982    .text:00000000000003a4 .L36
     /tmp/ccqeMSQt.s:3572   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccqeMSQt.s:6152   .debug_str:0000000000000c94 .LASF268
     /tmp/ccqeMSQt.s:6228   .debug_str:0000000000000f5f .LASF269
     /tmp/ccqeMSQt.s:5870   .debug_str:00000000000004bd .LASF270
     /tmp/ccqeMSQt.s:5672   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccqeMSQt.s:5706   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccqeMSQt.s:5904   .debug_str:00000000000005c3 .LASF0
     /tmp/ccqeMSQt.s:5944   .debug_str:00000000000006ad .LASF1
     /tmp/ccqeMSQt.s:6074   .debug_str:0000000000000a64 .LASF2
     /tmp/ccqeMSQt.s:6086   .debug_str:0000000000000aee .LASF4
     /tmp/ccqeMSQt.s:5918   .debug_str:0000000000000620 .LASF3
     /tmp/ccqeMSQt.s:5724   .debug_str:0000000000000064 .LASF5
     /tmp/ccqeMSQt.s:6038   .debug_str:0000000000000978 .LASF6
     /tmp/ccqeMSQt.s:6026   .debug_str:00000000000008ff .LASF7
     /tmp/ccqeMSQt.s:5930   .debug_str:0000000000000667 .LASF8
     /tmp/ccqeMSQt.s:5866   .debug_str:00000000000004a1 .LASF9
     /tmp/ccqeMSQt.s:5878   .debug_str:000000000000050d .LASF10
     /tmp/ccqeMSQt.s:5782   .debug_str:0000000000000204 .LASF11
     /tmp/ccqeMSQt.s:5854   .debug_str:000000000000045b .LASF12
     /tmp/ccqeMSQt.s:5804   .debug_str:00000000000002cd .LASF13
     /tmp/ccqeMSQt.s:5780   .debug_str:00000000000001f4 .LASF14
     /tmp/ccqeMSQt.s:6128   .debug_str:0000000000000c0e .LASF15
     /tmp/ccqeMSQt.s:5842   .debug_str:00000000000003d2 .LASF16
     /tmp/ccqeMSQt.s:6110   .debug_str:0000000000000b7d .LASF17
     /tmp/ccqeMSQt.s:6226   .debug_str:0000000000000f59 .LASF83
GAS LISTING /tmp/ccqeMSQt.s 			page 39


     /tmp/ccqeMSQt.s:5916   .debug_str:0000000000000619 .LASF22
     /tmp/ccqeMSQt.s:5962   .debug_str:0000000000000741 .LASF18
     /tmp/ccqeMSQt.s:5980   .debug_str:00000000000007ba .LASF19
     /tmp/ccqeMSQt.s:5770   .debug_str:00000000000001b4 .LASF20
     /tmp/ccqeMSQt.s:5754   .debug_str:0000000000000122 .LASF21
     /tmp/ccqeMSQt.s:5718   .debug_str:0000000000000041 .LASF23
     /tmp/ccqeMSQt.s:6052   .debug_str:00000000000009d2 .LASF24
     /tmp/ccqeMSQt.s:5818   .debug_str:000000000000033a .LASF25
     /tmp/ccqeMSQt.s:5820   .debug_str:0000000000000347 .LASF26
     /tmp/ccqeMSQt.s:6066   .debug_str:0000000000000a0e .LASF28
     /tmp/ccqeMSQt.s:5828   .debug_str:000000000000036d .LASF27
     /tmp/ccqeMSQt.s:6076   .debug_str:0000000000000a72 .LASF29
     /tmp/ccqeMSQt.s:5766   .debug_str:00000000000001a4 .LASF30
     /tmp/ccqeMSQt.s:6182   .debug_str:0000000000000e26 .LASF31
     /tmp/ccqeMSQt.s:5876   .debug_str:0000000000000504 .LASF32
     /tmp/ccqeMSQt.s:5784   .debug_str:0000000000000213 .LASF33
     /tmp/ccqeMSQt.s:6064   .debug_str:0000000000000a04 .LASF34
     /tmp/ccqeMSQt.s:6260   .debug_str:000000000000107a .LASF36
     /tmp/ccqeMSQt.s:6134   .debug_str:0000000000000c37 .LASF38
     /tmp/ccqeMSQt.s:6036   .debug_str:0000000000000962 .LASF40
     /tmp/ccqeMSQt.s:6208   .debug_str:0000000000000eed .LASF35
     /tmp/ccqeMSQt.s:6210   .debug_str:0000000000000ef5 .LASF37
     /tmp/ccqeMSQt.s:6096   .debug_str:0000000000000b30 .LASF39
     /tmp/ccqeMSQt.s:6258   .debug_str:0000000000001066 .LASF41
     /tmp/ccqeMSQt.s:5776   .debug_str:00000000000001d6 .LASF42
     /tmp/ccqeMSQt.s:6246   .debug_str:0000000000000ff6 .LASF43
     /tmp/ccqeMSQt.s:5956   .debug_str:000000000000070a .LASF44
     /tmp/ccqeMSQt.s:6142   .debug_str:0000000000000c59 .LASF45
     /tmp/ccqeMSQt.s:6050   .debug_str:00000000000009c9 .LASF46
     /tmp/ccqeMSQt.s:5964   .debug_str:000000000000074a .LASF47
     /tmp/ccqeMSQt.s:6214   .debug_str:0000000000000f14 .LASF48
     /tmp/ccqeMSQt.s:6032   .debug_str:0000000000000934 .LASF49
     /tmp/ccqeMSQt.s:6008   .debug_str:0000000000000899 .LASF50
     /tmp/ccqeMSQt.s:5976   .debug_str:0000000000000798 .LASF51
     /tmp/ccqeMSQt.s:5846   .debug_str:0000000000000404 .LASF52
     /tmp/ccqeMSQt.s:6122   .debug_str:0000000000000be2 .LASF53
     /tmp/ccqeMSQt.s:6172   .debug_str:0000000000000dd4 .LASF54
     /tmp/ccqeMSQt.s:5796   .debug_str:000000000000028d .LASF55
     /tmp/ccqeMSQt.s:6224   .debug_str:0000000000000f4e .LASF56
     /tmp/ccqeMSQt.s:6190   .debug_str:0000000000000e7e .LASF57
     /tmp/ccqeMSQt.s:5928   .debug_str:000000000000065d .LASF58
     /tmp/ccqeMSQt.s:6188   .debug_str:0000000000000e68 .LASF59
     /tmp/ccqeMSQt.s:6168   .debug_str:0000000000000db8 .LASF60
     /tmp/ccqeMSQt.s:6170   .debug_str:0000000000000dc0 .LASF61
     /tmp/ccqeMSQt.s:5814   .debug_str:000000000000031e .LASF62
     /tmp/ccqeMSQt.s:6244   .debug_str:0000000000000fdd .LASF63
     /tmp/ccqeMSQt.s:6056   .debug_str:00000000000009e3 .LASF64
     /tmp/ccqeMSQt.s:5960   .debug_str:0000000000000729 .LASF65
     /tmp/ccqeMSQt.s:5890   .debug_str:000000000000056d .LASF66
     /tmp/ccqeMSQt.s:5834   .debug_str:0000000000000392 .LASF67
     /tmp/ccqeMSQt.s:6162   .debug_str:0000000000000d97 .LASF271
     /tmp/ccqeMSQt.s:6256   .debug_str:000000000000105c .LASF68
     /tmp/ccqeMSQt.s:5862   .debug_str:000000000000048e .LASF69
     /tmp/ccqeMSQt.s:6108   .debug_str:0000000000000b6f .LASF70
     /tmp/ccqeMSQt.s:6046   .debug_str:00000000000009b5 .LASF71
     /tmp/ccqeMSQt.s:5816   .debug_str:000000000000032a .LASF72
     /tmp/ccqeMSQt.s:5786   .debug_str:0000000000000228 .LASF73
GAS LISTING /tmp/ccqeMSQt.s 			page 40


     /tmp/ccqeMSQt.s:5722   .debug_str:000000000000005a .LASF74
     /tmp/ccqeMSQt.s:5998   .debug_str:0000000000000832 .LASF75
     /tmp/ccqeMSQt.s:6084   .debug_str:0000000000000ae3 .LASF76
     /tmp/ccqeMSQt.s:6156   .debug_str:0000000000000d5d .LASF77
     /tmp/ccqeMSQt.s:6072   .debug_str:0000000000000a58 .LASF78
     /tmp/ccqeMSQt.s:6234   .debug_str:0000000000000f8e .LASF79
     /tmp/ccqeMSQt.s:5924   .debug_str:0000000000000648 .LASF80
     /tmp/ccqeMSQt.s:5990   .debug_str:0000000000000809 .LASF81
     /tmp/ccqeMSQt.s:6204   .debug_str:0000000000000eda .LASF82
     /tmp/ccqeMSQt.s:5832   .debug_str:000000000000038c .LASF84
     /tmp/ccqeMSQt.s:5932   .debug_str:000000000000067a .LASF85
     /tmp/ccqeMSQt.s:5790   .debug_str:0000000000000254 .LASF86
     /tmp/ccqeMSQt.s:6048   .debug_str:00000000000009c1 .LASF87
     /tmp/ccqeMSQt.s:5764   .debug_str:000000000000019b .LASF88
     /tmp/ccqeMSQt.s:5970   .debug_str:0000000000000776 .LASF89
     /tmp/ccqeMSQt.s:6136   .debug_str:0000000000000c41 .LASF161
     /tmp/ccqeMSQt.s:6216   .debug_str:0000000000000f1d .LASF90
     /tmp/ccqeMSQt.s:6154   .debug_str:0000000000000d58 .LASF91
     /tmp/ccqeMSQt.s:6150   .debug_str:0000000000000c8c .LASF145
     /tmp/ccqeMSQt.s:5772   .debug_str:00000000000001bc .LASF104
     /tmp/ccqeMSQt.s:5852   .debug_str:0000000000000433 .LASF106
     /tmp/ccqeMSQt.s:5948   .debug_str:00000000000006d2 .LASF92
     /tmp/ccqeMSQt.s:5744   .debug_str:00000000000000ee .LASF93
     /tmp/ccqeMSQt.s:5824   .debug_str:000000000000035f .LASF94
     /tmp/ccqeMSQt.s:5794   .debug_str:000000000000027a .LASF95
     /tmp/ccqeMSQt.s:6094   .debug_str:0000000000000b27 .LASF96
     /tmp/ccqeMSQt.s:6106   .debug_str:0000000000000b5b .LASF98
     /tmp/ccqeMSQt.s:5952   .debug_str:00000000000006f8 .LASF97
     /tmp/ccqeMSQt.s:6194   .debug_str:0000000000000ea0 .LASF99
     /tmp/ccqeMSQt.s:5728   .debug_str:0000000000000070 .LASF100
     /tmp/ccqeMSQt.s:5958   .debug_str:0000000000000713 .LASF101
     /tmp/ccqeMSQt.s:6138   .debug_str:0000000000000c49 .LASF102
     /tmp/ccqeMSQt.s:6132   .debug_str:0000000000000c21 .LASF103
     /tmp/ccqeMSQt.s:5974   .debug_str:0000000000000791 .LASF105
     /tmp/ccqeMSQt.s:5806   .debug_str:00000000000002dd .LASF107
     /tmp/ccqeMSQt.s:6088   .debug_str:0000000000000af5 .LASF108
     /tmp/ccqeMSQt.s:5720   .debug_str:000000000000004e .LASF109
     /tmp/ccqeMSQt.s:6248   .debug_str:000000000000100b .LASF110
     /tmp/ccqeMSQt.s:5872   .debug_str:00000000000004db .LASF111
     /tmp/ccqeMSQt.s:5716   .debug_str:0000000000000031 .LASF112
     /tmp/ccqeMSQt.s:6014   .debug_str:00000000000008bd .LASF113
     /tmp/ccqeMSQt.s:6098   .debug_str:0000000000000b38 .LASF114
     /tmp/ccqeMSQt.s:6070   .debug_str:0000000000000a47 .LASF115
     /tmp/ccqeMSQt.s:5748   .debug_str:0000000000000108 .LASF116
     /tmp/ccqeMSQt.s:6078   .debug_str:0000000000000a90 .LASF117
     /tmp/ccqeMSQt.s:5934   .debug_str:0000000000000683 .LASF118
     /tmp/ccqeMSQt.s:5830   .debug_str:000000000000037e .LASF119
     /tmp/ccqeMSQt.s:6060   .debug_str:00000000000009f3 .LASF120
     /tmp/ccqeMSQt.s:5822   .debug_str:0000000000000357 .LASF121
     /tmp/ccqeMSQt.s:6016   .debug_str:00000000000008ca .LASF122
     /tmp/ccqeMSQt.s:6104   .debug_str:0000000000000b55 .LASF123
     /tmp/ccqeMSQt.s:6176   .debug_str:0000000000000deb .LASF124
     /tmp/ccqeMSQt.s:5988   .debug_str:00000000000007fb .LASF125
     /tmp/ccqeMSQt.s:6252   .debug_str:000000000000102e .LASF188
     /tmp/ccqeMSQt.s:5812   .debug_str:0000000000000310 .LASF156
     /tmp/ccqeMSQt.s:5762   .debug_str:0000000000000173 .LASF158
     /tmp/ccqeMSQt.s:6196   .debug_str:0000000000000eb9 .LASF202
GAS LISTING /tmp/ccqeMSQt.s 			page 41


     /tmp/ccqeMSQt.s:5732   .debug_str:0000000000000088 .LASF204
     /tmp/ccqeMSQt.s:6018   .debug_str:00000000000008cf .LASF126
     /tmp/ccqeMSQt.s:6158   .debug_str:0000000000000d6b .LASF127
     /tmp/ccqeMSQt.s:6230   .debug_str:0000000000000f6d .LASF128
     /tmp/ccqeMSQt.s:5826   .debug_str:0000000000000368 .LASF129
     /tmp/ccqeMSQt.s:5906   .debug_str:00000000000005d0 .LASF130
     /tmp/ccqeMSQt.s:6130   .debug_str:0000000000000c1a .LASF131
     /tmp/ccqeMSQt.s:6042   .debug_str:0000000000000987 .LASF132
     /tmp/ccqeMSQt.s:5838   .debug_str:00000000000003b1 .LASF133
     /tmp/ccqeMSQt.s:6002   .debug_str:0000000000000848 .LASF134
     /tmp/ccqeMSQt.s:5750   .debug_str:0000000000000113 .LASF135
     /tmp/ccqeMSQt.s:5858   .debug_str:0000000000000472 .LASF136
     /tmp/ccqeMSQt.s:6202   .debug_str:0000000000000ed2 .LASF137
     /tmp/ccqeMSQt.s:5802   .debug_str:00000000000002b9 .LASF138
     /tmp/ccqeMSQt.s:6010   .debug_str:00000000000008a0 .LASF139
     /tmp/ccqeMSQt.s:5972   .debug_str:000000000000077e .LASF140
     /tmp/ccqeMSQt.s:5886   .debug_str:000000000000054a .LASF141
     /tmp/ccqeMSQt.s:5914   .debug_str:0000000000000605 .LASF142
     /tmp/ccqeMSQt.s:5868   .debug_str:00000000000004b1 .LASF143
     /tmp/ccqeMSQt.s:6124   .debug_str:0000000000000bf5 .LASF144
     /tmp/ccqeMSQt.s:6062   .debug_str:00000000000009fe .LASF146
     /tmp/ccqeMSQt.s:5954   .debug_str:0000000000000705 .LASF147
     /tmp/ccqeMSQt.s:5966   .debug_str:000000000000075f .LASF213
     /tmp/ccqeMSQt.s:5902   .debug_str:00000000000005bd .LASF148
     /tmp/ccqeMSQt.s:5926   .debug_str:000000000000064d .LASF149
     /tmp/ccqeMSQt.s:6242   .debug_str:0000000000000fd5 .LASF150
     /tmp/ccqeMSQt.s:6090   .debug_str:0000000000000afa .LASF151
     /tmp/ccqeMSQt.s:5894   .debug_str:000000000000058b .LASF152
     /tmp/ccqeMSQt.s:5726   .debug_str:000000000000006b .LASF153
     /tmp/ccqeMSQt.s:6040   .debug_str:000000000000097f .LASF154
     /tmp/ccqeMSQt.s:5708   .debug_str:0000000000000000 .LASF155
     /tmp/ccqeMSQt.s:5756   .debug_str:000000000000012a .LASF157
     /tmp/ccqeMSQt.s:5736   .debug_str:00000000000000aa .LASF159
     /tmp/ccqeMSQt.s:5920   .debug_str:0000000000000632 .LASF272
     /tmp/ccqeMSQt.s:6250   .debug_str:0000000000001018 .LASF273
     /tmp/ccqeMSQt.s:6020   .debug_str:00000000000008db .LASF160
     /tmp/ccqeMSQt.s:5774   .debug_str:00000000000001ca .LASF162
     /tmp/ccqeMSQt.s:5710   .debug_str:000000000000000b .LASF163
     /tmp/ccqeMSQt.s:5942   .debug_str:00000000000006a8 .LASF164
     /tmp/ccqeMSQt.s:5742   .debug_str:00000000000000d5 .LASF165
     /tmp/ccqeMSQt.s:5888   .debug_str:0000000000000552 .LASF166
     /tmp/ccqeMSQt.s:6212   .debug_str:0000000000000f09 .LASF167
     /tmp/ccqeMSQt.s:6232   .debug_str:0000000000000f73 .LASF168
     /tmp/ccqeMSQt.s:6144   .debug_str:0000000000000c6e .LASF169
     /tmp/ccqeMSQt.s:5738   .debug_str:00000000000000bd .LASF170
     /tmp/ccqeMSQt.s:5910   .debug_str:00000000000005e6 .LASF171
     /tmp/ccqeMSQt.s:6080   .debug_str:0000000000000a9c .LASF172
     /tmp/ccqeMSQt.s:6192   .debug_str:0000000000000e96 .LASF173
     /tmp/ccqeMSQt.s:5982   .debug_str:00000000000007c3 .LASF174
     /tmp/ccqeMSQt.s:5758   .debug_str:0000000000000131 .LASF175
     /tmp/ccqeMSQt.s:5984   .debug_str:00000000000007d0 .LASF176
     /tmp/ccqeMSQt.s:6178   .debug_str:0000000000000df3 .LASF177
     /tmp/ccqeMSQt.s:5898   .debug_str:00000000000005a9 .LASF178
     /tmp/ccqeMSQt.s:5986   .debug_str:00000000000007da .LASF179
     /tmp/ccqeMSQt.s:5768   .debug_str:00000000000001ae .LASF180
     /tmp/ccqeMSQt.s:5760   .debug_str:0000000000000156 .LASF181
     /tmp/ccqeMSQt.s:5900   .debug_str:00000000000005b2 .LASF182
GAS LISTING /tmp/ccqeMSQt.s 			page 42


     /tmp/ccqeMSQt.s:5922   .debug_str:000000000000063c .LASF183
     /tmp/ccqeMSQt.s:6058   .debug_str:00000000000009ee .LASF184
     /tmp/ccqeMSQt.s:5864   .debug_str:0000000000000497 .LASF185
     /tmp/ccqeMSQt.s:5936   .debug_str:000000000000068f .LASF186
     /tmp/ccqeMSQt.s:5950   .debug_str:00000000000006d8 .LASF187
     /tmp/ccqeMSQt.s:6240   .debug_str:0000000000000fc1 .LASF274
     /tmp/ccqeMSQt.s:5896   .debug_str:0000000000000591 .LASF189
     /tmp/ccqeMSQt.s:5940   .debug_str:00000000000006a3 .LASF190
     /tmp/ccqeMSQt.s:6160   .debug_str:0000000000000d82 .LASF191
     /tmp/ccqeMSQt.s:5798   .debug_str:00000000000002a5 .LASF192
     /tmp/ccqeMSQt.s:6004   .debug_str:000000000000085c .LASF193
     /tmp/ccqeMSQt.s:6000   .debug_str:000000000000083b .LASF194
     /tmp/ccqeMSQt.s:5788   .debug_str:0000000000000231 .LASF195
     /tmp/ccqeMSQt.s:6180   .debug_str:0000000000000e14 .LASF196
     /tmp/ccqeMSQt.s:5892   .debug_str:0000000000000578 .LASF197
     /tmp/ccqeMSQt.s:5778   .debug_str:00000000000001df .LASF198
     /tmp/ccqeMSQt.s:6174   .debug_str:0000000000000ddf .LASF199
     /tmp/ccqeMSQt.s:5874   .debug_str:00000000000004e7 .LASF200
     /tmp/ccqeMSQt.s:6236   .debug_str:0000000000000f99 .LASF201
     /tmp/ccqeMSQt.s:5856   .debug_str:000000000000046a .LASF203
     /tmp/ccqeMSQt.s:6012   .debug_str:00000000000008a5 .LASF205
     /tmp/ccqeMSQt.s:6222   .debug_str:0000000000000f49 .LASF206
     /tmp/ccqeMSQt.s:6102   .debug_str:0000000000000b48 .LASF207
     /tmp/ccqeMSQt.s:5848   .debug_str:000000000000040b .LASF208
     /tmp/ccqeMSQt.s:5994   .debug_str:0000000000000813 .LASF209
     /tmp/ccqeMSQt.s:6206   .debug_str:0000000000000ee3 .LASF210
     /tmp/ccqeMSQt.s:5992   .debug_str:000000000000080e .LASF211
     /tmp/ccqeMSQt.s:6112   .debug_str:0000000000000b93 .LASF212
     /tmp/ccqeMSQt.s:5840   .debug_str:00000000000003ba .LASF214
     /tmp/ccqeMSQt.s:5912   .debug_str:00000000000005f0 .LASF231
     /tmp/ccqeMSQt.s:6238   .debug_str:0000000000000fab .LASF215
     /tmp/ccqeMSQt.s:6218   .debug_str:0000000000000f25 .LASF216
     /tmp/ccqeMSQt.s:5810   .debug_str:000000000000030b .LASF218
     /tmp/ccqeMSQt.s:5938   .debug_str:000000000000069e .LASF217
     /tmp/ccqeMSQt.s:5714   .debug_str:0000000000000016 .LASF219
     /tmp/ccqeMSQt.s:6148   .debug_str:0000000000000c87 .LASF220
     /tmp/ccqeMSQt.s:5882   .debug_str:0000000000000533 .LASF221
     /tmp/ccqeMSQt.s:5712   .debug_str:0000000000000010 .LASF222
     /tmp/ccqeMSQt.s:5836   .debug_str:00000000000003aa .LASF223
     /tmp/ccqeMSQt.s:6044   .debug_str:000000000000099a .LASF224
     /tmp/ccqeMSQt.s:6146   .debug_str:0000000000000c7c .LASF225
     /tmp/ccqeMSQt.s:5800   .debug_str:00000000000002ab .LASF226
     /tmp/ccqeMSQt.s:5996   .debug_str:000000000000081b .LASF227
     /tmp/ccqeMSQt.s:6164   .debug_str:0000000000000d9d .LASF228
     /tmp/ccqeMSQt.s:6118   .debug_str:0000000000000bc6 .LASF229
     /tmp/ccqeMSQt.s:6034   .debug_str:0000000000000949 .LASF230
     /tmp/ccqeMSQt.s:6114   .debug_str:0000000000000ba6 .LASF232
     /tmp/ccqeMSQt.s:6068   .debug_str:0000000000000a2b .LASF233
     /tmp/ccqeMSQt.s:6120   .debug_str:0000000000000bdd .LASF234
     /tmp/ccqeMSQt.s:6092   .debug_str:0000000000000b0c .LASF235
     /tmp/ccqeMSQt.s:6184   .debug_str:0000000000000e3c .LASF236
     /tmp/ccqeMSQt.s:5880   .debug_str:000000000000051b .LASF237
     /tmp/ccqeMSQt.s:5734   .debug_str:000000000000009a .LASF238
     /tmp/ccqeMSQt.s:5978   .debug_str:00000000000007ab .LASF239
     /tmp/ccqeMSQt.s:6200   .debug_str:0000000000000ecc .LASF240
     /tmp/ccqeMSQt.s:6100   .debug_str:0000000000000b41 .LASF241
     /tmp/ccqeMSQt.s:6140   .debug_str:0000000000000c54 .LASF242
GAS LISTING /tmp/ccqeMSQt.s 			page 43


     /tmp/ccqeMSQt.s:5740   .debug_str:00000000000000cb .LASF243
     /tmp/ccqeMSQt.s:5946   .debug_str:00000000000006c0 .LASF244
     /tmp/ccqeMSQt.s:6082   .debug_str:0000000000000ace .LASF245
     /tmp/ccqeMSQt.s:6166   .debug_str:0000000000000dac .LASF246
     /tmp/ccqeMSQt.s:5730   .debug_str:000000000000007b .LASF247
     /tmp/ccqeMSQt.s:5752   .debug_str:000000000000011d .LASF248
     /tmp/ccqeMSQt.s:6186   .debug_str:0000000000000e53 .LASF249
     /tmp/ccqeMSQt.s:6198   .debug_str:0000000000000ec1 .LASF250
     /tmp/ccqeMSQt.s:5844   .debug_str:00000000000003e8 .LASF251
     /tmp/ccqeMSQt.s:6126   .debug_str:0000000000000c02 .LASF252
     /tmp/ccqeMSQt.s:5808   .debug_str:00000000000002ee .LASF253
     /tmp/ccqeMSQt.s:6054   .debug_str:00000000000009d7 .LASF254
     /tmp/ccqeMSQt.s:5792   .debug_str:000000000000025d .LASF255
     /tmp/ccqeMSQt.s:6254   .debug_str:0000000000001051 .LASF256
     /tmp/ccqeMSQt.s:5850   .debug_str:0000000000000417 .LASF257
     /tmp/ccqeMSQt.s:6024   .debug_str:00000000000008f2 .LASF258
     /tmp/ccqeMSQt.s:6028   .debug_str:0000000000000912 .LASF259
     /tmp/ccqeMSQt.s:6006   .debug_str:0000000000000872 .LASF260
     /tmp/ccqeMSQt.s:72     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000000 .LFB39
     /tmp/ccqeMSQt.s:161    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000088 .LFE39
     /tmp/ccqeMSQt.s:5860   .debug_str:0000000000000489 .LASF275
     /tmp/ccqeMSQt.s:4973   .debug_loc:0000000000000000 .LLST1
     /tmp/ccqeMSQt.s:4995   .debug_loc:000000000000005f .LLST2
     /tmp/ccqeMSQt.s:5013   .debug_loc:00000000000000ab .LLST3
     /tmp/ccqeMSQt.s:5908   .debug_str:00000000000005e1 .LASF261
     /tmp/ccqeMSQt.s:5037   .debug_loc:000000000000011b .LLST4
     /tmp/ccqeMSQt.s:128    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000058 .LVL8
     /tmp/ccqeMSQt.s:168    .text:0000000000000044 .LFB35
     /tmp/ccqeMSQt.s:1008   .text:00000000000003c8 .LFE35
     /tmp/ccqeMSQt.s:5057   .debug_loc:0000000000000178 .LLST5
     /tmp/ccqeMSQt.s:5128   .debug_loc:00000000000002cb .LLST6
     /tmp/ccqeMSQt.s:5203   .debug_loc:0000000000000431 .LLST7
     /tmp/ccqeMSQt.s:5274   .debug_loc:0000000000000584 .LLST8
     /tmp/ccqeMSQt.s:5345   .debug_loc:00000000000006d7 .LLST9
     /tmp/ccqeMSQt.s:6116   .debug_str:0000000000000bbf .LASF262
     /tmp/ccqeMSQt.s:5416   .debug_loc:000000000000082a .LLST10
     /tmp/ccqeMSQt.s:418    .text:0000000000000108 .LBB98
     /tmp/ccqeMSQt.s:467    .text:000000000000014c .LBE98
     /tmp/ccqeMSQt.s:5443   .debug_loc:000000000000089d .LLST23
     /tmp/ccqeMSQt.s:431    .text:0000000000000118 .LBB99
     /tmp/ccqeMSQt.s:456    .text:000000000000013c .LBE99
     /tmp/ccqeMSQt.s:5458   .debug_loc:00000000000008e6 .LLST24
     /tmp/ccqeMSQt.s:444    .text:0000000000000130 .LVL23
     /tmp/ccqeMSQt.s:470    .text:000000000000014c .LBB100
     /tmp/ccqeMSQt.s:560    .text:00000000000001c8 .LBE100
     /tmp/ccqeMSQt.s:5465   .debug_loc:0000000000000909 .LLST25
     /tmp/ccqeMSQt.s:5472   .debug_loc:000000000000092c .LLST26
     /tmp/ccqeMSQt.s:5487   .debug_loc:0000000000000975 .LLST27
     /tmp/ccqeMSQt.s:5498   .debug_loc:00000000000009ab .LLST28
     /tmp/ccqeMSQt.s:486    .text:000000000000016c .LVL30
     /tmp/ccqeMSQt.s:494    .text:000000000000017c .LVL31
     /tmp/ccqeMSQt.s:529    .text:00000000000001ac .LVL35
     /tmp/ccqeMSQt.s:584    .text:00000000000001f0 .LBB110
     /tmp/ccqeMSQt.s:658    .text:0000000000000228 .LBE110
     /tmp/ccqeMSQt.s:5509   .debug_loc:00000000000009e1 .LLST30
     /tmp/ccqeMSQt.s:5516   .debug_loc:0000000000000a04 .LLST31
     /tmp/ccqeMSQt.s:586    .text:00000000000001f0 .LBB111
GAS LISTING /tmp/ccqeMSQt.s 			page 44


     /tmp/ccqeMSQt.s:602    .text:00000000000001fc .LBE111
     /tmp/ccqeMSQt.s:604    .text:00000000000001fc .LBB113
     /tmp/ccqeMSQt.s:620    .text:0000000000000208 .LBE113
     /tmp/ccqeMSQt.s:630    .text:000000000000021c .LBB115
     /tmp/ccqeMSQt.s:641    .text:0000000000000220 .LBE115
     /tmp/ccqeMSQt.s:5523   .debug_loc:0000000000000a27 .LLST32
     /tmp/ccqeMSQt.s:643    .text:0000000000000220 .LBB117
     /tmp/ccqeMSQt.s:657    .text:0000000000000228 .LBE117
     /tmp/ccqeMSQt.s:5530   .debug_loc:0000000000000a4a .LLST33
     /tmp/ccqeMSQt.s:628    .text:000000000000021c .LVL45
     /tmp/ccqeMSQt.s:662    .text:0000000000000228 .LBB74
     /tmp/ccqeMSQt.s:798    .text:00000000000002c4 .LBE74
     /tmp/ccqeMSQt.s:5537   .debug_loc:0000000000000a6d .LLST15
     /tmp/ccqeMSQt.s:5544   .debug_loc:0000000000000a90 .LLST16
     /tmp/ccqeMSQt.s:5551   .debug_loc:0000000000000ab3 .LLST17
     /tmp/ccqeMSQt.s:773    .text:0000000000000298 .LBB81
     /tmp/ccqeMSQt.s:784    .text:00000000000002b0 .LBE81
     /tmp/ccqeMSQt.s:5558   .debug_loc:0000000000000ad6 .LLST18
     /tmp/ccqeMSQt.s:783    .text:00000000000002b0 .LVL58
     /tmp/ccqeMSQt.s:664    .text:0000000000000228 .LBB75
     /tmp/ccqeMSQt.s:680    .text:0000000000000234 .LBE75
     /tmp/ccqeMSQt.s:682    .text:0000000000000234 .LBB77
     /tmp/ccqeMSQt.s:698    .text:0000000000000240 .LBE77
     /tmp/ccqeMSQt.s:713    .text:0000000000000254 .LBB82
     /tmp/ccqeMSQt.s:724    .text:0000000000000258 .LBE82
     /tmp/ccqeMSQt.s:5566   .debug_loc:0000000000000afa .LLST19
     /tmp/ccqeMSQt.s:726    .text:0000000000000258 .LBB84
     /tmp/ccqeMSQt.s:737    .text:000000000000025c .LBE84
     /tmp/ccqeMSQt.s:5573   .debug_loc:0000000000000b1d .LLST20
     /tmp/ccqeMSQt.s:739    .text:000000000000025c .LBB86
     /tmp/ccqeMSQt.s:754    .text:0000000000000268 .LBE86
     /tmp/ccqeMSQt.s:5580   .debug_loc:0000000000000b40 .LLST21
     /tmp/ccqeMSQt.s:702    .text:0000000000000248 .LVL50
     /tmp/ccqeMSQt.s:770    .text:0000000000000294 .LVL56
     /tmp/ccqeMSQt.s:792    .text:00000000000002c0 .LVL59
     /tmp/ccqeMSQt.s:5589   .debug_loc:0000000000000b66 .LLST11
     /tmp/ccqeMSQt.s:5604   .debug_loc:0000000000000baf .LLST12
     /tmp/ccqeMSQt.s:266    .text:00000000000000b0 .LBB64
     /tmp/ccqeMSQt.s:281    .text:00000000000000bc .LBE64
     /tmp/ccqeMSQt.s:286    .text:00000000000000c0 .LBB66
     /tmp/ccqeMSQt.s:302    .text:00000000000000cc .LBE66
     /tmp/ccqeMSQt.s:809    .text:00000000000002cc .LBB68
     /tmp/ccqeMSQt.s:820    .text:00000000000002d0 .LBE68
     /tmp/ccqeMSQt.s:5619   .debug_loc:0000000000000bf8 .LLST13
     /tmp/ccqeMSQt.s:822    .text:00000000000002d0 .LBB70
     /tmp/ccqeMSQt.s:834    .text:00000000000002d4 .LBE70
     /tmp/ccqeMSQt.s:5626   .debug_loc:0000000000000c1b .LLST14
     /tmp/ccqeMSQt.s:805    .text:00000000000002cc .LVL61
     /tmp/ccqeMSQt.s:868    .text:00000000000002fc .LVL65
     /tmp/ccqeMSQt.s:877    .text:0000000000000308 .LVL67
     /tmp/ccqeMSQt.s:886    .text:0000000000000314 .LVL69
     /tmp/ccqeMSQt.s:899    .text:000000000000032c .LVL71
     /tmp/ccqeMSQt.s:910    .text:000000000000033c .LVL74
     /tmp/ccqeMSQt.s:919    .text:0000000000000348 .LVL76
     /tmp/ccqeMSQt.s:928    .text:0000000000000354 .LVL78
     /tmp/ccqeMSQt.s:937    .text:0000000000000360 .LVL80
     /tmp/ccqeMSQt.s:946    .text:000000000000036c .LVL82
GAS LISTING /tmp/ccqeMSQt.s 			page 45


     /tmp/ccqeMSQt.s:955    .text:0000000000000378 .LVL84
     /tmp/ccqeMSQt.s:969    .text:0000000000000394 .LVL88
     /tmp/ccqeMSQt.s:978    .text:00000000000003a0 .LVL90
     /tmp/ccqeMSQt.s:989    .text:00000000000003b0 .LVL93
     /tmp/ccqeMSQt.s:221    .text:0000000000000078 .LBB58
     /tmp/ccqeMSQt.s:237    .text:0000000000000084 .LBE58
     /tmp/ccqeMSQt.s:392    .text:00000000000000f0 .LBB93
     /tmp/ccqeMSQt.s:404    .text:00000000000000f8 .LBE93
     /tmp/ccqeMSQt.s:5633   .debug_loc:0000000000000c3e .LLST22
     /tmp/ccqeMSQt.s:407    .text:00000000000000f8 .LBB96
     /tmp/ccqeMSQt.s:415    .text:0000000000000104 .LBE96
     /tmp/ccqeMSQt.s:573    .text:00000000000001e8 .LBB108
     /tmp/ccqeMSQt.s:581    .text:00000000000001ec .LBE108
     /tmp/ccqeMSQt.s:5641   .debug_loc:0000000000000c62 .LLST29
     /tmp/ccqeMSQt.s:1001   .text:00000000000003c4 .LVL96
     /tmp/ccqeMSQt.s:10     .text:0000000000000000 .LFB34
     /tmp/ccqeMSQt.s:65     .text:0000000000000044 .LFE34
     /tmp/ccqeMSQt.s:30     .text:0000000000000028 .LBB56
     /tmp/ccqeMSQt.s:44     .text:0000000000000030 .LBE56
     /tmp/ccqeMSQt.s:5648   .debug_loc:0000000000000c85 .LLST0
     /tmp/ccqeMSQt.s:5746   .debug_str:0000000000000103 .LASF263
     /tmp/ccqeMSQt.s:6022   .debug_str:00000000000008eb .LASF276
     /tmp/ccqeMSQt.s:5968   .debug_str:000000000000076b .LASF264
     /tmp/ccqeMSQt.s:6220   .debug_str:0000000000000f3b .LASF265
     /tmp/ccqeMSQt.s:5884   .debug_str:0000000000000538 .LASF266
     /tmp/ccqeMSQt.s:6030   .debug_str:0000000000000927 .LASF267
     /tmp/ccqeMSQt.s:76     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000000 .LVL2
     /tmp/ccqeMSQt.s:81     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000008 .LVL4
     /tmp/ccqeMSQt.s:139    .text._ZN4ListI3TCBE6removeEPS0_:0000000000000068 .LVL9
     /tmp/ccqeMSQt.s:78     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000004 .LVL3
     /tmp/ccqeMSQt.s:84     .text._ZN4ListI3TCBE6removeEPS0_:000000000000000c .LVL5
     /tmp/ccqeMSQt.s:92     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000018 .LVL6
     /tmp/ccqeMSQt.s:97     .text._ZN4ListI3TCBE6removeEPS0_:0000000000000020 .LVL7
     /tmp/ccqeMSQt.s:194    .text:0000000000000068 .LVL10
     /tmp/ccqeMSQt.s:426    .text:0000000000000114 .LVL22
     /tmp/ccqeMSQt.s:654    .text:0000000000000228 .LVL47
     /tmp/ccqeMSQt.s:795    .text:00000000000002c4 .LVL60
     /tmp/ccqeMSQt.s:857    .text:00000000000002f4 .LVL64
     /tmp/ccqeMSQt.s:871    .text:0000000000000300 .LVL66
     /tmp/ccqeMSQt.s:880    .text:000000000000030c .LVL68
     /tmp/ccqeMSQt.s:889    .text:0000000000000318 .LVL70
     /tmp/ccqeMSQt.s:902    .text:0000000000000330 .LVL72
     /tmp/ccqeMSQt.s:913    .text:0000000000000340 .LVL75
     /tmp/ccqeMSQt.s:922    .text:000000000000034c .LVL77
     /tmp/ccqeMSQt.s:931    .text:0000000000000358 .LVL79
     /tmp/ccqeMSQt.s:940    .text:0000000000000364 .LVL81
     /tmp/ccqeMSQt.s:949    .text:0000000000000370 .LVL83
     /tmp/ccqeMSQt.s:958    .text:000000000000037c .LVL85
     /tmp/ccqeMSQt.s:972    .text:0000000000000398 .LVL89
     /tmp/ccqeMSQt.s:981    .text:00000000000003a4 .LVL91
     /tmp/ccqeMSQt.s:992    .text:00000000000003b4 .LVL94
     /tmp/ccqeMSQt.s:200    .text:000000000000006c .LVL11
     /tmp/ccqeMSQt.s:967    .text:000000000000038c .LVL87
     /tmp/ccqeMSQt.s:987    .text:00000000000003a8 .LVL92
     /tmp/ccqeMSQt.s:998    .text:00000000000003b8 .LVL95
     /tmp/ccqeMSQt.s:206    .text:0000000000000070 .LVL12
     /tmp/ccqeMSQt.s:908    .text:0000000000000334 .LVL73
GAS LISTING /tmp/ccqeMSQt.s 			page 46


     /tmp/ccqeMSQt.s:964    .text:0000000000000380 .LVL86
     /tmp/ccqeMSQt.s:212    .text:0000000000000074 .LVL13
     /tmp/ccqeMSQt.s:218    .text:0000000000000078 .LVL14
     /tmp/ccqeMSQt.s:235    .text:0000000000000084 .LVL15
     /tmp/ccqeMSQt.s:260    .text:00000000000000a8 .LVL16
     /tmp/ccqeMSQt.s:308    .text:00000000000000e0 .LVL19
     /tmp/ccqeMSQt.s:385    .text:00000000000000f0 .LVL20
     /tmp/ccqeMSQt.s:453    .text:0000000000000138 .LVL25
     /tmp/ccqeMSQt.s:459    .text:0000000000000140 .LVL26
     /tmp/ccqeMSQt.s:465    .text:000000000000014c .LVL27
     /tmp/ccqeMSQt.s:448    .text:0000000000000134 .LVL24
     /tmp/ccqeMSQt.s:474    .text:0000000000000158 .LVL28
     /tmp/ccqeMSQt.s:519    .text:0000000000000198 .LVL34
     /tmp/ccqeMSQt.s:533    .text:00000000000001b4 .LVL36
     /tmp/ccqeMSQt.s:541    .text:00000000000001b8 .LVL37
     /tmp/ccqeMSQt.s:549    .text:00000000000001c0 .LVL38
     /tmp/ccqeMSQt.s:556    .text:00000000000001c8 .LVL40
     /tmp/ccqeMSQt.s:476    .text:000000000000015c .LVL29
     /tmp/ccqeMSQt.s:554    .text:00000000000001c4 .LVL39
     /tmp/ccqeMSQt.s:500    .text:0000000000000180 .LVL32
     /tmp/ccqeMSQt.s:510    .text:000000000000018c .LVL33
     /tmp/ccqeMSQt.s:600    .text:00000000000001fc .LVL43
     /tmp/ccqeMSQt.s:618    .text:0000000000000208 .LVL44
     /tmp/ccqeMSQt.s:638    .text:0000000000000220 .LVL46
     /tmp/ccqeMSQt.s:678    .text:0000000000000234 .LVL48
     /tmp/ccqeMSQt.s:696    .text:0000000000000240 .LVL49
     /tmp/ccqeMSQt.s:704    .text:000000000000024c .LVL51
     /tmp/ccqeMSQt.s:709    .text:0000000000000254 .LVL52
     /tmp/ccqeMSQt.s:778    .text:00000000000002a4 .LVL57
     /tmp/ccqeMSQt.s:721    .text:0000000000000258 .LVL53
     /tmp/ccqeMSQt.s:734    .text:000000000000025c .LVL54
     /tmp/ccqeMSQt.s:751    .text:0000000000000268 .LVL55
     /tmp/ccqeMSQt.s:284    .text:00000000000000c0 .LVL17
     /tmp/ccqeMSQt.s:830    .text:00000000000002d4 .LVL63
     /tmp/ccqeMSQt.s:300    .text:00000000000000cc .LVL18
     /tmp/ccqeMSQt.s:817    .text:00000000000002d0 .LVL62
     /tmp/ccqeMSQt.s:401    .text:00000000000000f8 .LVL21
     /tmp/ccqeMSQt.s:572    .text:00000000000001e8 .LVL41
     /tmp/ccqeMSQt.s:579    .text:00000000000001ec .LVL42
     /tmp/ccqeMSQt.s:29     .text:0000000000000028 .LVL0
     /tmp/ccqeMSQt.s:40     .text:0000000000000030 .LVL1
     /tmp/ccqeMSQt.s:1018   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccqeMSQt.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccqeMSQt.s:1010   .text:00000000000003c8 .Letext0
     /tmp/ccqeMSQt.s:264    .text:00000000000000b0 .LBB63
     /tmp/ccqeMSQt.s:387    .text:00000000000000f0 .LBE63
     /tmp/ccqeMSQt.s:800    .text:00000000000002c4 .LBB72
     /tmp/ccqeMSQt.s:835    .text:00000000000002d4 .LBE72
     /tmp/ccqeMSQt.s:863    .text:00000000000002f4 .LBB73
     /tmp/ccqeMSQt.s:994    .text:00000000000003b4 .LBE73
     /tmp/ccqeMSQt.s:478    .text:000000000000015c .LBB101
     /tmp/ccqeMSQt.s:537    .text:00000000000001b4 .LBE101
     /tmp/ccqeMSQt.s:545    .text:00000000000001bc .LBB106
     /tmp/ccqeMSQt.s:559    .text:00000000000001c8 .LBE106
     /tmp/ccqeMSQt.s:479    .text:000000000000015c .LBB102
     /tmp/ccqeMSQt.s:536    .text:00000000000001b4 .LBE102
     /tmp/ccqeMSQt.s:551    .text:00000000000001c0 .LBB105
GAS LISTING /tmp/ccqeMSQt.s 			page 47


     /tmp/ccqeMSQt.s:558    .text:00000000000001c8 .LBE105
     /tmp/ccqeMSQt.s:480    .text:000000000000015c .LBB103
     /tmp/ccqeMSQt.s:496    .text:000000000000017c .LBE103
     /tmp/ccqeMSQt.s:506    .text:0000000000000188 .LBB104
     /tmp/ccqeMSQt.s:535    .text:00000000000001b4 .LBE104

UNDEFINED SYMBOLS
_ZN3TCB7runningE
_Z14handleNewCharsPv
_ZdlPv
_ZN9Scheduler12first_sleepyE
_ZN9Scheduler3putEP3TCB
_ZN3Sem5firstE
_ZN9Scheduler4peekEv
_ZN3TCB16time_slice_countE
_ZN3TCB8dispatchEv
plic_claim
CONSOLE_STATUS
_ZN9myConsole11inputBufferE
_ZNK13BoundedBuffer4fullEv
CONSOLE_RX_DATA
_ZN9myConsole10input_putcEc
plic_complete
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB13_threadCreateEPPS_PFvPvES2_S2_
_ZN3TCB11_threadExitEv
_ZN3Sem4openEPPS_j
_ZN3Sem7s_closeEPS_
_ZN3Sem4waitEPS_
_ZN3Sem6signalEPS_
_ZN3Sem9timedWaitEPS_m
_ZN3Sem7trywaitEPS_
_ZN9Scheduler12put_to_sleepEP3TCBm
_ZN9myConsole10input_getcEv
_ZN9myConsole11output_putcEc
_Z12printIntegerm
